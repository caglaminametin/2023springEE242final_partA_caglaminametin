
springmt_deneme2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800dfa0  0800dfa0  0001dfa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4b4  0800e4b4  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4b4  0800e4b4  0001e4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4bc  0800e4bc  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4bc  0800e4bc  0001e4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4c0  0800e4c0  0001e4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800e4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d0  2**0
                  CONTENTS
 10 .bss          00001d58  200002d0  200002d0  000202d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002028  20002028  000202d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016824  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038f8  00000000  00000000  00036b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  0003a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e8  00000000  00000000  0003b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002623d  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a96  00000000  00000000  00062bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dac60  00000000  00000000  0007b66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001562cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000671c  00000000  00000000  0015631c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df88 	.word	0x0800df88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800df88 	.word	0x0800df88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fc07 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f895 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001006:	f000 f9cd 	bl	80013a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800100a:	f000 f9ab 	bl	8001364 <MX_DMA_Init>
  MX_ADC1_Init();
 800100e:	f000 f8fb 	bl	8001208 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001012:	f000 f959 	bl	80012c8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001016:	f007 fdfb 	bl	8008c10 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t*) Adc_1, 2 );
 800101a:	2202      	movs	r2, #2
 800101c:	493c      	ldr	r1, [pc, #240]	; (8001110 <main+0x118>)
 800101e:	483d      	ldr	r0, [pc, #244]	; (8001114 <main+0x11c>)
 8001020:	f000 fde0 	bl	8001be4 <HAL_ADC_Start_DMA>
HAL_TIM_Base_Start(&htim3);
 8001024:	483c      	ldr	r0, [pc, #240]	; (8001118 <main+0x120>)
 8001026:	f003 fef7 	bl	8004e18 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (AdcConvCmplt)
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <main+0x124>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d046      	beq.n	80010c0 <main+0xc8>
	  {
		  double VrefInt= (VREFINT*ADCMAX)/Adc_1[0];
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <main+0x118>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa74 	bl	8000524 <__aeabi_i2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	a12b      	add	r1, pc, #172	; (adr r1, 80010f0 <main+0xf8>)
 8001042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001046:	f7ff fc01 	bl	800084c <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  double Vtempsens=(VrefInt* (Adc_1[1]))/ADCMAX;
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <main+0x118>)
 8001054:	885b      	ldrh	r3, [r3, #2]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa64 	bl	8000524 <__aeabi_i2d>
 800105c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001060:	f7ff faca 	bl	80005f8 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	a322      	add	r3, pc, #136	; (adr r3, 80010f8 <main+0x100>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fbeb 	bl	800084c <__aeabi_ddiv>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9c7 2300 	strd	r2, r3, [r7]
		  Temperature=(((Vtempsens-V25)/(Avg_slope)) + 25.0) ;
 800107e:	a320      	add	r3, pc, #128	; (adr r3, 8001100 <main+0x108>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001088:	f7ff f8fe 	bl	8000288 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	a31c      	add	r3, pc, #112	; (adr r3, 8001108 <main+0x110>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fbd7 	bl	800084c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <main+0x128>)
 80010ac:	f7ff f8ee 	bl	800028c <__adddf3>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	491b      	ldr	r1, [pc, #108]	; (8001124 <main+0x12c>)
 80010b6:	e9c1 2300 	strd	r2, r3, [r1]



	  	 AdcConvCmplt =0;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <main+0x124>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
	  }//if
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf((char*)temp, "Temp: %lf\r\n", Temperature);
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <main+0x12c>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	4918      	ldr	r1, [pc, #96]	; (8001128 <main+0x130>)
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <main+0x134>)
 80010ca:	f009 f96d 	bl	800a3a8 <siprintf>
	  CDC_Transmit_FS(temp, strlen((char*)temp));
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <main+0x134>)
 80010d0:	f7ff f87e 	bl	80001d0 <strlen>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	4814      	ldr	r0, [pc, #80]	; (800112c <main+0x134>)
 80010dc:	f007 fe56 	bl	8008d8c <CDC_Transmit_FS>
	  HAL_Delay(300);
 80010e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010e4:	f000 fc06 	bl	80018f4 <HAL_Delay>
	  if (AdcConvCmplt)
 80010e8:	e79f      	b.n	800102a <main+0x32>
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	33333333 	.word	0x33333333
 80010f4:	40b35af3 	.word	0x40b35af3
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40affe00 	.word	0x40affe00
 8001100:	851eb852 	.word	0x851eb852
 8001104:	3fe851eb 	.word	0x3fe851eb
 8001108:	47ae147b 	.word	0x47ae147b
 800110c:	3f647ae1 	.word	0x3f647ae1
 8001110:	200003dc 	.word	0x200003dc
 8001114:	200002ec 	.word	0x200002ec
 8001118:	20000394 	.word	0x20000394
 800111c:	200003e0 	.word	0x200003e0
 8001120:	40390000 	.word	0x40390000
 8001124:	200003e8 	.word	0x200003e8
 8001128:	0800dfa0 	.word	0x0800dfa0
 800112c:	200003f0 	.word	0x200003f0

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b094      	sub	sp, #80	; 0x50
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	2230      	movs	r2, #48	; 0x30
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f008 faaa 	bl	8009698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <SystemClock_Config+0xd0>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <SystemClock_Config+0xd0>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemClock_Config+0xd0>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	4b23      	ldr	r3, [pc, #140]	; (8001204 <SystemClock_Config+0xd4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a22      	ldr	r2, [pc, #136]	; (8001204 <SystemClock_Config+0xd4>)
 800117a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b20      	ldr	r3, [pc, #128]	; (8001204 <SystemClock_Config+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011a0:	2319      	movs	r3, #25
 80011a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f988 	bl	80044cc <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011c2:	f000 f92d 	bl	8001420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	2105      	movs	r1, #5
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fbe9 	bl	80049bc <HAL_RCC_ClockConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f0:	f000 f916 	bl	8001420 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80011f4:	f003 fcc8 	bl	8004b88 <HAL_RCC_EnableCSS>
}
 80011f8:	bf00      	nop
 80011fa:	3750      	adds	r7, #80	; 0x50
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	463b      	mov	r3, r7
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121a:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800121c:	4a29      	ldr	r2, [pc, #164]	; (80012c4 <MX_ADC1_Init+0xbc>)
 800121e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001226:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001230:	2201      	movs	r2, #1
 8001232:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001236:	2201      	movs	r2, #1
 8001238:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800124c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800125a:	2202      	movs	r2, #2
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_ADC1_Init+0xb8>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800126e:	f000 fb65 	bl	800193c <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001278:	f000 f8d2 	bl	8001420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800127c:	2311      	movs	r3, #17
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001284:	2307      	movs	r3, #7
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_ADC1_Init+0xb8>)
 800128e:	f000 fdd7 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001298:	f000 f8c2 	bl	8001420 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800129c:	2310      	movs	r3, #16
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_ADC1_Init+0xb8>)
 80012aa:	f000 fdc9 	bl	8001e40 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80012b4:	f000 f8b4 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002ec 	.word	0x200002ec
 80012c4:	40012000 	.word	0x40012000

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM3_Init+0x94>)
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_TIM3_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_TIM3_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM3_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM3_Init+0x94>)
 80012f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_TIM3_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM3_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_TIM3_Init+0x94>)
 800130c:	f003 fd35 	bl	8004d7a <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f883 	bl	8001420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_TIM3_Init+0x94>)
 8001328:	f003 fdde 	bl	8004ee8 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 f875 	bl	8001420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001336:	2320      	movs	r3, #32
 8001338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM3_Init+0x94>)
 8001344:	f003 ffd2 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800134e:	f000 f867 	bl	8001420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000394 	.word	0x20000394
 8001360:	40000400 	.word	0x40000400

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <MX_DMA_Init+0x3c>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_DMA_Init+0x3c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2038      	movs	r0, #56	; 0x38
 800138c:	f001 f8dd 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001390:	2038      	movs	r0, #56	; 0x38
 8001392:	f001 f8f6 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_GPIO_Init+0x4c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc )
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if(hadc ->Instance == ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_ADC_ConvCpltCallback+0x24>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d102      	bne.n	800140c <HAL_ADC_ConvCpltCallback+0x18>
	{

		 AdcConvCmplt = 255;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_ADC_ConvCpltCallback+0x28>)
 8001408:	22ff      	movs	r2, #255	; 0xff
 800140a:	701a      	strb	r2, [r3, #0]
	}
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40012000 	.word	0x40012000
 800141c:	200003e0 	.word	0x200003e0

08001420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001424:	b672      	cpsid	i
}
 8001426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x8>
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_ADC_MspInit+0xa8>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d145      	bne.n	800151a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_ADC_MspInit+0xac>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0xac>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6453      	str	r3, [r2, #68]	; 0x44
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_ADC_MspInit+0xac>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_ADC_MspInit+0xb4>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d2:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014ee:	480f      	ldr	r0, [pc, #60]	; (800152c <HAL_ADC_MspInit+0xb0>)
 80014f0:	f001 f862 	bl	80025b8 <HAL_DMA_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 80014fa:	f7ff ff91 	bl	8001420 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_ADC_MspInit+0xb0>)
 8001502:	639a      	str	r2, [r3, #56]	; 0x38
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_ADC_MspInit+0xb0>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2012      	movs	r0, #18
 8001510:	f001 f81b 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001514:	2012      	movs	r0, #18
 8001516:	f001 f834 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40012000 	.word	0x40012000
 8001528:	40023800 	.word	0x40023800
 800152c:	20000334 	.word	0x20000334
 8001530:	40026410 	.word	0x40026410

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <HAL_TIM_Base_MspInit+0x3c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10d      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <HAL_TIM_Base_MspInit+0x40>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400
 8001574:	40023800 	.word	0x40023800

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800157c:	f003 fbe2 	bl	8004d44 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <NMI_Handler+0x8>

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <MemManage_Handler+0x4>

0800158e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler+0x4>

0800159a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 f974 	bl	80018b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <ADC_IRQHandler+0x10>)
 80015d6:	f000 f9f4 	bl	80019c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002ec 	.word	0x200002ec

080015e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA2_Stream0_IRQHandler+0x10>)
 80015ea:	f001 f8eb 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000334 	.word	0x20000334

080015f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <OTG_FS_IRQHandler+0x10>)
 80015fe:	f001 fe37 	bl	8003270 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200018ec 	.word	0x200018ec

0800160c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_kill>:

int _kill(int pid, int sig)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001626:	f008 f80d 	bl	8009644 <__errno>
 800162a:	4603      	mov	r3, r0
 800162c:	2216      	movs	r2, #22
 800162e:	601a      	str	r2, [r3, #0]
	return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_exit>:

void _exit (int status)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffe7 	bl	800161c <_kill>
	while (1) {}		/* Make sure we hang here */
 800164e:	e7fe      	b.n	800164e <_exit+0x12>

08001650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001662:	f3af 8000 	nop.w
 8001666:	4601      	mov	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
	}

return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e009      	b.n	80016b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	60ba      	str	r2, [r7, #8]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dbf1      	blt.n	800169c <_write+0x12>
	}
	return len;
 80016b8:	687b      	ldr	r3, [r7, #4]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_close>:

int _close(int file)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_isatty>:

int _isatty(int file)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
	return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f007 ff72 	bl	8009644 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20020000 	.word	0x20020000
 800178c:	00000400 	.word	0x00000400
 8001790:	20000404 	.word	0x20000404
 8001794:	20002028 	.word	0x20002028

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c2:	490e      	ldr	r1, [pc, #56]	; (80017fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c4:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c8:	e002      	b.n	80017d0 <LoopCopyDataInit>

080017ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ce:	3304      	adds	r3, #4

080017d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d4:	d3f9      	bcc.n	80017ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d8:	4c0b      	ldr	r4, [pc, #44]	; (8001808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017dc:	e001      	b.n	80017e2 <LoopFillZerobss>

080017de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e0:	3204      	adds	r2, #4

080017e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e4:	d3fb      	bcc.n	80017de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017e6:	f7ff ffd7 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f007 ff31 	bl	8009650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fc03 	bl	8000ff8 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001800:	0800e4c4 	.word	0x0800e4c4
  ldr r2, =_sbss
 8001804:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001808:	20002028 	.word	0x20002028

0800180c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <CAN1_RX0_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 fe7b 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f000 f808 	bl	8001854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fdf2 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x54>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x58>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fe93 	bl	800259e <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e00e      	b.n	80018a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d80a      	bhi.n	800189e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001890:	f000 fe5b 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001894:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <HAL_InitTick+0x5c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	e000      	b.n	80018a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x20>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x24>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_IncTick+0x24>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000408 	.word	0x20000408

080018dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return uwTick;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_GetTick+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000408 	.word	0x20000408

080018f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fc:	f7ff ffee 	bl	80018dc <HAL_GetTick>
 8001900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800190c:	d005      	beq.n	800191a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_Delay+0x44>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191a:	bf00      	nop
 800191c:	f7ff ffde 	bl	80018dc <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f7      	bhi.n	800191c <HAL_Delay+0x28>
  {
  }
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e033      	b.n	80019ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d109      	bne.n	800196e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fd8e 	bl	800147c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d118      	bne.n	80019ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001982:	f023 0302 	bic.w	r3, r3, #2
 8001986:	f043 0202 	orr.w	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 fb78 	bl	8002084 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
 80019aa:	e001      	b.n	80019b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d049      	beq.n	8001a8c <HAL_ADC_IRQHandler+0xca>
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d046      	beq.n	8001a8c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12b      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d127      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d119      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0220 	bic.w	r2, r2, #32
 8001a56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff fcb9 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0212 	mvn.w	r2, #18
 8001a8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d057      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x190>
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d054      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d139      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d12b      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d124      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11d      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d119      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fc1c 	bl	8002380 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 020c 	mvn.w	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d017      	beq.n	8001b98 <HAL_ADC_IRQHandler+0x1d6>
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d014      	beq.n	8001b98 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10d      	bne.n	8001b98 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f945 	bl	8001e18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0201 	mvn.w	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d015      	beq.n	8001bda <HAL_ADC_IRQHandler+0x218>
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0220 	mvn.w	r2, #32
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f92e 	bl	8001e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0220 	mvn.w	r2, #32
 8001bd8:	601a      	str	r2, [r3, #0]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Start_DMA+0x1e>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0e9      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x1f2>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d018      	beq.n	8001c4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c28:	4b6d      	ldr	r3, [pc, #436]	; (8001de0 <HAL_ADC_Start_DMA+0x1fc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <HAL_ADC_Start_DMA+0x200>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9a      	lsrs	r2, r3, #18
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	f040 80a1 	bne.w	8001dbc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d007      	beq.n	8001cac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f023 0206 	bic.w	r2, r3, #6
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cc6:	e002      	b.n	8001cce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd6:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_ADC_Start_DMA+0x204>)
 8001cd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	4a43      	ldr	r2, [pc, #268]	; (8001dec <HAL_ADC_Start_DMA+0x208>)
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	4a42      	ldr	r2, [pc, #264]	; (8001df0 <HAL_ADC_Start_DMA+0x20c>)
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cee:	4a41      	ldr	r2, [pc, #260]	; (8001df4 <HAL_ADC_Start_DMA+0x210>)
 8001cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	334c      	adds	r3, #76	; 0x4c
 8001d26:	4619      	mov	r1, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f000 fcf2 	bl	8002714 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d12a      	bne.n	8001d92 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2d      	ldr	r2, [pc, #180]	; (8001df8 <HAL_ADC_Start_DMA+0x214>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d015      	beq.n	8001d72 <HAL_ADC_Start_DMA+0x18e>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <HAL_ADC_Start_DMA+0x218>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_Start_DMA+0x178>
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_ADC_Start_DMA+0x204>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00a      	beq.n	8001d72 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_ADC_Start_DMA+0x21c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d136      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_ADC_Start_DMA+0x204>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d130      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d129      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e020      	b.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_ADC_Start_DMA+0x214>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d11b      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d114      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	e00b      	b.n	8001dd4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f043 0210 	orr.w	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	40012300 	.word	0x40012300
 8001dec:	0800227d 	.word	0x0800227d
 8001df0:	08002337 	.word	0x08002337
 8001df4:	08002353 	.word	0x08002353
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	40012100 	.word	0x40012100
 8001e00:	40012200 	.word	0x40012200

08001e04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x1c>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e105      	b.n	8002068 <HAL_ADC_ConfigChannel+0x228>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d925      	bls.n	8001eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68d9      	ldr	r1, [r3, #12]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b1e      	subs	r3, #30
 8001e82:	2207      	movs	r2, #7
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	400a      	ands	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68d9      	ldr	r1, [r3, #12]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4403      	add	r3, r0
 8001eaa:	3b1e      	subs	r3, #30
 8001eac:	409a      	lsls	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	e022      	b.n	8001efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	2207      	movs	r2, #7
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6919      	ldr	r1, [r3, #16]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4403      	add	r3, r0
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d824      	bhi.n	8001f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b05      	subs	r3, #5
 8001f18:	221f      	movs	r2, #31
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	400a      	ands	r2, r1
 8001f26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b05      	subs	r3, #5
 8001f42:	fa00 f203 	lsl.w	r2, r0, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4e:	e04c      	b.n	8001fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b0c      	cmp	r3, #12
 8001f56:	d824      	bhi.n	8001fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	3b23      	subs	r3, #35	; 0x23
 8001f6a:	221f      	movs	r2, #31
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43da      	mvns	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	400a      	ands	r2, r1
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	3b23      	subs	r3, #35	; 0x23
 8001f94:	fa00 f203 	lsl.w	r2, r0, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001fa0:	e023      	b.n	8001fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b41      	subs	r3, #65	; 0x41
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b41      	subs	r3, #65	; 0x41
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_ADC_ConfigChannel+0x234>)
 8001fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_ADC_ConfigChannel+0x238>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d109      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1cc>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_ADC_ConfigChannel+0x238>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d123      	bne.n	800205e <HAL_ADC_ConfigChannel+0x21e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b10      	cmp	r3, #16
 800201c:	d003      	beq.n	8002026 <HAL_ADC_ConfigChannel+0x1e6>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b11      	cmp	r3, #17
 8002024:	d11b      	bne.n	800205e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b10      	cmp	r3, #16
 8002038:	d111      	bne.n	800205e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_ADC_ConfigChannel+0x23c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_ADC_ConfigChannel+0x240>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9a      	lsrs	r2, r3, #18
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002050:	e002      	b.n	8002058 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	3b01      	subs	r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f9      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40012300 	.word	0x40012300
 8002078:	40012000 	.word	0x40012000
 800207c:	20000000 	.word	0x20000000
 8002080:	431bde83 	.word	0x431bde83

08002084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <ADC_Init+0x1f0>)
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	021a      	lsls	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	4a58      	ldr	r2, [pc, #352]	; (8002278 <ADC_Init+0x1f4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d022      	beq.n	8002162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800212a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800214c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6899      	ldr	r1, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e00f      	b.n	8002182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002180:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0202 	bic.w	r2, r2, #2
 8002190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6899      	ldr	r1, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e1b      	ldrb	r3, [r3, #24]
 800219c:	005a      	lsls	r2, r3, #1
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	3b01      	subs	r3, #1
 80021dc:	035a      	lsls	r2, r3, #13
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	e007      	b.n	80021f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	3b01      	subs	r3, #1
 8002214:	051a      	lsls	r2, r3, #20
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800222c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6899      	ldr	r1, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800223a:	025a      	lsls	r2, r3, #9
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6899      	ldr	r1, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	029a      	lsls	r2, r3, #10
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40012300 	.word	0x40012300
 8002278:	0f000001 	.word	0x0f000001

0800227c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d13c      	bne.n	8002310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d12b      	bne.n	8002308 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d127      	bne.n	8002308 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d119      	bne.n	8002308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0220 	bic.w	r2, r2, #32
 80022e2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff f873 	bl	80013f4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800230e:	e00e      	b.n	800232e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff fd85 	bl	8001e2c <HAL_ADC_ErrorCallback>
}
 8002322:	e004      	b.n	800232e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	4798      	blx	r3
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fd5d 	bl	8001e04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f043 0204 	orr.w	r2, r3, #4
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff fd5a 	bl	8001e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db0b      	blt.n	8002422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <__NVIC_EnableIRQ+0x38>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2001      	movs	r0, #1
 800241a:	fa00 f202 	lsl.w	r2, r0, r2
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	; (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	; (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	; (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff29 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff3e 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff31 	bl	80023f8 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff f98a 	bl	80018dc <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e099      	b.n	8002708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f4:	e00f      	b.n	8002616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f6:	f7ff f971 	bl	80018dc <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b05      	cmp	r3, #5
 8002602:	d908      	bls.n	8002616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e078      	b.n	8002708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e8      	bne.n	80025f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_DMA_Init+0x158>)
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b04      	cmp	r3, #4
 800266e:	d107      	bne.n	8002680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4313      	orrs	r3, r2
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0307 	bic.w	r3, r3, #7
 8002696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d117      	bne.n	80026da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fa6f 	bl	8002ba0 <DMA_CheckFifoParam>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026d6:	2301      	movs	r3, #1
 80026d8:	e016      	b.n	8002708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa26 	bl	8002b34 <DMA_CalcBaseAndBitshift>
 80026e8:	4603      	mov	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	f010803f 	.word	0xf010803f

08002714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_DMA_Start_IT+0x26>
 8002736:	2302      	movs	r3, #2
 8002738:	e040      	b.n	80027bc <HAL_DMA_Start_IT+0xa8>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12f      	bne.n	80027ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9b8 	bl	8002ad8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	223f      	movs	r2, #63	; 0x3f
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0216 	orr.w	r2, r2, #22
 8002782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d0:	4b8e      	ldr	r3, [pc, #568]	; (8002a0c <HAL_DMA_IRQHandler+0x248>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a8e      	ldr	r2, [pc, #568]	; (8002a10 <HAL_DMA_IRQHandler+0x24c>)
 80027d6:	fba2 2303 	umull	r2, r3, r2, r3
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0204 	bic.w	r2, r2, #4
 8002816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2208      	movs	r2, #8
 800281e:	409a      	lsls	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2201      	movs	r2, #1
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0202 	orr.w	r2, r3, #2
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	2204      	movs	r2, #4
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d012      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00b      	beq.n	800289c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2204      	movs	r2, #4
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2210      	movs	r2, #16
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d043      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2210      	movs	r2, #16
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d018      	beq.n	8002906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d108      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d024      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
 80028f2:	e01f      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e016      	b.n	8002934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d107      	bne.n	8002924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0208 	bic.w	r2, r2, #8
 8002922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2220      	movs	r2, #32
 800293a:	409a      	lsls	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 808f 	beq.w	8002a64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8087 	beq.w	8002a64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	2220      	movs	r2, #32
 800295c:	409a      	lsls	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b05      	cmp	r3, #5
 800296c:	d136      	bne.n	80029dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0216 	bic.w	r2, r2, #22
 800297c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_DMA_IRQHandler+0x1da>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0208 	bic.w	r2, r2, #8
 80029ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	223f      	movs	r2, #63	; 0x3f
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d07e      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
        }
        return;
 80029da:	e079      	b.n	8002ad0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01d      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d031      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
 8002a08:	e02c      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
 8002a0a:	bf00      	nop
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d023      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e01e      	b.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10f      	bne.n	8002a54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0210 	bic.w	r2, r2, #16
 8002a42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d032      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3301      	adds	r3, #1
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d307      	bcc.n	8002aac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f2      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x2cc>
 8002aaa:	e000      	b.n	8002aae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002aac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e000      	b.n	8002ad2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad0:	bf00      	nop
    }
  }
}
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d108      	bne.n	8002b18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b16:	e007      	b.n	8002b28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3b10      	subs	r3, #16
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <DMA_CalcBaseAndBitshift+0x64>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <DMA_CalcBaseAndBitshift+0x68>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d909      	bls.n	8002b76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	659a      	str	r2, [r3, #88]	; 0x58
 8002b74:	e007      	b.n	8002b86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	aaaaaaab 	.word	0xaaaaaaab
 8002b9c:	0800e004 	.word	0x0800e004

08002ba0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11f      	bne.n	8002bfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d856      	bhi.n	8002c6e <DMA_CheckFifoParam+0xce>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <DMA_CheckFifoParam+0x28>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002beb 	.word	0x08002beb
 8002bd0:	08002bd9 	.word	0x08002bd9
 8002bd4:	08002c6f 	.word	0x08002c6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d046      	beq.n	8002c72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be8:	e043      	b.n	8002c72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf2:	d140      	bne.n	8002c76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e03d      	b.n	8002c76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c02:	d121      	bne.n	8002c48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d837      	bhi.n	8002c7a <DMA_CheckFifoParam+0xda>
 8002c0a:	a201      	add	r2, pc, #4	; (adr r2, 8002c10 <DMA_CheckFifoParam+0x70>)
 8002c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c27 	.word	0x08002c27
 8002c18:	08002c21 	.word	0x08002c21
 8002c1c:	08002c39 	.word	0x08002c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	73fb      	strb	r3, [r7, #15]
      break;
 8002c24:	e030      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d025      	beq.n	8002c7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c36:	e022      	b.n	8002c7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c40:	d11f      	bne.n	8002c82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c46:	e01c      	b.n	8002c82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d903      	bls.n	8002c56 <DMA_CheckFifoParam+0xb6>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d003      	beq.n	8002c5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c54:	e018      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5a:	e015      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00e      	beq.n	8002c86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e00b      	b.n	8002c86 <DMA_CheckFifoParam+0xe6>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e00a      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c72:	bf00      	nop
 8002c74:	e008      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e006      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e004      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e002      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c82:	bf00      	nop
 8002c84:	e000      	b.n	8002c88 <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
    }
  } 
  
  return status; 
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	e16b      	b.n	8002f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	f040 815a 	bne.w	8002f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d005      	beq.n	8002cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d130      	bne.n	8002d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 0201 	and.w	r2, r3, #1
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d017      	beq.n	8002d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d123      	bne.n	8002ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	08da      	lsrs	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3208      	adds	r2, #8
 8002d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	220f      	movs	r2, #15
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	08da      	lsrs	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3208      	adds	r2, #8
 8002dd6:	69b9      	ldr	r1, [r7, #24]
 8002dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	2203      	movs	r2, #3
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80b4 	beq.w	8002f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b60      	ldr	r3, [pc, #384]	; (8002fa4 <HAL_GPIO_Init+0x30c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a5f      	ldr	r2, [pc, #380]	; (8002fa4 <HAL_GPIO_Init+0x30c>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <HAL_GPIO_Init+0x30c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e3a:	4a5b      	ldr	r2, [pc, #364]	; (8002fa8 <HAL_GPIO_Init+0x310>)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_GPIO_Init+0x314>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02b      	beq.n	8002ebe <HAL_GPIO_Init+0x226>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a51      	ldr	r2, [pc, #324]	; (8002fb0 <HAL_GPIO_Init+0x318>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d025      	beq.n	8002eba <HAL_GPIO_Init+0x222>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a50      	ldr	r2, [pc, #320]	; (8002fb4 <HAL_GPIO_Init+0x31c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01f      	beq.n	8002eb6 <HAL_GPIO_Init+0x21e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4f      	ldr	r2, [pc, #316]	; (8002fb8 <HAL_GPIO_Init+0x320>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d019      	beq.n	8002eb2 <HAL_GPIO_Init+0x21a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4e      	ldr	r2, [pc, #312]	; (8002fbc <HAL_GPIO_Init+0x324>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0x216>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4d      	ldr	r2, [pc, #308]	; (8002fc0 <HAL_GPIO_Init+0x328>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00d      	beq.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4c      	ldr	r2, [pc, #304]	; (8002fc4 <HAL_GPIO_Init+0x32c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <HAL_GPIO_Init+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <HAL_GPIO_Init+0x330>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_GPIO_Init+0x20a>
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	e00e      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	e00c      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e00a      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002eaa:	2305      	movs	r3, #5
 8002eac:	e008      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e004      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e002      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_GPIO_Init+0x228>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f002 0203 	and.w	r2, r2, #3
 8002ec6:	0092      	lsls	r2, r2, #2
 8002ec8:	4093      	lsls	r3, r2
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ed0:	4935      	ldr	r1, [pc, #212]	; (8002fa8 <HAL_GPIO_Init+0x310>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	089b      	lsrs	r3, r3, #2
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b3b      	ldr	r3, [pc, #236]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b30      	ldr	r3, [pc, #192]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f56:	4a1d      	ldr	r2, [pc, #116]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_GPIO_Init+0x334>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f67f ae90 	bls.w	8002cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	3724      	adds	r7, #36	; 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	40020400 	.word	0x40020400
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40021400 	.word	0x40021400
 8002fc4:	40021800 	.word	0x40021800
 8002fc8:	40021c00 	.word	0x40021c00
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b08f      	sub	sp, #60	; 0x3c
 8002fd4:	af0a      	add	r7, sp, #40	; 0x28
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e10f      	b.n	8003202 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d106      	bne.n	8003002 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f006 f80d 	bl	800901c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2203      	movs	r2, #3
 8003006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 faf4 	bl	800560e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	687e      	ldr	r6, [r7, #4]
 800302e:	466d      	mov	r5, sp
 8003030:	f106 0410 	add.w	r4, r6, #16
 8003034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003040:	e885 0003 	stmia.w	r5, {r0, r1}
 8003044:	1d33      	adds	r3, r6, #4
 8003046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003048:	6838      	ldr	r0, [r7, #0]
 800304a:	f002 f9cb 	bl	80053e4 <USB_CoreInit>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d0      	b.n	8003202 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fae2 	bl	8005630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e04a      	b.n	8003108 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	333d      	adds	r3, #61	; 0x3d
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	333c      	adds	r3, #60	; 0x3c
 8003096:	7bfa      	ldrb	r2, [r7, #15]
 8003098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	b298      	uxth	r0, r3
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3344      	adds	r3, #68	; 0x44
 80030ae:	4602      	mov	r2, r0
 80030b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3340      	adds	r3, #64	; 0x40
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3348      	adds	r3, #72	; 0x48
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	; 0x4c
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030ee:	7bfa      	ldrb	r2, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3354      	adds	r3, #84	; 0x54
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	3301      	adds	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d3af      	bcc.n	8003072 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
 8003116:	e044      	b.n	80031a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003186:	7bfa      	ldrb	r2, [r7, #15]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	3301      	adds	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d3b5      	bcc.n	8003118 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	687e      	ldr	r6, [r7, #4]
 80031b4:	466d      	mov	r5, sp
 80031b6:	f106 0410 	add.w	r4, r6, #16
 80031ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ca:	1d33      	adds	r3, r6, #4
 80031cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	f002 fa7a 	bl	80056c8 <USB_DevInit>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00d      	b.n	8003202 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f003 fbc9 	bl	8006992 <USB_DevDisconnect>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800320a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_PCD_Start+0x1c>
 8003222:	2302      	movs	r3, #2
 8003224:	e020      	b.n	8003268 <HAL_PCD_Start+0x5e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b01      	cmp	r3, #1
 8003234:	d109      	bne.n	800324a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800323a:	2b01      	cmp	r3, #1
 800323c:	d005      	beq.n	800324a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f002 f9cc 	bl	80055ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 fb79 	bl	8006950 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b08d      	sub	sp, #52	; 0x34
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fc37 	bl	8006afa <USB_GetMode>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 848a 	bne.w	8003ba8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f003 fb9b 	bl	80069d4 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8480 	beq.w	8003ba6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fb88 	bl	80069d4 <USB_ReadInterrupts>
 80032c4:	4603      	mov	r3, r0
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d107      	bne.n	80032de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 0202 	and.w	r2, r2, #2
 80032dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f003 fb76 	bl	80069d4 <USB_ReadInterrupts>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b10      	cmp	r3, #16
 80032f0:	d161      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	0c5b      	lsrs	r3, r3, #17
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	2b02      	cmp	r3, #2
 800332c:	d124      	bne.n	8003378 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d035      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003344:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	6a38      	ldr	r0, [r7, #32]
 800334e:	f003 f9ad 	bl	80066ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800335e:	441a      	add	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003370:	441a      	add	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	621a      	str	r2, [r3, #32]
 8003376:	e016      	b.n	80033a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	0c5b      	lsrs	r3, r3, #17
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	2b06      	cmp	r3, #6
 8003382:	d110      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800338a:	2208      	movs	r2, #8
 800338c:	4619      	mov	r1, r3
 800338e:	6a38      	ldr	r0, [r7, #32]
 8003390:	f003 f98c 	bl	80066ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a0:	441a      	add	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0210 	orr.w	r2, r2, #16
 80033b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 fb0a 	bl	80069d4 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ca:	f040 80a7 	bne.w	800351c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fb0f 	bl	80069fa <USB_ReadDevAllOutEpInterrupt>
 80033dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033de:	e099      	b.n	8003514 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 808e 	beq.w	8003508 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	4611      	mov	r1, r2
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fb33 	bl	8006a62 <USB_ReadDevOutEPInterrupt>
 80033fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00c      	beq.n	8003422 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003414:	461a      	mov	r2, r3
 8003416:	2301      	movs	r3, #1
 8003418:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800341a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fec3 	bl	80041a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00c      	beq.n	8003446 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	461a      	mov	r2, r3
 800343a:	2308      	movs	r3, #8
 800343c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 ff99 	bl	8004378 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	461a      	mov	r2, r3
 800345e:	2310      	movs	r3, #16
 8003460:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d030      	beq.n	80034ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d109      	bne.n	800348c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800348a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d108      	bne.n	80034bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f005 feb6 	bl	8009228 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c8:	461a      	mov	r2, r3
 80034ca:	2302      	movs	r3, #2
 80034cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e4:	461a      	mov	r2, r3
 80034e6:	2320      	movs	r3, #32
 80034e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003506:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	3301      	adds	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	f47f af62 	bne.w	80033e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f003 fa57 	bl	80069d4 <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003530:	f040 80db 	bne.w	80036ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f003 fa78 	bl	8006a2e <USB_ReadDevAllInEpInterrupt>
 800353e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003544:	e0cd      	b.n	80036e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80c2 	beq.w	80036d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f003 fa9e 	bl	8006a9e <USB_ReadDevInEPInterrupt>
 8003562:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d057      	beq.n	800361e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	2201      	movs	r2, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	69f9      	ldr	r1, [r7, #28]
 800358a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358e:	4013      	ands	r3, r2
 8003590:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	2301      	movs	r3, #1
 80035a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d132      	bne.n	8003612 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334c      	adds	r3, #76	; 0x4c
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4403      	add	r3, r0
 80035cc:	3348      	adds	r3, #72	; 0x48
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4419      	add	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4403      	add	r3, r0
 80035e0:	334c      	adds	r3, #76	; 0x4c
 80035e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_PCD_IRQHandler+0x3a2>
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3354      	adds	r3, #84	; 0x54
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800360a:	461a      	mov	r2, r3
 800360c:	2101      	movs	r1, #1
 800360e:	f003 faa5 	bl	8006b5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f005 fd80 	bl	800911e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003634:	461a      	mov	r2, r3
 8003636:	2308      	movs	r3, #8
 8003638:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003650:	461a      	mov	r2, r3
 8003652:	2310      	movs	r3, #16
 8003654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	2340      	movs	r3, #64	; 0x40
 8003670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	6a38      	ldr	r0, [r7, #32]
 8003680:	f002 f986 	bl	8005990 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	3338      	adds	r3, #56	; 0x38
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	3304      	adds	r3, #4
 8003696:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	78db      	ldrb	r3, [r3, #3]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d108      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f005 fdcd 	bl	800924c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	461a      	mov	r2, r3
 80036c0:	2302      	movs	r3, #2
 80036c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fcdb 	bl	800408c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	085b      	lsrs	r3, r3, #1
 80036e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f47f af2e 	bne.w	8003546 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 f970 	bl	80069d4 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036fe:	d122      	bne.n	8003746 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003726:	2100      	movs	r1, #0
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fec3 	bl	80044b4 <HAL_PCDEx_LPM_Callback>
 800372e:	e002      	b.n	8003736 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f005 fd6b 	bl	800920c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 f942 	bl	80069d4 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375a:	d112      	bne.n	8003782 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f005 fd27 	bl	80091c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003780:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 f924 	bl	80069d4 <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003796:	f040 80b7 	bne.w	8003908 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2110      	movs	r1, #16
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 f8eb 	bl	8005990 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037be:	e046      	b.n	800384e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003806:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	440a      	add	r2, r1
 800381e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003822:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003826:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003842:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003846:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	3301      	adds	r3, #1
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	429a      	cmp	r2, r3
 8003856:	d3b3      	bcc.n	80037c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003866:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800386a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f043 030b 	orr.w	r3, r3, #11
 8003888:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389a:	f043 030b 	orr.w	r3, r3, #11
 800389e:	6453      	str	r3, [r2, #68]	; 0x44
 80038a0:	e015      	b.n	80038ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c8:	f043 030b 	orr.w	r3, r3, #11
 80038cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038f2:	461a      	mov	r2, r3
 80038f4:	f003 f932 	bl	8006b5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f003 f861 	bl	80069d4 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391c:	d124      	bne.n	8003968 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f003 f8f7 	bl	8006b16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f002 f8ac 	bl	8005a8a <USB_GetDevSpeed>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681c      	ldr	r4, [r3, #0]
 800393e:	f001 f9f5 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8003942:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	4620      	mov	r0, r4
 800394e:	f001 fdab 	bl	80054a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f005 fc0b 	bl	800916e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003966:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f003 f831 	bl	80069d4 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d10a      	bne.n	8003992 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f005 fbe8 	bl	8009152 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f002 0208 	and.w	r2, r2, #8
 8003990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f003 f81c 	bl	80069d4 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b80      	cmp	r3, #128	; 0x80
 80039a4:	d122      	bne.n	80039ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
 80039b6:	e014      	b.n	80039e2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039bc:	4613      	mov	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fb27 	bl	800402a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	3301      	adds	r3, #1
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3e5      	bcc.n	80039b8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 ffef 	bl	80069d4 <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d13b      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	e02b      	b.n	8003a60 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3340      	adds	r3, #64	; 0x40
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	da12      	bge.n	8003a5a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	333f      	adds	r3, #63	; 0x3f
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fae8 	bl	800402a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d3ce      	bcc.n	8003a08 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 ffa8 	bl	80069d4 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a8e:	d155      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a90:	2301      	movs	r3, #1
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
 8003a94:	e045      	b.n	8003b22 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d12e      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003abe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da2b      	bge.n	8003b1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ad0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d121      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b18:	6053      	str	r3, [r2, #4]
            break;
 8003b1a:	e007      	b.n	8003b2c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	3301      	adds	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3b4      	bcc.n	8003a96 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 ff47 	bl	80069d4 <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b50:	d10a      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f005 fb8c 	bl	8009270 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 ff31 	bl	80069d4 <USB_ReadInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d115      	bne.n	8003ba8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f005 fb7c 	bl	800928c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	e000      	b.n	8003ba8 <HAL_PCD_IRQHandler+0x938>
      return;
 8003ba6:	bf00      	nop
    }
  }
}
 8003ba8:	3734      	adds	r7, #52	; 0x34
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd90      	pop	{r4, r7, pc}

08003bae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_PCD_SetAddress+0x1a>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e013      	b.n	8003bf0 <HAL_PCD_SetAddress+0x42>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f002 fe8f 	bl	8006904 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	803b      	strh	r3, [r7, #0]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0f      	bge.n	8003c3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3338      	adds	r3, #56	; 0x38
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	705a      	strb	r2, [r3, #1]
 8003c3c:	e00f      	b.n	8003c5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4413      	add	r3, r2
 8003c54:	3304      	adds	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c6a:	883a      	ldrh	r2, [r7, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	78ba      	ldrb	r2, [r7, #2]
 8003c74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c88:	78bb      	ldrb	r3, [r7, #2]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d102      	bne.n	8003c94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_EP_Open+0xaa>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e00e      	b.n	8003cc0 <HAL_PCD_EP_Open+0xc8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 ff0f 	bl	8005ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	da0f      	bge.n	8003cfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	3338      	adds	r3, #56	; 0x38
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	705a      	strb	r2, [r3, #1]
 8003cfa:	e00f      	b.n	8003d1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	f003 020f 	and.w	r2, r3, #15
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	3304      	adds	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_PCD_EP_Close+0x6e>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e00e      	b.n	8003d54 <HAL_PCD_EP_Close+0x8c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 ff4d 	bl	8005be4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6c:	7afb      	ldrb	r3, [r7, #11]
 8003d6e:	f003 020f 	and.w	r2, r3, #15
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	3304      	adds	r3, #4
 8003d84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9e:	7afb      	ldrb	r3, [r7, #11]
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	f002 fa2c 	bl	800622c <USB_EP0StartXfer>
 8003dd4:	e008      	b.n	8003de8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	f001 ffda 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 020f 	and.w	r2, r3, #15
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e14:	681b      	ldr	r3, [r3, #0]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e62:	7afb      	ldrb	r3, [r7, #11]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	f002 f9ca 	bl	800622c <USB_EP0StartXfer>
 8003e98:	e008      	b.n	8003eac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	f001 ff78 	bl	8005d9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 020f 	and.w	r2, r3, #15
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d901      	bls.n	8003ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e050      	b.n	8003f76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	da0f      	bge.n	8003efc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	3338      	adds	r3, #56	; 0x38
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	705a      	strb	r2, [r3, #1]
 8003efa:	e00d      	b.n	8003f18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3304      	adds	r3, #4
 8003f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_PCD_EP_SetStall+0x82>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e01e      	b.n	8003f76 <HAL_PCD_EP_SetStall+0xc0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68f9      	ldr	r1, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f002 fc08 	bl	800675c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	b2d9      	uxtb	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f66:	461a      	mov	r2, r3
 8003f68:	f002 fdf8 	bl	8006b5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	f003 020f 	and.w	r2, r3, #15
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d901      	bls.n	8003f9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e042      	b.n	8004022 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da0f      	bge.n	8003fc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3338      	adds	r3, #56	; 0x38
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	705a      	strb	r2, [r3, #1]
 8003fc2:	e00f      	b.n	8003fe4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	4413      	add	r3, r2
 8003fda:	3304      	adds	r3, #4
 8003fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 030f 	and.w	r3, r3, #15
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_PCD_EP_ClrStall+0x86>
 8004000:	2302      	movs	r3, #2
 8004002:	e00e      	b.n	8004022 <HAL_PCD_EP_ClrStall+0xa4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	4618      	mov	r0, r3
 8004014:	f002 fc10 	bl	8006838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	460b      	mov	r3, r1
 8004034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403a:	2b00      	cmp	r3, #0
 800403c:	da0c      	bge.n	8004058 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3338      	adds	r3, #56	; 0x38
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	e00c      	b.n	8004072 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 020f 	and.w	r2, r3, #15
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	4618      	mov	r0, r3
 800407a:	f002 fa2f 	bl	80064dc <USB_EPStopXfer>
 800407e:	4603      	mov	r3, r0
 8004080:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004082:	7afb      	ldrb	r3, [r7, #11]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af02      	add	r7, sp, #8
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	3338      	adds	r3, #56	; 0x38
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d901      	bls.n	80040c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e06c      	b.n	800419e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699a      	ldr	r2, [r3, #24]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d902      	bls.n	80040e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3303      	adds	r3, #3
 80040e4:	089b      	lsrs	r3, r3, #2
 80040e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040e8:	e02b      	b.n	8004142 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d902      	bls.n	8004106 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3303      	adds	r3, #3
 800410a:	089b      	lsrs	r3, r3, #2
 800410c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800411e:	b2db      	uxtb	r3, r3
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	4603      	mov	r3, r0
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f002 fa83 	bl	8006630 <USB_WritePacket>

    ep->xfer_buff  += len;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	441a      	add	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	b29b      	uxth	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d809      	bhi.n	800416c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004160:	429a      	cmp	r2, r3
 8004162:	d203      	bcs.n	800416c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1be      	bne.n	80040ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	429a      	cmp	r2, r3
 8004176:	d811      	bhi.n	800419c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	2201      	movs	r2, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	43db      	mvns	r3, r3
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004198:	4013      	ands	r3, r2
 800419a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	333c      	adds	r3, #60	; 0x3c
 80041c0:	3304      	adds	r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d17b      	bne.n	80042d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d015      	beq.n	8004214 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	4a61      	ldr	r2, [pc, #388]	; (8004370 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f240 80b9 	bls.w	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80b3 	beq.w	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004210:	6093      	str	r3, [r2, #8]
 8004212:	e0a7      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422a:	461a      	mov	r2, r3
 800422c:	2320      	movs	r3, #32
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	e098      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 8093 	bne.w	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d90f      	bls.n	8004266 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	461a      	mov	r2, r3
 800425e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	e07e      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	440b      	add	r3, r1
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d114      	bne.n	80042c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042b0:	461a      	mov	r2, r3
 80042b2:	2101      	movs	r1, #1
 80042b4:	f002 fc52 	bl	8006b5c <USB_EP0_OutStart>
 80042b8:	e006      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691a      	ldr	r2, [r3, #16]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f004 ff0a 	bl	80090e8 <HAL_PCD_DataOutStageCallback>
 80042d4:	e046      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d124      	bne.n	8004328 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f4:	461a      	mov	r2, r3
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e032      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	461a      	mov	r2, r3
 8004316:	2320      	movs	r3, #32
 8004318:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f004 fee1 	bl	80090e8 <HAL_PCD_DataOutStageCallback>
 8004326:	e01d      	b.n	8004364 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d114      	bne.n	8004358 <PCD_EP_OutXfrComplete_int+0x1b0>
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004350:	461a      	mov	r2, r3
 8004352:	2100      	movs	r1, #0
 8004354:	f002 fc02 	bl	8006b5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f004 fec2 	bl	80090e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	4f54300a 	.word	0x4f54300a
 8004374:	4f54310a 	.word	0x4f54310a

08004378 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	333c      	adds	r3, #60	; 0x3c
 8004390:	3304      	adds	r3, #4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a15      	ldr	r2, [pc, #84]	; (8004400 <PCD_EP_OutSetupPacket_int+0x88>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d90e      	bls.n	80043cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c4:	461a      	mov	r2, r3
 80043c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f004 fe79 	bl	80090c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <PCD_EP_OutSetupPacket_int+0x88>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d90c      	bls.n	80043f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d108      	bne.n	80043f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043ec:	461a      	mov	r2, r3
 80043ee:	2101      	movs	r1, #1
 80043f0:	f002 fbb4 	bl	8006b5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	4f54300a 	.word	0x4f54300a

08004404 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
 8004410:	4613      	mov	r3, r2
 8004412:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d107      	bne.n	8004432 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004422:	883b      	ldrh	r3, [r7, #0]
 8004424:	0419      	lsls	r1, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	430a      	orrs	r2, r1
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
 8004430:	e028      	b.n	8004484 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	4413      	add	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e00d      	b.n	8004462 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	3340      	adds	r3, #64	; 0x40
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	3301      	adds	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	3b01      	subs	r3, #1
 8004468:	429a      	cmp	r2, r3
 800446a:	d3ec      	bcc.n	8004446 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800446c:	883b      	ldrh	r3, [r7, #0]
 800446e:	0418      	lsls	r0, r3, #16
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	3b01      	subs	r3, #1
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4302      	orrs	r2, r0
 800447c:	3340      	adds	r3, #64	; 0x40
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	460b      	mov	r3, r1
 800449c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e267      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d075      	beq.n	80045d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ea:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d00c      	beq.n	8004510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d112      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004502:	4b82      	ldr	r3, [pc, #520]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450e:	d10b      	bne.n	8004528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	4b7e      	ldr	r3, [pc, #504]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d05b      	beq.n	80045d4 <HAL_RCC_OscConfig+0x108>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d157      	bne.n	80045d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e242      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d106      	bne.n	8004540 <HAL_RCC_OscConfig+0x74>
 8004532:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a75      	ldr	r2, [pc, #468]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e01d      	b.n	800457c <HAL_RCC_OscConfig+0xb0>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b70      	ldr	r3, [pc, #448]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6f      	ldr	r2, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a6c      	ldr	r2, [pc, #432]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0xb0>
 8004564:	4b69      	ldr	r3, [pc, #420]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a68      	ldr	r2, [pc, #416]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b66      	ldr	r3, [pc, #408]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a65      	ldr	r2, [pc, #404]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fd f9aa 	bl	80018dc <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd f9a6 	bl	80018dc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e207      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b5b      	ldr	r3, [pc, #364]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0xc0>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fd f996 	bl	80018dc <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd f992 	bl	80018dc <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e1f3      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b51      	ldr	r3, [pc, #324]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0xe8>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d063      	beq.n	80046aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045e2:	4b4a      	ldr	r3, [pc, #296]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045fa:	4b44      	ldr	r3, [pc, #272]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b41      	ldr	r3, [pc, #260]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x152>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1c7      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b3b      	ldr	r3, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4937      	ldr	r1, [pc, #220]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e03a      	b.n	80046aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d020      	beq.n	800467e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd f94b 	bl	80018dc <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800464a:	f7fd f947 	bl	80018dc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1a8      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465c:	4b2b      	ldr	r3, [pc, #172]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x240>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	4925      	ldr	r1, [pc, #148]	; (800470c <HAL_RCC_OscConfig+0x240>)
 8004678:	4313      	orrs	r3, r2
 800467a:	600b      	str	r3, [r1, #0]
 800467c:	e015      	b.n	80046aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x244>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd f92a 	bl	80018dc <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800468c:	f7fd f926 	bl	80018dc <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e187      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469e:	4b1b      	ldr	r3, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d036      	beq.n	8004724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x248>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fd f90a 	bl	80018dc <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046cc:	f7fd f906 	bl	80018dc <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e167      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x240>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x200>
 80046ea:	e01b      	b.n	8004724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_OscConfig+0x248>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fd f8f3 	bl	80018dc <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f8:	e00e      	b.n	8004718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046fa:	f7fd f8ef 	bl	80018dc <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d907      	bls.n	8004718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e150      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
 800470c:	40023800 	.word	0x40023800
 8004710:	42470000 	.word	0x42470000
 8004714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	4b88      	ldr	r3, [pc, #544]	; (800493c <HAL_RCC_OscConfig+0x470>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ea      	bne.n	80046fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8097 	beq.w	8004860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b81      	ldr	r3, [pc, #516]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	4b7d      	ldr	r3, [pc, #500]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4a7c      	ldr	r2, [pc, #496]	; (800493c <HAL_RCC_OscConfig+0x470>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
 8004752:	4b7a      	ldr	r3, [pc, #488]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b77      	ldr	r3, [pc, #476]	; (8004940 <HAL_RCC_OscConfig+0x474>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b74      	ldr	r3, [pc, #464]	; (8004940 <HAL_RCC_OscConfig+0x474>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a73      	ldr	r2, [pc, #460]	; (8004940 <HAL_RCC_OscConfig+0x474>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fd f8af 	bl	80018dc <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fd f8ab 	bl	80018dc <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e10c      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCC_OscConfig+0x474>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x2ea>
 80047a8:	4b64      	ldr	r3, [pc, #400]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	4a63      	ldr	r2, [pc, #396]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6713      	str	r3, [r2, #112]	; 0x70
 80047b4:	e01c      	b.n	80047f0 <HAL_RCC_OscConfig+0x324>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x30c>
 80047be:	4b5f      	ldr	r3, [pc, #380]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5e      	ldr	r2, [pc, #376]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a5b      	ldr	r2, [pc, #364]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	e00b      	b.n	80047f0 <HAL_RCC_OscConfig+0x324>
 80047d8:	4b58      	ldr	r3, [pc, #352]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a57      	ldr	r2, [pc, #348]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	4b55      	ldr	r3, [pc, #340]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a54      	ldr	r2, [pc, #336]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fd f870 	bl	80018dc <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd f86c 	bl	80018dc <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0cb      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ee      	beq.n	8004800 <HAL_RCC_OscConfig+0x334>
 8004822:	e014      	b.n	800484e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004824:	f7fd f85a 	bl	80018dc <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fd f856 	bl	80018dc <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e0b5      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004842:	4b3e      	ldr	r3, [pc, #248]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ee      	bne.n	800482c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	4a38      	ldr	r2, [pc, #224]	; (800493c <HAL_RCC_OscConfig+0x470>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80a1 	beq.w	80049ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800486a:	4b34      	ldr	r3, [pc, #208]	; (800493c <HAL_RCC_OscConfig+0x470>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d05c      	beq.n	8004930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d141      	bne.n	8004902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_OscConfig+0x478>)
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004884:	f7fd f82a 	bl	80018dc <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488c:	f7fd f826 	bl	80018dc <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e087      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489e:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1f0      	bne.n	800488c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	061b      	lsls	r3, r3, #24
 80048ce:	491b      	ldr	r1, [pc, #108]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x478>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048da:	f7fc ffff 	bl	80018dc <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e0:	e008      	b.n	80048f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e2:	f7fc fffb 	bl	80018dc <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d901      	bls.n	80048f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e05c      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f4:	4b11      	ldr	r3, [pc, #68]	; (800493c <HAL_RCC_OscConfig+0x470>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f0      	beq.n	80048e2 <HAL_RCC_OscConfig+0x416>
 8004900:	e054      	b.n	80049ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <HAL_RCC_OscConfig+0x478>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fc ffe8 	bl	80018dc <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004910:	f7fc ffe4 	bl	80018dc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e045      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_OscConfig+0x470>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x444>
 800492e:	e03d      	b.n	80049ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e038      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
 800493c:	40023800 	.word	0x40023800
 8004940:	40007000 	.word	0x40007000
 8004944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <HAL_RCC_OscConfig+0x4ec>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d028      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d121      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496e:	429a      	cmp	r2, r3
 8004970:	d11a      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800497e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004980:	4293      	cmp	r3, r2
 8004982:	d111      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	3b01      	subs	r3, #1
 8004992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d107      	bne.n	80049a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0cc      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b68      	ldr	r3, [pc, #416]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d90c      	bls.n	80049f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b65      	ldr	r3, [pc, #404]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e6:	4b63      	ldr	r3, [pc, #396]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0b8      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a10:	4b59      	ldr	r3, [pc, #356]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a58      	ldr	r2, [pc, #352]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a28:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a34:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	494d      	ldr	r1, [pc, #308]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d044      	beq.n	8004adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d107      	bne.n	8004a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d119      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d003      	beq.n	8004a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b3f      	ldr	r3, [pc, #252]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e067      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a9a:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 0203 	bic.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4934      	ldr	r1, [pc, #208]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aac:	f7fc ff16 	bl	80018dc <HAL_GetTick>
 8004ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab4:	f7fc ff12 	bl	80018dc <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e04f      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aca:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 020c 	and.w	r2, r3, #12
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d1eb      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d20c      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aea:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b10:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4916      	ldr	r1, [pc, #88]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b42:	f000 f82d 	bl	8004ba0 <HAL_RCC_GetSysClockFreq>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	490a      	ldr	r1, [pc, #40]	; (8004b7c <HAL_RCC_ClockConfig+0x1c0>)
 8004b54:	5ccb      	ldrb	r3, [r1, r3]
 8004b56:	fa22 f303 	lsr.w	r3, r2, r3
 8004b5a:	4a09      	ldr	r2, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_ClockConfig+0x1c8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc fe76 	bl	8001854 <HAL_InitTick>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023c00 	.word	0x40023c00
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	0800dff4 	.word	0x0800dff4
 8004b80:	20000000 	.word	0x20000000
 8004b84:	20000004 	.word	0x20000004

08004b88 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_EnableCSS+0x14>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	4247004c 	.word	0x4247004c

08004ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b090      	sub	sp, #64	; 0x40
 8004ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bac:	2300      	movs	r3, #0
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bb8:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b08      	cmp	r3, #8
 8004bc2:	d00d      	beq.n	8004be0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	f200 80a1 	bhi.w	8004d0c <HAL_RCC_GetSysClockFreq+0x16c>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d003      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x3a>
 8004bd2:	e09b      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bd8:	e09b      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bda:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bde:	e098      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be0:	4b4f      	ldr	r3, [pc, #316]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bea:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d028      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	627a      	str	r2, [r7, #36]	; 0x24
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4b47      	ldr	r3, [pc, #284]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c0c:	fb03 f201 	mul.w	r2, r3, r1
 8004c10:	2300      	movs	r3, #0
 8004c12:	fb00 f303 	mul.w	r3, r0, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	4a43      	ldr	r2, [pc, #268]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c1a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c20:	460a      	mov	r2, r1
 8004c22:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c26:	4413      	add	r3, r2
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	61fa      	str	r2, [r7, #28]
 8004c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c3a:	f7fc f825 	bl	8000c88 <__aeabi_uldivmod>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4613      	mov	r3, r2
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c46:	e053      	b.n	8004cf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	2200      	movs	r2, #0
 8004c50:	613b      	str	r3, [r7, #16]
 8004c52:	617a      	str	r2, [r7, #20]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c5a:	f04f 0b00 	mov.w	fp, #0
 8004c5e:	4652      	mov	r2, sl
 8004c60:	465b      	mov	r3, fp
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	0159      	lsls	r1, r3, #5
 8004c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c70:	0150      	lsls	r0, r2, #5
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	ebb2 080a 	subs.w	r8, r2, sl
 8004c7a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c92:	ebb2 0408 	subs.w	r4, r2, r8
 8004c96:	eb63 0509 	sbc.w	r5, r3, r9
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	00eb      	lsls	r3, r5, #3
 8004ca4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ca8:	00e2      	lsls	r2, r4, #3
 8004caa:	4614      	mov	r4, r2
 8004cac:	461d      	mov	r5, r3
 8004cae:	eb14 030a 	adds.w	r3, r4, sl
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	eb45 030b 	adc.w	r3, r5, fp
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	028b      	lsls	r3, r1, #10
 8004cca:	4621      	mov	r1, r4
 8004ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	028a      	lsls	r2, r1, #10
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	60fa      	str	r2, [r7, #12]
 8004ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ce4:	f7fb ffd0 	bl	8000c88 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4613      	mov	r3, r2
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d0a:	e002      	b.n	8004d12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3740      	adds	r7, #64	; 0x40
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	017d7840 	.word	0x017d7840

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000000 	.word	0x20000000

08004d44 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d50:	2b80      	cmp	r3, #128	; 0x80
 8004d52:	d104      	bne.n	8004d5e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004d54:	f000 f80a 	bl	8004d6c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004d5a:	2280      	movs	r2, #128	; 0x80
 8004d5c:	701a      	strb	r2, [r3, #0]
  }
}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	4002380e 	.word	0x4002380e

08004d6c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e041      	b.n	8004e10 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7fc fbc7 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 f95d 	bl	8005078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e046      	b.n	8004ebe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <HAL_TIM_Base_Start+0xb4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d01d      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_TIM_Base_Start+0xb8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <HAL_TIM_Base_Start+0xbc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	; (8004ed8 <HAL_TIM_Base_Start+0xc0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_TIM_Base_Start+0xc4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_Base_Start+0xc8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_TIM_Base_Start+0x70>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <HAL_TIM_Base_Start+0xcc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d111      	bne.n	8004eac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d010      	beq.n	8004ebc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	e007      	b.n	8004ebc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40010000 	.word	0x40010000
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40010400 	.word	0x40010400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	40001800 	.word	0x40001800

08004ee8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_TIM_ConfigClockSource+0x1c>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0b4      	b.n	800506e <HAL_TIM_ConfigClockSource+0x186>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f3c:	d03e      	beq.n	8004fbc <HAL_TIM_ConfigClockSource+0xd4>
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f42:	f200 8087 	bhi.w	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4a:	f000 8086 	beq.w	800505a <HAL_TIM_ConfigClockSource+0x172>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f52:	d87f      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b70      	cmp	r3, #112	; 0x70
 8004f56:	d01a      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0xa6>
 8004f58:	2b70      	cmp	r3, #112	; 0x70
 8004f5a:	d87b      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b60      	cmp	r3, #96	; 0x60
 8004f5e:	d050      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x11a>
 8004f60:	2b60      	cmp	r3, #96	; 0x60
 8004f62:	d877      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b50      	cmp	r3, #80	; 0x50
 8004f66:	d03c      	beq.n	8004fe2 <HAL_TIM_ConfigClockSource+0xfa>
 8004f68:	2b50      	cmp	r3, #80	; 0x50
 8004f6a:	d873      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b40      	cmp	r3, #64	; 0x40
 8004f6e:	d058      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x13a>
 8004f70:	2b40      	cmp	r3, #64	; 0x40
 8004f72:	d86f      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b30      	cmp	r3, #48	; 0x30
 8004f76:	d064      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f78:	2b30      	cmp	r3, #48	; 0x30
 8004f7a:	d86b      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	d060      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d867      	bhi.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05c      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d05a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	e062      	b.n	8005054 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6899      	ldr	r1, [r3, #8]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f000 f985 	bl	80052ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
      break;
 8004fba:	e04f      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	6899      	ldr	r1, [r3, #8]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f000 f96e 	bl	80052ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fde:	609a      	str	r2, [r3, #8]
      break;
 8004fe0:	e03c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6818      	ldr	r0, [r3, #0]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6859      	ldr	r1, [r3, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f000 f8e2 	bl	80051b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2150      	movs	r1, #80	; 0x50
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 f93b 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005000:	e02c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	461a      	mov	r2, r3
 8005010:	f000 f901 	bl	8005216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2160      	movs	r1, #96	; 0x60
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f92b 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005020:	e01c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	461a      	mov	r2, r3
 8005030:	f000 f8c2 	bl	80051b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2140      	movs	r1, #64	; 0x40
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f91b 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005040:	e00c      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 f912 	bl	8005276 <TIM_ITRx_SetConfig>
      break;
 8005052:	e003      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	e000      	b.n	800505c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800505a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a40      	ldr	r2, [pc, #256]	; (800518c <TIM_Base_SetConfig+0x114>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3d      	ldr	r2, [pc, #244]	; (8005190 <TIM_Base_SetConfig+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3c      	ldr	r2, [pc, #240]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3b      	ldr	r2, [pc, #236]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3a      	ldr	r2, [pc, #232]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2f      	ldr	r2, [pc, #188]	; (800518c <TIM_Base_SetConfig+0x114>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d02b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d8:	d027      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2c      	ldr	r2, [pc, #176]	; (8005190 <TIM_Base_SetConfig+0x118>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d023      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2b      	ldr	r2, [pc, #172]	; (8005194 <TIM_Base_SetConfig+0x11c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d01f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <TIM_Base_SetConfig+0x120>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <TIM_Base_SetConfig+0x124>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a28      	ldr	r2, [pc, #160]	; (80051a0 <TIM_Base_SetConfig+0x128>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <TIM_Base_SetConfig+0x12c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a26      	ldr	r2, [pc, #152]	; (80051a8 <TIM_Base_SetConfig+0x130>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <TIM_Base_SetConfig+0x134>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <TIM_Base_SetConfig+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <TIM_Base_SetConfig+0x13c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <TIM_Base_SetConfig+0x114>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <TIM_Base_SetConfig+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40010000 	.word	0x40010000
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40010400 	.word	0x40010400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800
 80051ac:	40001800 	.word	0x40001800
 80051b0:	40001c00 	.word	0x40001c00
 80051b4:	40002000 	.word	0x40002000

080051b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f023 0201 	bic.w	r2, r3, #1
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f023 030a 	bic.w	r3, r3, #10
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	621a      	str	r2, [r3, #32]
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	031b      	lsls	r3, r3, #12
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	f043 0307 	orr.w	r3, r3, #7
 8005298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
}
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	bf00      	nop
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005300:	2302      	movs	r3, #2
 8005302:	e05a      	b.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005350:	d01d      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10c      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053e4:	b084      	sub	sp, #16
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	f107 001c 	add.w	r0, r7, #28
 80053f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d122      	bne.n	8005442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fbee 	bl	8006c18 <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	e01a      	b.n	8005478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f001 fbe2 	bl	8006c18 <USB_CoreReset>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
 800546a:	e005      	b.n	8005478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10b      	bne.n	8005496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f043 0206 	orr.w	r2, r3, #6
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f043 0220 	orr.w	r2, r3, #32
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005496:	7bfb      	ldrb	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a2:	b004      	add	sp, #16
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d165      	bne.n	8005588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a41      	ldr	r2, [pc, #260]	; (80055c4 <USB_SetTurnaroundTime+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0x2a>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a40      	ldr	r2, [pc, #256]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054cc:	230f      	movs	r3, #15
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e062      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <USB_SetTurnaroundTime+0x120>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d306      	bcc.n	80054e8 <USB_SetTurnaroundTime+0x40>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a3b      	ldr	r2, [pc, #236]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d202      	bcs.n	80054e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054e2:	230e      	movs	r3, #14
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e057      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a38      	ldr	r2, [pc, #224]	; (80055cc <USB_SetTurnaroundTime+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d306      	bcc.n	80054fe <USB_SetTurnaroundTime+0x56>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d202      	bcs.n	80054fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054f8:	230d      	movs	r3, #13
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	e04c      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a33      	ldr	r2, [pc, #204]	; (80055d0 <USB_SetTurnaroundTime+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d306      	bcc.n	8005514 <USB_SetTurnaroundTime+0x6c>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800550e:	230c      	movs	r3, #12
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	e041      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a2f      	ldr	r2, [pc, #188]	; (80055d4 <USB_SetTurnaroundTime+0x12c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d906      	bls.n	800552a <USB_SetTurnaroundTime+0x82>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4a2e      	ldr	r2, [pc, #184]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d802      	bhi.n	800552a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005524:	230b      	movs	r3, #11
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e036      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <USB_SetTurnaroundTime+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d906      	bls.n	8005540 <USB_SetTurnaroundTime+0x98>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	4a29      	ldr	r2, [pc, #164]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800553a:	230a      	movs	r3, #10
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	e02b      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a26      	ldr	r2, [pc, #152]	; (80055dc <USB_SetTurnaroundTime+0x134>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d906      	bls.n	8005556 <USB_SetTurnaroundTime+0xae>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d202      	bcs.n	8005556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005550:	2309      	movs	r3, #9
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e020      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <USB_SetTurnaroundTime+0x138>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d306      	bcc.n	800556c <USB_SetTurnaroundTime+0xc4>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d802      	bhi.n	800556c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005566:	2308      	movs	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e015      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <USB_SetTurnaroundTime+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d906      	bls.n	8005582 <USB_SetTurnaroundTime+0xda>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <USB_SetTurnaroundTime+0x140>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d202      	bcs.n	8005582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800557c:	2307      	movs	r3, #7
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	e00a      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005582:	2306      	movs	r3, #6
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e007      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800558e:	2309      	movs	r3, #9
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e001      	b.n	8005598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005594:	2309      	movs	r3, #9
 8005596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	00d8acbf 	.word	0x00d8acbf
 80055c8:	00e4e1c0 	.word	0x00e4e1c0
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	01067380 	.word	0x01067380
 80055d4:	011a499f 	.word	0x011a499f
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	014ca43f 	.word	0x014ca43f
 80055e0:	016e3600 	.word	0x016e3600
 80055e4:	01a6ab1f 	.word	0x01a6ab1f
 80055e8:	01e84800 	.word	0x01e84800

080055ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 0201 	bic.w	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d115      	bne.n	800567e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565e:	2001      	movs	r0, #1
 8005660:	f7fc f948 	bl	80018f4 <HAL_Delay>
      ms++;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3301      	adds	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 fa45 	bl	8006afa <USB_GetMode>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d01e      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b31      	cmp	r3, #49	; 0x31
 800567a:	d9f0      	bls.n	800565e <USB_SetCurrentMode+0x2e>
 800567c:	e01a      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d115      	bne.n	80056b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005690:	2001      	movs	r0, #1
 8005692:	f7fc f92f 	bl	80018f4 <HAL_Delay>
      ms++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f001 fa2c 	bl	8006afa <USB_GetMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USB_SetCurrentMode+0x84>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2b31      	cmp	r3, #49	; 0x31
 80056ac:	d9f0      	bls.n	8005690 <USB_SetCurrentMode+0x60>
 80056ae:	e001      	b.n	80056b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e005      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b32      	cmp	r3, #50	; 0x32
 80056b8:	d101      	bne.n	80056be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c8:	b084      	sub	sp, #16
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b086      	sub	sp, #24
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e009      	b.n	80056fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	3340      	adds	r3, #64	; 0x40
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	3301      	adds	r3, #1
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b0e      	cmp	r3, #14
 8005700:	d9f2      	bls.n	80056e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11c      	bne.n	8005742 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
 8005740:	e00b      	b.n	800575a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005760:	461a      	mov	r2, r3
 8005762:	2300      	movs	r3, #0
 8005764:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576c:	4619      	mov	r1, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	461a      	mov	r2, r3
 8005776:	680b      	ldr	r3, [r1, #0]
 8005778:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10c      	bne.n	800579a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d104      	bne.n	8005790 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005786:	2100      	movs	r1, #0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f965 	bl	8005a58 <USB_SetDevSpeed>
 800578e:	e008      	b.n	80057a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005790:	2101      	movs	r1, #1
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f960 	bl	8005a58 <USB_SetDevSpeed>
 8005798:	e003      	b.n	80057a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800579a:	2103      	movs	r1, #3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f95b 	bl	8005a58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057a2:	2110      	movs	r1, #16
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8f3 	bl	8005990 <USB_FlushTxFifo>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f91f 	bl	80059f8 <USB_FlushRxFifo>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d6:	461a      	mov	r2, r3
 80057d8:	2300      	movs	r3, #0
 80057da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e2:	461a      	mov	r2, r3
 80057e4:	2300      	movs	r3, #0
 80057e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	e043      	b.n	8005876 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005804:	d118      	bne.n	8005838 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e013      	b.n	800584a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e008      	b.n	800584a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800586e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3301      	adds	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d3b7      	bcc.n	80057ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	e043      	b.n	800590c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	d118      	bne.n	80058ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	e013      	b.n	80058e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e008      	b.n	80058e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	461a      	mov	r2, r3
 80058dc:	2300      	movs	r3, #0
 80058de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	2300      	movs	r3, #0
 80058f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005904:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	429a      	cmp	r2, r3
 8005912:	d3b7      	bcc.n	8005884 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005926:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005934:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <USB_DevInit+0x2c4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f043 0208 	orr.w	r2, r3, #8
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005974:	f043 0304 	orr.w	r3, r3, #4
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr
 800598c:	803c3800 	.word	0x803c3800

08005990 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a13      	ldr	r2, [pc, #76]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d901      	bls.n	80059b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e01b      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	daf2      	bge.n	800599e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	019b      	lsls	r3, r3, #6
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3301      	adds	r3, #1
 80059cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <USB_FlushTxFifo+0x64>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e006      	b.n	80059e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b20      	cmp	r3, #32
 80059e4:	d0f0      	beq.n	80059c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	00030d40 	.word	0x00030d40

080059f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e018      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	daf2      	bge.n	8005a04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2210      	movs	r2, #16
 8005a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a08      	ldr	r2, [pc, #32]	; (8005a54 <USB_FlushRxFifo+0x5c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e006      	b.n	8005a48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d0f0      	beq.n	8005a28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	00030d40 	.word	0x00030d40

08005a58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0306 	and.w	r3, r3, #6
 8005aa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
 8005aae:	e00a      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d002      	beq.n	8005abc <USB_GetDevSpeed+0x32>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d102      	bne.n	8005ac2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005abc:	2302      	movs	r3, #2
 8005abe:	75fb      	strb	r3, [r7, #23]
 8005ac0:	e001      	b.n	8005ac6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ac2:	230f      	movs	r3, #15
 8005ac4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d13a      	bne.n	8005b66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	69da      	ldr	r2, [r3, #28]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	2101      	movs	r1, #1
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d155      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e036      	b.n	8005bd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	2101      	movs	r1, #1
 8005b78:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7c:	041b      	lsls	r3, r3, #16
 8005b7e:	68f9      	ldr	r1, [r7, #12]
 8005b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11a      	bne.n	8005bd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d161      	bne.n	8005cc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c16:	d11f      	bne.n	8005c58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	0151      	lsls	r1, r2, #5
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	440a      	add	r2, r1
 8005c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c78:	4013      	ands	r3, r2
 8005c7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	43db      	mvns	r3, r3
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0159      	lsls	r1, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <USB_DeactivateEndpoint+0x1b0>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
 8005cc2:	e060      	b.n	8005d86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d11f      	bne.n	8005d1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	43db      	mvns	r3, r3
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	f003 030f 	and.w	r3, r3, #15
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f303 	lsl.w	r3, r1, r3
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d60:	4013      	ands	r3, r2
 8005d62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0159      	lsls	r1, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	440b      	add	r3, r1
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <USB_DeactivateEndpoint+0x1b4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	ec337800 	.word	0xec337800
 8005d98:	eff37800 	.word	0xeff37800

08005d9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 815c 	bne.w	8006076 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d132      	bne.n	8005e2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005de4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e24:	0cdb      	lsrs	r3, r3, #19
 8005e26:	04db      	lsls	r3, r3, #19
 8005e28:	6113      	str	r3, [r2, #16]
 8005e2a:	e074      	b.n	8005f16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e46:	0cdb      	lsrs	r3, r3, #19
 8005e48:	04db      	lsls	r3, r3, #19
 8005e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6999      	ldr	r1, [r3, #24]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	440b      	add	r3, r1
 8005e88:	1e59      	subs	r1, r3, #1
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e94:	4b9d      	ldr	r3, [pc, #628]	; (800610c <USB_EPStartXfer+0x370>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	0148      	lsls	r0, r1, #5
 8005e9c:	69f9      	ldr	r1, [r7, #28]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	791b      	ldrb	r3, [r3, #4]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11f      	bne.n	8005f16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	0151      	lsls	r1, r2, #5
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	440a      	add	r2, r1
 8005eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ef4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d14b      	bne.n	8005fb4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d009      	beq.n	8005f38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	461a      	mov	r2, r3
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	791b      	ldrb	r3, [r3, #4]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d128      	bne.n	8005f92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d110      	bne.n	8005f72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e00f      	b.n	8005f92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e133      	b.n	800621c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fd2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d015      	beq.n	8006008 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 811b 	beq.w	800621c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4313      	orrs	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34
 8006006:	e109      	b.n	800621c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d110      	bne.n	800603a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e00f      	b.n	800605a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	b298      	uxth	r0, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fade 	bl	8006630 <USB_WritePacket>
 8006074:	e0d2      	b.n	800621c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006090:	0cdb      	lsrs	r3, r3, #19
 8006092:	04db      	lsls	r3, r3, #19
 8006094:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d126      	bne.n	8006110 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	69b9      	ldr	r1, [r7, #24]
 80060da:	0148      	lsls	r0, r1, #5
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	4401      	add	r1, r0
 80060e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060e4:	4313      	orrs	r3, r2
 80060e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006106:	6113      	str	r3, [r2, #16]
 8006108:	e03a      	b.n	8006180 <USB_EPStartXfer+0x3e4>
 800610a:	bf00      	nop
 800610c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4413      	add	r3, r2
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	8afa      	ldrh	r2, [r7, #22]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	04d9      	lsls	r1, r3, #19
 8006146:	4b38      	ldr	r3, [pc, #224]	; (8006228 <USB_EPStartXfer+0x48c>)
 8006148:	400b      	ands	r3, r1
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	0148      	lsls	r0, r1, #5
 800614e:	69f9      	ldr	r1, [r7, #28]
 8006150:	4401      	add	r1, r0
 8006152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006156:	4313      	orrs	r3, r2
 8006158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	0148      	lsls	r0, r1, #5
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	4401      	add	r1, r0
 8006178:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800617c:	4313      	orrs	r3, r2
 800617e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10d      	bne.n	80061a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6919      	ldr	r1, [r3, #16]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	460a      	mov	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	791b      	ldrb	r3, [r3, #4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d128      	bne.n	80061fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e00f      	b.n	80061fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800621a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	1ff80000 	.word	0x1ff80000

0800622c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	785b      	ldrb	r3, [r3, #1]
 8006248:	2b01      	cmp	r3, #1
 800624a:	f040 80ce 	bne.w	80063ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d132      	bne.n	80062bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	0151      	lsls	r1, r2, #5
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	440a      	add	r2, r1
 800626c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006270:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006274:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006278:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006294:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b4:	0cdb      	lsrs	r3, r3, #19
 80062b6:	04db      	lsls	r3, r3, #19
 80062b8:	6113      	str	r3, [r2, #16]
 80062ba:	e04e      	b.n	800635a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	0cdb      	lsrs	r3, r3, #19
 80062d8:	04db      	lsls	r3, r3, #19
 80062da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699a      	ldr	r2, [r3, #24]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d903      	bls.n	8006314 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	0148      	lsls	r0, r1, #5
 800634e:	6979      	ldr	r1, [r7, #20]
 8006350:	4401      	add	r1, r0
 8006352:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006356:	4313      	orrs	r3, r2
 8006358:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d11e      	bne.n	800639e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e097      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8083 	beq.w	80064ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f003 030f 	and.w	r3, r3, #15
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	6979      	ldr	r1, [r7, #20]
 80063e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063e4:	4313      	orrs	r3, r2
 80063e6:	634b      	str	r3, [r1, #52]	; 0x34
 80063e8:	e071      	b.n	80064ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	0cdb      	lsrs	r3, r3, #19
 8006406:	04db      	lsls	r3, r3, #19
 8006408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800642c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6919      	ldr	r1, [r3, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d14a      	bne.n	8006590 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006512:	f040 8086 	bne.w	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	7812      	ldrb	r2, [r2, #0]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006538:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800655c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f242 7210 	movw	r2, #10000	; 0x2710
 800656a:	4293      	cmp	r3, r2
 800656c:	d902      	bls.n	8006574 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
          break;
 8006572:	e056      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800658c:	d0e7      	beq.n	800655e <USB_EPStopXfer+0x82>
 800658e:	e048      	b.n	8006622 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a8:	d13b      	bne.n	8006622 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80065fe:	4293      	cmp	r3, r2
 8006600:	d902      	bls.n	8006608 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
          break;
 8006606:	e00c      	b.n	8006622 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006620:	d0e7      	beq.n	80065f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	; 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	460b      	mov	r3, r1
 8006640:	71fb      	strb	r3, [r7, #7]
 8006642:	4613      	mov	r3, r2
 8006644:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800664e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d123      	bne.n	800669e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006656:	88bb      	ldrh	r3, [r7, #4]
 8006658:	3303      	adds	r3, #3
 800665a:	089b      	lsrs	r3, r3, #2
 800665c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	e018      	b.n	8006696 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	031a      	lsls	r2, r3, #12
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4413      	add	r3, r2
 800666c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006670:	461a      	mov	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3301      	adds	r3, #1
 800667c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	3301      	adds	r3, #1
 8006682:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	3301      	adds	r3, #1
 800668e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	3301      	adds	r3, #1
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3e2      	bcc.n	8006664 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3724      	adds	r7, #36	; 0x24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b08b      	sub	sp, #44	; 0x2c
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	4613      	mov	r3, r2
 80066b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ca:	88fb      	ldrh	r3, [r7, #6]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	623b      	str	r3, [r7, #32]
 80066d6:	e014      	b.n	8006702 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	3301      	adds	r3, #1
 80066e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	3301      	adds	r3, #1
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3301      	adds	r3, #1
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	3301      	adds	r3, #1
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	3301      	adds	r3, #1
 8006700:	623b      	str	r3, [r7, #32]
 8006702:	6a3a      	ldr	r2, [r7, #32]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	429a      	cmp	r2, r3
 8006708:	d3e6      	bcc.n	80066d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800670a:	8bfb      	ldrh	r3, [r7, #30]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800671a:	461a      	mov	r2, r3
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	b2da      	uxtb	r2, r3
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	701a      	strb	r2, [r3, #0]
      i++;
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	3301      	adds	r3, #1
 800673a:	623b      	str	r3, [r7, #32]
      pDest++;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	3301      	adds	r3, #1
 8006740:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006742:	8bfb      	ldrh	r3, [r7, #30]
 8006744:	3b01      	subs	r3, #1
 8006746:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006748:	8bfb      	ldrh	r3, [r7, #30]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ea      	bne.n	8006724 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006750:	4618      	mov	r0, r3
 8006752:	372c      	adds	r7, #44	; 0x2c
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	785b      	ldrb	r3, [r3, #1]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d12c      	bne.n	80067d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	db12      	blt.n	80067b0 <USB_EPSetStall+0x54>
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00f      	beq.n	80067b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e02b      	b.n	800682a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	db12      	blt.n	800680a <USB_EPSetStall+0xae>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00f      	beq.n	800680a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006808:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006828:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d128      	bne.n	80068a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006872:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d003      	beq.n	8006884 <USB_EPClearStall+0x4c>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d138      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e027      	b.n	80068f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d003      	beq.n	80068d6 <USB_EPClearStall+0x9e>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d10f      	bne.n	80068f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006922:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006926:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697e:	f023 0302 	bic.w	r3, r3, #2
 8006982:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ac:	f023 0303 	bic.w	r3, r3, #3
 80069b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	0c1b      	lsrs	r3, r3, #16
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	b29b      	uxth	r3, r3
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b085      	sub	sp, #20
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a90:	68bb      	ldr	r3, [r7, #8]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b087      	sub	sp, #28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ac2:	78fb      	ldrb	r3, [r7, #3]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aec:	68bb      	ldr	r3, [r7, #8]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0301 	and.w	r3, r3, #1
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	460b      	mov	r3, r1
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	333c      	adds	r3, #60	; 0x3c
 8006b72:	3304      	adds	r3, #4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <USB_EP0_OutStart+0xb8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d90a      	bls.n	8006b96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d101      	bne.n	8006b96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e037      	b.n	8006c06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc4:	f043 0318 	orr.w	r3, r3, #24
 8006bc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bdc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	461a      	mov	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	371c      	adds	r7, #28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	4f54300a 	.word	0x4f54300a

08006c18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3301      	adds	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <USB_CoreReset+0x64>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d901      	bls.n	8006c36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e01b      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	daf2      	bge.n	8006c24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f043 0201 	orr.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4a09      	ldr	r2, [pc, #36]	; (8006c7c <USB_CoreReset+0x64>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d901      	bls.n	8006c60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e006      	b.n	8006c6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d0f0      	beq.n	8006c4e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	00030d40 	.word	0x00030d40

08006c80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c90:	f002 fc94 	bl	80095bc <USBD_static_malloc>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32b0      	adds	r2, #176	; 0xb0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cac:	2302      	movs	r3, #2
 8006cae:	e0d4      	b.n	8006e5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006cb0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f002 fcee 	bl	8009698 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	32b0      	adds	r2, #176	; 0xb0
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32b0      	adds	r2, #176	; 0xb0
 8006cd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7c1b      	ldrb	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d138      	bne.n	8006d5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	; (8006e64 <USBD_CDC_Init+0x1e4>)
 8006cea:	7819      	ldrb	r1, [r3, #0]
 8006cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f002 fb3f 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006cf8:	4b5a      	ldr	r3, [pc, #360]	; (8006e64 <USBD_CDC_Init+0x1e4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 020f 	and.w	r2, r3, #15
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	3324      	adds	r3, #36	; 0x24
 8006d0e:	2201      	movs	r2, #1
 8006d10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d12:	4b55      	ldr	r3, [pc, #340]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006d14:	7819      	ldrb	r1, [r3, #0]
 8006d16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 fb2a 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d22:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	f003 020f 	and.w	r2, r3, #15
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d3e:	4b4b      	ldr	r3, [pc, #300]	; (8006e6c <USBD_CDC_Init+0x1ec>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f003 020f 	and.w	r2, r3, #15
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	3326      	adds	r3, #38	; 0x26
 8006d54:	2210      	movs	r2, #16
 8006d56:	801a      	strh	r2, [r3, #0]
 8006d58:	e035      	b.n	8006dc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d5a:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <USBD_CDC_Init+0x1e4>)
 8006d5c:	7819      	ldrb	r1, [r3, #0]
 8006d5e:	2340      	movs	r3, #64	; 0x40
 8006d60:	2202      	movs	r2, #2
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f002 fb07 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d68:	4b3e      	ldr	r3, [pc, #248]	; (8006e64 <USBD_CDC_Init+0x1e4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	2201      	movs	r2, #1
 8006d80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d82:	4b39      	ldr	r3, [pc, #228]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006d84:	7819      	ldrb	r1, [r3, #0]
 8006d86:	2340      	movs	r3, #64	; 0x40
 8006d88:	2202      	movs	r2, #2
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f002 faf3 	bl	8009376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d90:	4b35      	ldr	r3, [pc, #212]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006da8:	2201      	movs	r2, #1
 8006daa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006dac:	4b2f      	ldr	r3, [pc, #188]	; (8006e6c <USBD_CDC_Init+0x1ec>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3326      	adds	r3, #38	; 0x26
 8006dc2:	2210      	movs	r2, #16
 8006dc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <USBD_CDC_Init+0x1ec>)
 8006dc8:	7819      	ldrb	r1, [r3, #0]
 8006dca:	2308      	movs	r3, #8
 8006dcc:	2203      	movs	r2, #3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fad1 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006dd4:	4b25      	ldr	r3, [pc, #148]	; (8006e6c <USBD_CDC_Init+0x1ec>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	3324      	adds	r3, #36	; 0x24
 8006dea:	2201      	movs	r2, #1
 8006dec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	33b0      	adds	r3, #176	; 0xb0
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e24:	2302      	movs	r3, #2
 8006e26:	e018      	b.n	8006e5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7c1b      	ldrb	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006e32:	7819      	ldrb	r1, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f002 fb88 	bl	8009554 <USBD_LL_PrepareReceive>
 8006e44:	e008      	b.n	8006e58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e46:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <USBD_CDC_Init+0x1e8>)
 8006e48:	7819      	ldrb	r1, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 fb7e 	bl	8009554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000093 	.word	0x20000093
 8006e68:	20000094 	.word	0x20000094
 8006e6c:	20000095 	.word	0x20000095

08006e70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006e7c:	4b3a      	ldr	r3, [pc, #232]	; (8006f68 <USBD_CDC_DeInit+0xf8>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 fa9d 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006e88:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <USBD_CDC_DeInit+0xf8>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ea2:	4b32      	ldr	r3, [pc, #200]	; (8006f6c <USBD_CDC_DeInit+0xfc>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f002 fa8a 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <USBD_CDC_DeInit+0xfc>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f003 020f 	and.w	r2, r3, #15
 8006eb6:	6879      	ldr	r1, [r7, #4]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006eca:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <USBD_CDC_DeInit+0x100>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f002 fa76 	bl	80093c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ed6:	4b26      	ldr	r3, [pc, #152]	; (8006f70 <USBD_CDC_DeInit+0x100>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	f003 020f 	and.w	r2, r3, #15
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	3324      	adds	r3, #36	; 0x24
 8006eec:	2200      	movs	r2, #0
 8006eee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ef0:	4b1f      	ldr	r3, [pc, #124]	; (8006f70 <USBD_CDC_DeInit+0x100>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3326      	adds	r3, #38	; 0x26
 8006f06:	2200      	movs	r2, #0
 8006f08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	32b0      	adds	r2, #176	; 0xb0
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01f      	beq.n	8006f5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	33b0      	adds	r3, #176	; 0xb0
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	32b0      	adds	r2, #176	; 0xb0
 8006f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f002 fb4a 	bl	80095d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	; 0xb0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000093 	.word	0x20000093
 8006f6c:	20000094 	.word	0x20000094
 8006f70:	20000095 	.word	0x20000095

08006f74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	32b0      	adds	r2, #176	; 0xb0
 8006f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e0bf      	b.n	8007124 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d050      	beq.n	8007052 <USBD_CDC_Setup+0xde>
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	f040 80af 	bne.w	8007114 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	88db      	ldrh	r3, [r3, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d03a      	beq.n	8007034 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da1b      	bge.n	8007000 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	33b0      	adds	r3, #176	; 0xb0
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006fde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	88d2      	ldrh	r2, [r2, #6]
 8006fe4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	88db      	ldrh	r3, [r3, #6]
 8006fea:	2b07      	cmp	r3, #7
 8006fec:	bf28      	it	cs
 8006fee:	2307      	movcs	r3, #7
 8006ff0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	89fa      	ldrh	r2, [r7, #14]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fd89 	bl	8008b10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006ffe:	e090      	b.n	8007122 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	785a      	ldrb	r2, [r3, #1]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	88db      	ldrh	r3, [r3, #6]
 800700e:	2b3f      	cmp	r3, #63	; 0x3f
 8007010:	d803      	bhi.n	800701a <USBD_CDC_Setup+0xa6>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	88db      	ldrh	r3, [r3, #6]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	e000      	b.n	800701c <USBD_CDC_Setup+0xa8>
 800701a:	2240      	movs	r2, #64	; 0x40
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007022:	6939      	ldr	r1, [r7, #16]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800702a:	461a      	mov	r2, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fd9b 	bl	8008b68 <USBD_CtlPrepareRx>
      break;
 8007032:	e076      	b.n	8007122 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	33b0      	adds	r3, #176	; 0xb0
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	7850      	ldrb	r0, [r2, #1]
 800704a:	2200      	movs	r2, #0
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4798      	blx	r3
      break;
 8007050:	e067      	b.n	8007122 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	2b0b      	cmp	r3, #11
 8007058:	d851      	bhi.n	80070fe <USBD_CDC_Setup+0x18a>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USBD_CDC_Setup+0xec>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007091 	.word	0x08007091
 8007064:	0800710d 	.word	0x0800710d
 8007068:	080070ff 	.word	0x080070ff
 800706c:	080070ff 	.word	0x080070ff
 8007070:	080070ff 	.word	0x080070ff
 8007074:	080070ff 	.word	0x080070ff
 8007078:	080070ff 	.word	0x080070ff
 800707c:	080070ff 	.word	0x080070ff
 8007080:	080070ff 	.word	0x080070ff
 8007084:	080070ff 	.word	0x080070ff
 8007088:	080070bb 	.word	0x080070bb
 800708c:	080070e5 	.word	0x080070e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b03      	cmp	r3, #3
 800709a:	d107      	bne.n	80070ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800709c:	f107 030a 	add.w	r3, r7, #10
 80070a0:	2202      	movs	r2, #2
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fd33 	bl	8008b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070aa:	e032      	b.n	8007112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f001 fcbd 	bl	8008a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	75fb      	strb	r3, [r7, #23]
          break;
 80070b8:	e02b      	b.n	8007112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d107      	bne.n	80070d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80070c6:	f107 030d 	add.w	r3, r7, #13
 80070ca:	2201      	movs	r2, #1
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fd1e 	bl	8008b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070d4:	e01d      	b.n	8007112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fca8 	bl	8008a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	75fb      	strb	r3, [r7, #23]
          break;
 80070e2:	e016      	b.n	8007112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d00f      	beq.n	8007110 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 fc9b 	bl	8008a2e <USBD_CtlError>
            ret = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80070fc:	e008      	b.n	8007110 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fc94 	bl	8008a2e <USBD_CtlError>
          ret = USBD_FAIL;
 8007106:	2303      	movs	r3, #3
 8007108:	75fb      	strb	r3, [r7, #23]
          break;
 800710a:	e002      	b.n	8007112 <USBD_CDC_Setup+0x19e>
          break;
 800710c:	bf00      	nop
 800710e:	e008      	b.n	8007122 <USBD_CDC_Setup+0x1ae>
          break;
 8007110:	bf00      	nop
      }
      break;
 8007112:	e006      	b.n	8007122 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fc89 	bl	8008a2e <USBD_CtlError>
      ret = USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	75fb      	strb	r3, [r7, #23]
      break;
 8007120:	bf00      	nop
  }

  return (uint8_t)ret;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3718      	adds	r7, #24
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800713e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	32b0      	adds	r2, #176	; 0xb0
 800714a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	e065      	b.n	8007222 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	32b0      	adds	r2, #176	; 0xb0
 8007160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007164:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007166:	78fb      	ldrb	r3, [r7, #3]
 8007168:	f003 020f 	and.w	r2, r3, #15
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	3318      	adds	r3, #24
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d02f      	beq.n	80071e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	f003 020f 	and.w	r2, r3, #15
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	440b      	add	r3, r1
 8007192:	3318      	adds	r3, #24
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	f003 010f 	and.w	r1, r3, #15
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	460b      	mov	r3, r1
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	440b      	add	r3, r1
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4403      	add	r3, r0
 80071a8:	3348      	adds	r3, #72	; 0x48
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80071b0:	fb01 f303 	mul.w	r3, r1, r3
 80071b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d112      	bne.n	80071e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	f003 020f 	and.w	r2, r3, #15
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	3318      	adds	r3, #24
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80071d2:	78f9      	ldrb	r1, [r7, #3]
 80071d4:	2300      	movs	r3, #0
 80071d6:	2200      	movs	r2, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f002 f99a 	bl	8009512 <USBD_LL_Transmit>
 80071de:	e01f      	b.n	8007220 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	33b0      	adds	r3, #176	; 0xb0
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d010      	beq.n	8007220 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	33b0      	adds	r3, #176	; 0xb0
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32b0      	adds	r2, #176	; 0xb0
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	32b0      	adds	r2, #176	; 0xb0
 8007250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	e01a      	b.n	8007292 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 f998 	bl	8009596 <USBD_LL_GetRxDataSize>
 8007266:	4602      	mov	r2, r0
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	33b0      	adds	r3, #176	; 0xb0
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800728c:	4611      	mov	r1, r2
 800728e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	32b0      	adds	r2, #176	; 0xb0
 80072ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e025      	b.n	8007308 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	33b0      	adds	r3, #176	; 0xb0
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <USBD_CDC_EP0_RxReady+0x6c>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d015      	beq.n	8007306 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	33b0      	adds	r3, #176	; 0xb0
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80072f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80072fa:	b292      	uxth	r2, r2
 80072fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007318:	2182      	movs	r1, #130	; 0x82
 800731a:	4818      	ldr	r0, [pc, #96]	; (800737c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800731c:	f000 fd4f 	bl	8007dbe <USBD_GetEpDesc>
 8007320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007322:	2101      	movs	r1, #1
 8007324:	4815      	ldr	r0, [pc, #84]	; (800737c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007326:	f000 fd4a 	bl	8007dbe <USBD_GetEpDesc>
 800732a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800732c:	2181      	movs	r1, #129	; 0x81
 800732e:	4813      	ldr	r0, [pc, #76]	; (800737c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007330:	f000 fd45 	bl	8007dbe <USBD_GetEpDesc>
 8007334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2210      	movs	r2, #16
 8007340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2200      	movs	r2, #0
 800734c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007350:	711a      	strb	r2, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007364:	711a      	strb	r2, [r3, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2243      	movs	r2, #67	; 0x43
 800736e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000050 	.word	0x20000050

08007380 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007388:	2182      	movs	r1, #130	; 0x82
 800738a:	4818      	ldr	r0, [pc, #96]	; (80073ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800738c:	f000 fd17 	bl	8007dbe <USBD_GetEpDesc>
 8007390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007392:	2101      	movs	r1, #1
 8007394:	4815      	ldr	r0, [pc, #84]	; (80073ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007396:	f000 fd12 	bl	8007dbe <USBD_GetEpDesc>
 800739a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800739c:	2181      	movs	r1, #129	; 0x81
 800739e:	4813      	ldr	r0, [pc, #76]	; (80073ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073a0:	f000 fd0d 	bl	8007dbe <USBD_GetEpDesc>
 80073a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2210      	movs	r2, #16
 80073b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d006      	beq.n	80073c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2200      	movs	r2, #0
 80073bc:	711a      	strb	r2, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f042 0202 	orr.w	r2, r2, #2
 80073c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d006      	beq.n	80073da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	711a      	strb	r2, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f042 0202 	orr.w	r2, r2, #2
 80073d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2243      	movs	r2, #67	; 0x43
 80073de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000050 	.word	0x20000050

080073f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073f8:	2182      	movs	r1, #130	; 0x82
 80073fa:	4818      	ldr	r0, [pc, #96]	; (800745c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80073fc:	f000 fcdf 	bl	8007dbe <USBD_GetEpDesc>
 8007400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007402:	2101      	movs	r1, #1
 8007404:	4815      	ldr	r0, [pc, #84]	; (800745c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007406:	f000 fcda 	bl	8007dbe <USBD_GetEpDesc>
 800740a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800740c:	2181      	movs	r1, #129	; 0x81
 800740e:	4813      	ldr	r0, [pc, #76]	; (800745c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007410:	f000 fcd5 	bl	8007dbe <USBD_GetEpDesc>
 8007414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2210      	movs	r2, #16
 8007420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2200      	movs	r2, #0
 800742c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007430:	711a      	strb	r2, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d006      	beq.n	800744a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007444:	711a      	strb	r2, [r3, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2243      	movs	r2, #67	; 0x43
 800744e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20000050 	.word	0x20000050

08007460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	220a      	movs	r2, #10
 800746c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800746e:	4b03      	ldr	r3, [pc, #12]	; (800747c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007470:	4618      	mov	r0, r3
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	2000000c 	.word	0x2000000c

08007480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007490:	2303      	movs	r3, #3
 8007492:	e009      	b.n	80074a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	33b0      	adds	r3, #176	; 0xb0
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	32b0      	adds	r2, #176	; 0xb0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e008      	b.n	80074ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	32b0      	adds	r2, #176	; 0xb0
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007518:	2303      	movs	r3, #3
 800751a:	e004      	b.n	8007526 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	32b0      	adds	r2, #176	; 0xb0
 8007546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	32b0      	adds	r2, #176	; 0xb0
 800755a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007562:	2303      	movs	r3, #3
 8007564:	e025      	b.n	80075b2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800756c:	2b00      	cmp	r3, #0
 800756e:	d11f      	bne.n	80075b0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2201      	movs	r2, #1
 8007574:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <USBD_CDC_TransmitPacket+0x88>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4403      	add	r3, r0
 8007592:	3318      	adds	r3, #24
 8007594:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <USBD_CDC_TransmitPacket+0x88>)
 8007598:	7819      	ldrb	r1, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 ffb3 	bl	8009512 <USBD_LL_Transmit>

    ret = USBD_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000093 	.word	0x20000093

080075c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32b0      	adds	r2, #176	; 0xb0
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	32b0      	adds	r2, #176	; 0xb0
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e018      	b.n	8007620 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7c1b      	ldrb	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10a      	bne.n	800760c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <USBD_CDC_ReceivePacket+0x68>)
 80075f8:	7819      	ldrb	r1, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 ffa5 	bl	8009554 <USBD_LL_PrepareReceive>
 800760a:	e008      	b.n	800761e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800760c:	4b06      	ldr	r3, [pc, #24]	; (8007628 <USBD_CDC_ReceivePacket+0x68>)
 800760e:	7819      	ldrb	r1, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007616:	2340      	movs	r3, #64	; 0x40
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 ff9b 	bl	8009554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	20000094 	.word	0x20000094

0800762c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	4613      	mov	r3, r2
 8007638:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	e01f      	b.n	8007684 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	79fa      	ldrb	r2, [r7, #7]
 8007676:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f001 fe15 	bl	80092a8 <USBD_LL_Init>
 800767e:	4603      	mov	r3, r0
 8007680:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007682:	7dfb      	ldrb	r3, [r7, #23]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e025      	b.n	80076f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32ae      	adds	r2, #174	; 0xae
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32ae      	adds	r2, #174	; 0xae
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f107 020e 	add.w	r2, r7, #14
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fe1d 	bl	8009340 <USBD_LL_Start>
 8007706:	4603      	mov	r3, r0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	78fa      	ldrb	r2, [r7, #3]
 800774a:	4611      	mov	r1, r2
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f908 	bl	80089ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077b8:	461a      	mov	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d01a      	beq.n	8007804 <USBD_LL_SetupStage+0x72>
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d822      	bhi.n	8007818 <USBD_LL_SetupStage+0x86>
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <USBD_LL_SetupStage+0x4a>
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d00a      	beq.n	80077f0 <USBD_LL_SetupStage+0x5e>
 80077da:	e01d      	b.n	8007818 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb5f 	bl	8007ea8 <USBD_StdDevReq>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]
      break;
 80077ee:	e020      	b.n	8007832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbc7 	bl	8007f8c <USBD_StdItfReq>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
      break;
 8007802:	e016      	b.n	8007832 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fc29 	bl	8008064 <USBD_StdEPReq>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
      break;
 8007816:	e00c      	b.n	8007832 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800781e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fdea 	bl	8009400 <USBD_LL_StallEP>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
      break;
 8007830:	bf00      	nop
  }

  return ret;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	460b      	mov	r3, r1
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d16e      	bne.n	8007932 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800785a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007862:	2b03      	cmp	r3, #3
 8007864:	f040 8098 	bne.w	8007998 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	429a      	cmp	r2, r3
 8007872:	d913      	bls.n	800789c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4293      	cmp	r3, r2
 800788c:	bf28      	it	cs
 800788e:	4613      	movcs	r3, r2
 8007890:	461a      	mov	r2, r3
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f001 f984 	bl	8008ba2 <USBD_CtlContinueRx>
 800789a:	e07d      	b.n	8007998 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d014      	beq.n	80078d4 <USBD_LL_DataOutStage+0x98>
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d81d      	bhi.n	80078ea <USBD_LL_DataOutStage+0xae>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <USBD_LL_DataOutStage+0x7c>
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d003      	beq.n	80078be <USBD_LL_DataOutStage+0x82>
 80078b6:	e018      	b.n	80078ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75bb      	strb	r3, [r7, #22]
            break;
 80078bc:	e018      	b.n	80078f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fa5e 	bl	8007d8a <USBD_CoreFindIF>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75bb      	strb	r3, [r7, #22]
            break;
 80078d2:	e00d      	b.n	80078f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fa60 	bl	8007da4 <USBD_CoreFindEP>
 80078e4:	4603      	mov	r3, r0
 80078e6:	75bb      	strb	r3, [r7, #22]
            break;
 80078e8:	e002      	b.n	80078f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	75bb      	strb	r3, [r7, #22]
            break;
 80078ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80078f0:	7dbb      	ldrb	r3, [r7, #22]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d113      	bne.n	800792a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007902:	7dba      	ldrb	r2, [r7, #22]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	32ae      	adds	r2, #174	; 0xae
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00b      	beq.n	800792a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007912:	7dba      	ldrb	r2, [r7, #22]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800791a:	7dba      	ldrb	r2, [r7, #22]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	32ae      	adds	r2, #174	; 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f001 f94a 	bl	8008bc4 <USBD_CtlSendStatus>
 8007930:	e032      	b.n	8007998 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007938:	b2db      	uxtb	r3, r3
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fa31 	bl	8007da4 <USBD_CoreFindEP>
 8007942:	4603      	mov	r3, r0
 8007944:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007946:	7dbb      	ldrb	r3, [r7, #22]
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d025      	beq.n	8007998 <USBD_LL_DataOutStage+0x15c>
 800794c:	7dbb      	ldrb	r3, [r7, #22]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d122      	bne.n	8007998 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d117      	bne.n	800798e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800795e:	7dba      	ldrb	r2, [r7, #22]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	32ae      	adds	r2, #174	; 0xae
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00f      	beq.n	800798e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800796e:	7dba      	ldrb	r2, [r7, #22]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007976:	7dba      	ldrb	r2, [r7, #22]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	32ae      	adds	r2, #174	; 0xae
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	7afa      	ldrb	r2, [r7, #11]
 8007984:	4611      	mov	r1, r2
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4798      	blx	r3
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007994:	7dfb      	ldrb	r3, [r7, #23]
 8007996:	e000      	b.n	800799a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b086      	sub	sp, #24
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	460b      	mov	r3, r1
 80079ac:	607a      	str	r2, [r7, #4]
 80079ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079b0:	7afb      	ldrb	r3, [r7, #11]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d16f      	bne.n	8007a96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3314      	adds	r3, #20
 80079ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d15a      	bne.n	8007a7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d914      	bls.n	80079fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f001 f8ac 	bl	8008b46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ee:	2300      	movs	r3, #0
 80079f0:	2200      	movs	r2, #0
 80079f2:	2100      	movs	r1, #0
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f001 fdad 	bl	8009554 <USBD_LL_PrepareReceive>
 80079fa:	e03f      	b.n	8007a7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d11c      	bne.n	8007a42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d316      	bcc.n	8007a42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d20f      	bcs.n	8007a42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2100      	movs	r1, #0
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 f88d 	bl	8008b46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a34:	2300      	movs	r3, #0
 8007a36:	2200      	movs	r2, #0
 8007a38:	2100      	movs	r1, #0
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f001 fd8a 	bl	8009554 <USBD_LL_PrepareReceive>
 8007a40:	e01c      	b.n	8007a7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d10f      	bne.n	8007a6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f001 fcc5 	bl	8009400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f001 f8b7 	bl	8008bea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d03a      	beq.n	8007afc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff fe42 	bl	8007710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007a94:	e032      	b.n	8007afc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f97f 	bl	8007da4 <USBD_CoreFindEP>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2bff      	cmp	r3, #255	; 0xff
 8007aae:	d025      	beq.n	8007afc <USBD_LL_DataInStage+0x15a>
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d122      	bne.n	8007afc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d11c      	bne.n	8007afc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007ac2:	7dfa      	ldrb	r2, [r7, #23]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	32ae      	adds	r2, #174	; 0xae
 8007ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d014      	beq.n	8007afc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007ad2:	7dfa      	ldrb	r2, [r7, #23]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ada:	7dfa      	ldrb	r2, [r7, #23]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	32ae      	adds	r2, #174	; 0xae
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	7afa      	ldrb	r2, [r7, #11]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	4798      	blx	r3
 8007aee:	4603      	mov	r3, r0
 8007af0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007af2:	7dbb      	ldrb	r3, [r7, #22]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007af8:	7dbb      	ldrb	r3, [r7, #22]
 8007afa:	e000      	b.n	8007afe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b084      	sub	sp, #16
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d014      	beq.n	8007b6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6852      	ldr	r2, [r2, #4]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b6c:	2340      	movs	r3, #64	; 0x40
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fbff 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b88:	2340      	movs	r3, #64	; 0x40
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fbf1 	bl	8009376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2240      	movs	r2, #64	; 0x40
 8007b9e:	621a      	str	r2, [r3, #32]

  return ret;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	78fa      	ldrb	r2, [r7, #3]
 8007bba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2204      	movs	r2, #4
 8007be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d106      	bne.n	8007c18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d110      	bne.n	8007c5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	32ae      	adds	r2, #174	; 0xae
 8007c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e01c      	b.n	8007cc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b03      	cmp	r3, #3
 8007c92:	d115      	bne.n	8007cc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	32ae      	adds	r2, #174	; 0xae
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	32ae      	adds	r2, #174	; 0xae
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	78fa      	ldrb	r2, [r7, #3]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	32ae      	adds	r2, #174	; 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e01c      	b.n	8007d26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d115      	bne.n	8007d24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32ae      	adds	r2, #174	; 0xae
 8007d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	32ae      	adds	r2, #174	; 0xae
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6852      	ldr	r2, [r2, #4]
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	4611      	mov	r1, r2
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007d96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007db0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	885b      	ldrh	r3, [r3, #2]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d920      	bls.n	8007e28 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007dee:	e013      	b.n	8007e18 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007df0:	f107 030a 	add.w	r3, r7, #10
 8007df4:	4619      	mov	r1, r3
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f000 f81b 	bl	8007e32 <USBD_GetNextDesc>
 8007dfc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	2b05      	cmp	r3, #5
 8007e04:	d108      	bne.n	8007e18 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	789b      	ldrb	r3, [r3, #2]
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d008      	beq.n	8007e26 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	885b      	ldrh	r3, [r3, #2]
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	897b      	ldrh	r3, [r7, #10]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d8e5      	bhi.n	8007df0 <USBD_GetEpDesc+0x32>
 8007e24:	e000      	b.n	8007e28 <USBD_GetEpDesc+0x6a>
          break;
 8007e26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e28:	693b      	ldr	r3, [r7, #16]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	3301      	adds	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e8a:	8a3b      	ldrh	r3, [r7, #16]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	b21a      	sxth	r2, r3
 8007e90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d005      	beq.n	8007ece <USBD_StdDevReq+0x26>
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	d857      	bhi.n	8007f76 <USBD_StdDevReq+0xce>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00f      	beq.n	8007eea <USBD_StdDevReq+0x42>
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	d153      	bne.n	8007f76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	32ae      	adds	r2, #174	; 0xae
 8007ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee8:	e04a      	b.n	8007f80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	2b09      	cmp	r3, #9
 8007ef0:	d83b      	bhi.n	8007f6a <USBD_StdDevReq+0xc2>
 8007ef2:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <USBD_StdDevReq+0x50>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007f61 	.word	0x08007f61
 8007f00:	08007f6b 	.word	0x08007f6b
 8007f04:	08007f57 	.word	0x08007f57
 8007f08:	08007f6b 	.word	0x08007f6b
 8007f0c:	08007f2b 	.word	0x08007f2b
 8007f10:	08007f21 	.word	0x08007f21
 8007f14:	08007f6b 	.word	0x08007f6b
 8007f18:	08007f43 	.word	0x08007f43
 8007f1c:	08007f35 	.word	0x08007f35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa3c 	bl	80083a0 <USBD_GetDescriptor>
          break;
 8007f28:	e024      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fba1 	bl	8008674 <USBD_SetAddress>
          break;
 8007f32:	e01f      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fbe0 	bl	80086fc <USBD_SetConfig>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8007f40:	e018      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc83 	bl	8008850 <USBD_GetConfig>
          break;
 8007f4a:	e013      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fcb4 	bl	80088bc <USBD_GetStatus>
          break;
 8007f54:	e00e      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fce3 	bl	8008924 <USBD_SetFeature>
          break;
 8007f5e:	e009      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fd07 	bl	8008976 <USBD_ClrFeature>
          break;
 8007f68:	e004      	b.n	8007f74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fd5e 	bl	8008a2e <USBD_CtlError>
          break;
 8007f72:	bf00      	nop
      }
      break;
 8007f74:	e004      	b.n	8007f80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fd58 	bl	8008a2e <USBD_CtlError>
      break;
 8007f7e:	bf00      	nop
  }

  return ret;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa2:	2b40      	cmp	r3, #64	; 0x40
 8007fa4:	d005      	beq.n	8007fb2 <USBD_StdItfReq+0x26>
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d852      	bhi.n	8008050 <USBD_StdItfReq+0xc4>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <USBD_StdItfReq+0x26>
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d14e      	bne.n	8008050 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d840      	bhi.n	8008042 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	889b      	ldrh	r3, [r3, #4]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d836      	bhi.n	8008038 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7ff fed9 	bl	8007d8a <USBD_CoreFindIF>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2bff      	cmp	r3, #255	; 0xff
 8007fe0:	d01d      	beq.n	800801e <USBD_StdItfReq+0x92>
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11a      	bne.n	800801e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007fe8:	7bba      	ldrb	r2, [r7, #14]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	32ae      	adds	r2, #174	; 0xae
 8007fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00f      	beq.n	8008018 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ff8:	7bba      	ldrb	r2, [r7, #14]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008000:	7bba      	ldrb	r2, [r7, #14]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	32ae      	adds	r2, #174	; 0xae
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
 8008012:	4603      	mov	r3, r0
 8008014:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008016:	e004      	b.n	8008022 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800801c:	e001      	b.n	8008022 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d110      	bne.n	800804c <USBD_StdItfReq+0xc0>
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10d      	bne.n	800804c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fdc7 	bl	8008bc4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008036:	e009      	b.n	800804c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fcf7 	bl	8008a2e <USBD_CtlError>
          break;
 8008040:	e004      	b.n	800804c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fcf2 	bl	8008a2e <USBD_CtlError>
          break;
 800804a:	e000      	b.n	800804e <USBD_StdItfReq+0xc2>
          break;
 800804c:	bf00      	nop
      }
      break;
 800804e:	e004      	b.n	800805a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 fceb 	bl	8008a2e <USBD_CtlError>
      break;
 8008058:	bf00      	nop
  }

  return ret;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	889b      	ldrh	r3, [r3, #4]
 8008076:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d007      	beq.n	8008094 <USBD_StdEPReq+0x30>
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	f200 817f 	bhi.w	8008388 <USBD_StdEPReq+0x324>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d02a      	beq.n	80080e4 <USBD_StdEPReq+0x80>
 800808e:	2b20      	cmp	r3, #32
 8008090:	f040 817a 	bne.w	8008388 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fe83 	bl	8007da4 <USBD_CoreFindEP>
 800809e:	4603      	mov	r3, r0
 80080a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a2:	7b7b      	ldrb	r3, [r7, #13]
 80080a4:	2bff      	cmp	r3, #255	; 0xff
 80080a6:	f000 8174 	beq.w	8008392 <USBD_StdEPReq+0x32e>
 80080aa:	7b7b      	ldrb	r3, [r7, #13]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 8170 	bne.w	8008392 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80080b2:	7b7a      	ldrb	r2, [r7, #13]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080ba:	7b7a      	ldrb	r2, [r7, #13]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	32ae      	adds	r2, #174	; 0xae
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 8163 	beq.w	8008392 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80080cc:	7b7a      	ldrb	r2, [r7, #13]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32ae      	adds	r2, #174	; 0xae
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080e2:	e156      	b.n	8008392 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d008      	beq.n	80080fe <USBD_StdEPReq+0x9a>
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	f300 8145 	bgt.w	800837c <USBD_StdEPReq+0x318>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 809b 	beq.w	800822e <USBD_StdEPReq+0x1ca>
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d03c      	beq.n	8008176 <USBD_StdEPReq+0x112>
 80080fc:	e13e      	b.n	800837c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d002      	beq.n	8008110 <USBD_StdEPReq+0xac>
 800810a:	2b03      	cmp	r3, #3
 800810c:	d016      	beq.n	800813c <USBD_StdEPReq+0xd8>
 800810e:	e02c      	b.n	800816a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00d      	beq.n	8008132 <USBD_StdEPReq+0xce>
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b80      	cmp	r3, #128	; 0x80
 800811a:	d00a      	beq.n	8008132 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f96d 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008126:	2180      	movs	r1, #128	; 0x80
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f969 	bl	8009400 <USBD_LL_StallEP>
 800812e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008130:	e020      	b.n	8008174 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc7a 	bl	8008a2e <USBD_CtlError>
              break;
 800813a:	e01b      	b.n	8008174 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	885b      	ldrh	r3, [r3, #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10e      	bne.n	8008162 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <USBD_StdEPReq+0xfe>
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d008      	beq.n	8008162 <USBD_StdEPReq+0xfe>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	88db      	ldrh	r3, [r3, #6]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f94f 	bl	8009400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fd2e 	bl	8008bc4 <USBD_CtlSendStatus>

              break;
 8008168:	e004      	b.n	8008174 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fc5e 	bl	8008a2e <USBD_CtlError>
              break;
 8008172:	bf00      	nop
          }
          break;
 8008174:	e107      	b.n	8008386 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d002      	beq.n	8008188 <USBD_StdEPReq+0x124>
 8008182:	2b03      	cmp	r3, #3
 8008184:	d016      	beq.n	80081b4 <USBD_StdEPReq+0x150>
 8008186:	e04b      	b.n	8008220 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00d      	beq.n	80081aa <USBD_StdEPReq+0x146>
 800818e:	7bbb      	ldrb	r3, [r7, #14]
 8008190:	2b80      	cmp	r3, #128	; 0x80
 8008192:	d00a      	beq.n	80081aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f931 	bl	8009400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800819e:	2180      	movs	r1, #128	; 0x80
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f92d 	bl	8009400 <USBD_LL_StallEP>
 80081a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a8:	e040      	b.n	800822c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc3e 	bl	8008a2e <USBD_CtlError>
              break;
 80081b2:	e03b      	b.n	800822c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d136      	bne.n	800822a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f937 	bl	800943e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fcf7 	bl	8008bc4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fde2 	bl	8007da4 <USBD_CoreFindEP>
 80081e0:	4603      	mov	r3, r0
 80081e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e4:	7b7b      	ldrb	r3, [r7, #13]
 80081e6:	2bff      	cmp	r3, #255	; 0xff
 80081e8:	d01f      	beq.n	800822a <USBD_StdEPReq+0x1c6>
 80081ea:	7b7b      	ldrb	r3, [r7, #13]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d11c      	bne.n	800822a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80081f0:	7b7a      	ldrb	r2, [r7, #13]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80081f8:	7b7a      	ldrb	r2, [r7, #13]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	32ae      	adds	r2, #174	; 0xae
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008208:	7b7a      	ldrb	r2, [r7, #13]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32ae      	adds	r2, #174	; 0xae
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
 800821a:	4603      	mov	r3, r0
 800821c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800821e:	e004      	b.n	800822a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008220:	6839      	ldr	r1, [r7, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc03 	bl	8008a2e <USBD_CtlError>
              break;
 8008228:	e000      	b.n	800822c <USBD_StdEPReq+0x1c8>
              break;
 800822a:	bf00      	nop
          }
          break;
 800822c:	e0ab      	b.n	8008386 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d002      	beq.n	8008240 <USBD_StdEPReq+0x1dc>
 800823a:	2b03      	cmp	r3, #3
 800823c:	d032      	beq.n	80082a4 <USBD_StdEPReq+0x240>
 800823e:	e097      	b.n	8008370 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d007      	beq.n	8008256 <USBD_StdEPReq+0x1f2>
 8008246:	7bbb      	ldrb	r3, [r7, #14]
 8008248:	2b80      	cmp	r3, #128	; 0x80
 800824a:	d004      	beq.n	8008256 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fbed 	bl	8008a2e <USBD_CtlError>
                break;
 8008254:	e091      	b.n	800837a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825a:	2b00      	cmp	r3, #0
 800825c:	da0b      	bge.n	8008276 <USBD_StdEPReq+0x212>
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	3310      	adds	r3, #16
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	3304      	adds	r3, #4
 8008274:	e00b      	b.n	800828e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800827c:	4613      	mov	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4413      	add	r3, r2
 800828c:	3304      	adds	r3, #4
 800828e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2202      	movs	r2, #2
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fc37 	bl	8008b10 <USBD_CtlSendData>
              break;
 80082a2:	e06a      	b.n	800837a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	da11      	bge.n	80082d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	3324      	adds	r3, #36	; 0x24
 80082c0:	881b      	ldrh	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d117      	bne.n	80082f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fbb0 	bl	8008a2e <USBD_CtlError>
                  break;
 80082ce:	e054      	b.n	800837a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	f003 020f 	and.w	r2, r3, #15
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	440b      	add	r3, r1
 80082e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d104      	bne.n	80082f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb9d 	bl	8008a2e <USBD_CtlError>
                  break;
 80082f4:	e041      	b.n	800837a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da0b      	bge.n	8008316 <USBD_StdEPReq+0x2b2>
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	3310      	adds	r3, #16
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	4413      	add	r3, r2
 8008312:	3304      	adds	r3, #4
 8008314:	e00b      	b.n	800832e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	3304      	adds	r3, #4
 800832e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <USBD_StdEPReq+0x2d8>
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b80      	cmp	r3, #128	; 0x80
 800833a:	d103      	bne.n	8008344 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e00e      	b.n	8008362 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f897 	bl	800947c <USBD_LL_IsStallEP>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2201      	movs	r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e002      	b.n	8008362 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2202      	movs	r2, #2
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fbd1 	bl	8008b10 <USBD_CtlSendData>
              break;
 800836e:	e004      	b.n	800837a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fb5b 	bl	8008a2e <USBD_CtlError>
              break;
 8008378:	bf00      	nop
          }
          break;
 800837a:	e004      	b.n	8008386 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fb55 	bl	8008a2e <USBD_CtlError>
          break;
 8008384:	bf00      	nop
      }
      break;
 8008386:	e005      	b.n	8008394 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fb4f 	bl	8008a2e <USBD_CtlError>
      break;
 8008390:	e000      	b.n	8008394 <USBD_StdEPReq+0x330>
      break;
 8008392:	bf00      	nop
  }

  return ret;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	885b      	ldrh	r3, [r3, #2]
 80083ba:	0a1b      	lsrs	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b06      	cmp	r3, #6
 80083c2:	f200 8128 	bhi.w	8008616 <USBD_GetDescriptor+0x276>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <USBD_GetDescriptor+0x2c>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083e9 	.word	0x080083e9
 80083d0:	08008401 	.word	0x08008401
 80083d4:	08008441 	.word	0x08008441
 80083d8:	08008617 	.word	0x08008617
 80083dc:	08008617 	.word	0x08008617
 80083e0:	080085b7 	.word	0x080085b7
 80083e4:	080085e3 	.word	0x080085e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	7c12      	ldrb	r2, [r2, #16]
 80083f4:	f107 0108 	add.w	r1, r7, #8
 80083f8:	4610      	mov	r0, r2
 80083fa:	4798      	blx	r3
 80083fc:	60f8      	str	r0, [r7, #12]
      break;
 80083fe:	e112      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	7c1b      	ldrb	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	f107 0208 	add.w	r2, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3301      	adds	r3, #1
 800841e:	2202      	movs	r2, #2
 8008420:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008422:	e100      	b.n	8008626 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	f107 0208 	add.w	r2, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	2202      	movs	r2, #2
 800843c:	701a      	strb	r2, [r3, #0]
      break;
 800843e:	e0f2      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	885b      	ldrh	r3, [r3, #2]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b05      	cmp	r3, #5
 8008448:	f200 80ac 	bhi.w	80085a4 <USBD_GetDescriptor+0x204>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <USBD_GetDescriptor+0xb4>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	0800846d 	.word	0x0800846d
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084d5 	.word	0x080084d5
 8008460:	08008509 	.word	0x08008509
 8008464:	0800853d 	.word	0x0800853d
 8008468:	08008571 	.word	0x08008571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	7c12      	ldrb	r2, [r2, #16]
 8008484:	f107 0108 	add.w	r1, r7, #8
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
 800848c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800848e:	e091      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 facb 	bl	8008a2e <USBD_CtlError>
            err++;
 8008498:	7afb      	ldrb	r3, [r7, #11]
 800849a:	3301      	adds	r3, #1
 800849c:	72fb      	strb	r3, [r7, #11]
          break;
 800849e:	e089      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00b      	beq.n	80084c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	7c12      	ldrb	r2, [r2, #16]
 80084b8:	f107 0108 	add.w	r1, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084c2:	e077      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fab1 	bl	8008a2e <USBD_CtlError>
            err++;
 80084cc:	7afb      	ldrb	r3, [r7, #11]
 80084ce:	3301      	adds	r3, #1
 80084d0:	72fb      	strb	r3, [r7, #11]
          break;
 80084d2:	e06f      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7c12      	ldrb	r2, [r2, #16]
 80084ec:	f107 0108 	add.w	r1, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f6:	e05d      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa97 	bl	8008a2e <USBD_CtlError>
            err++;
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	3301      	adds	r3, #1
 8008504:	72fb      	strb	r3, [r7, #11]
          break;
 8008506:	e055      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00b      	beq.n	800852c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800852a:	e043      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fa7d 	bl	8008a2e <USBD_CtlError>
            err++;
 8008534:	7afb      	ldrb	r3, [r7, #11]
 8008536:	3301      	adds	r3, #1
 8008538:	72fb      	strb	r3, [r7, #11]
          break;
 800853a:	e03b      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00b      	beq.n	8008560 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	7c12      	ldrb	r2, [r2, #16]
 8008554:	f107 0108 	add.w	r1, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855e:	e029      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa63 	bl	8008a2e <USBD_CtlError>
            err++;
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	3301      	adds	r3, #1
 800856c:	72fb      	strb	r3, [r7, #11]
          break;
 800856e:	e021      	b.n	80085b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	7c12      	ldrb	r2, [r2, #16]
 8008588:	f107 0108 	add.w	r1, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008592:	e00f      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa49 	bl	8008a2e <USBD_CtlError>
            err++;
 800859c:	7afb      	ldrb	r3, [r7, #11]
 800859e:	3301      	adds	r3, #1
 80085a0:	72fb      	strb	r3, [r7, #11]
          break;
 80085a2:	e007      	b.n	80085b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80085a4:	6839      	ldr	r1, [r7, #0]
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fa41 	bl	8008a2e <USBD_CtlError>
          err++;
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	3301      	adds	r3, #1
 80085b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80085b2:	bf00      	nop
      }
      break;
 80085b4:	e037      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7c1b      	ldrb	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	f107 0208 	add.w	r2, r7, #8
 80085ca:	4610      	mov	r0, r2
 80085cc:	4798      	blx	r3
 80085ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085d0:	e029      	b.n	8008626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085d2:	6839      	ldr	r1, [r7, #0]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 fa2a 	bl	8008a2e <USBD_CtlError>
        err++;
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	3301      	adds	r3, #1
 80085de:	72fb      	strb	r3, [r7, #11]
      break;
 80085e0:	e021      	b.n	8008626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7c1b      	ldrb	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	f107 0208 	add.w	r2, r7, #8
 80085f6:	4610      	mov	r0, r2
 80085f8:	4798      	blx	r3
 80085fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	2207      	movs	r2, #7
 8008602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008604:	e00f      	b.n	8008626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fa10 	bl	8008a2e <USBD_CtlError>
        err++;
 800860e:	7afb      	ldrb	r3, [r7, #11]
 8008610:	3301      	adds	r3, #1
 8008612:	72fb      	strb	r3, [r7, #11]
      break;
 8008614:	e007      	b.n	8008626 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa08 	bl	8008a2e <USBD_CtlError>
      err++;
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	3301      	adds	r3, #1
 8008622:	72fb      	strb	r3, [r7, #11]
      break;
 8008624:	bf00      	nop
  }

  if (err != 0U)
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11e      	bne.n	800866a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	88db      	ldrh	r3, [r3, #6]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d016      	beq.n	8008662 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008634:	893b      	ldrh	r3, [r7, #8]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00e      	beq.n	8008658 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	88da      	ldrh	r2, [r3, #6]
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	4293      	cmp	r3, r2
 8008642:	bf28      	it	cs
 8008644:	4613      	movcs	r3, r2
 8008646:	b29b      	uxth	r3, r3
 8008648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800864a:	893b      	ldrh	r3, [r7, #8]
 800864c:	461a      	mov	r2, r3
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fa5d 	bl	8008b10 <USBD_CtlSendData>
 8008656:	e009      	b.n	800866c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9e7 	bl	8008a2e <USBD_CtlError>
 8008660:	e004      	b.n	800866c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 faae 	bl	8008bc4 <USBD_CtlSendStatus>
 8008668:	e000      	b.n	800866c <USBD_GetDescriptor+0x2cc>
    return;
 800866a:	bf00      	nop
  }
}
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop

08008674 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	889b      	ldrh	r3, [r3, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d131      	bne.n	80086ea <USBD_SetAddress+0x76>
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	88db      	ldrh	r3, [r3, #6]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d12d      	bne.n	80086ea <USBD_SetAddress+0x76>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	885b      	ldrh	r3, [r3, #2]
 8008692:	2b7f      	cmp	r3, #127	; 0x7f
 8008694:	d829      	bhi.n	80086ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	885b      	ldrh	r3, [r3, #2]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d104      	bne.n	80086b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9bc 	bl	8008a2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086b6:	e01d      	b.n	80086f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7bfa      	ldrb	r2, [r7, #15]
 80086bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 ff05 	bl	80094d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa7a 	bl	8008bc4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d004      	beq.n	80086e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086de:	e009      	b.n	80086f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e8:	e004      	b.n	80086f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f99e 	bl	8008a2e <USBD_CtlError>
  }
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	b2da      	uxtb	r2, r3
 8008710:	4b4e      	ldr	r3, [pc, #312]	; (800884c <USBD_SetConfig+0x150>)
 8008712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008714:	4b4d      	ldr	r3, [pc, #308]	; (800884c <USBD_SetConfig+0x150>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d905      	bls.n	8008728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f985 	bl	8008a2e <USBD_CtlError>
    return USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	e08c      	b.n	8008842 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d002      	beq.n	800873a <USBD_SetConfig+0x3e>
 8008734:	2b03      	cmp	r3, #3
 8008736:	d029      	beq.n	800878c <USBD_SetConfig+0x90>
 8008738:	e075      	b.n	8008826 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800873a:	4b44      	ldr	r3, [pc, #272]	; (800884c <USBD_SetConfig+0x150>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d020      	beq.n	8008784 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008742:	4b42      	ldr	r3, [pc, #264]	; (800884c <USBD_SetConfig+0x150>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800874c:	4b3f      	ldr	r3, [pc, #252]	; (800884c <USBD_SetConfig+0x150>)
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7fe ffe7 	bl	8007726 <USBD_SetClassConfig>
 8008758:	4603      	mov	r3, r0
 800875a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f962 	bl	8008a2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008772:	e065      	b.n	8008840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa25 	bl	8008bc4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2203      	movs	r2, #3
 800877e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008782:	e05d      	b.n	8008840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fa1d 	bl	8008bc4 <USBD_CtlSendStatus>
      break;
 800878a:	e059      	b.n	8008840 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800878c:	4b2f      	ldr	r3, [pc, #188]	; (800884c <USBD_SetConfig+0x150>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d112      	bne.n	80087ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800879c:	4b2b      	ldr	r3, [pc, #172]	; (800884c <USBD_SetConfig+0x150>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087a6:	4b29      	ldr	r3, [pc, #164]	; (800884c <USBD_SetConfig+0x150>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7fe ffd6 	bl	800775e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa06 	bl	8008bc4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087b8:	e042      	b.n	8008840 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <USBD_SetConfig+0x150>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d02a      	beq.n	800881e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7fe ffc4 	bl	800775e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80087d6:	4b1d      	ldr	r3, [pc, #116]	; (800884c <USBD_SetConfig+0x150>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087e0:	4b1a      	ldr	r3, [pc, #104]	; (800884c <USBD_SetConfig+0x150>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fe ff9d 	bl	8007726 <USBD_SetClassConfig>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00f      	beq.n	8008816 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f918 	bl	8008a2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fe ffa9 	bl	800775e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008814:	e014      	b.n	8008840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f9d4 	bl	8008bc4 <USBD_CtlSendStatus>
      break;
 800881c:	e010      	b.n	8008840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f9d0 	bl	8008bc4 <USBD_CtlSendStatus>
      break;
 8008824:	e00c      	b.n	8008840 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 f900 	bl	8008a2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <USBD_SetConfig+0x150>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fe ff92 	bl	800775e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	73fb      	strb	r3, [r7, #15]
      break;
 800883e:	bf00      	nop
  }

  return ret;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	2000040c 	.word	0x2000040c

08008850 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88db      	ldrh	r3, [r3, #6]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d004      	beq.n	800886c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f8e2 	bl	8008a2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800886a:	e023      	b.n	80088b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	dc02      	bgt.n	800887e <USBD_GetConfig+0x2e>
 8008878:	2b00      	cmp	r3, #0
 800887a:	dc03      	bgt.n	8008884 <USBD_GetConfig+0x34>
 800887c:	e015      	b.n	80088aa <USBD_GetConfig+0x5a>
 800887e:	2b03      	cmp	r3, #3
 8008880:	d00b      	beq.n	800889a <USBD_GetConfig+0x4a>
 8008882:	e012      	b.n	80088aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3308      	adds	r3, #8
 800888e:	2201      	movs	r2, #1
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f93c 	bl	8008b10 <USBD_CtlSendData>
        break;
 8008898:	e00c      	b.n	80088b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3304      	adds	r3, #4
 800889e:	2201      	movs	r2, #1
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f934 	bl	8008b10 <USBD_CtlSendData>
        break;
 80088a8:	e004      	b.n	80088b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8be 	bl	8008a2e <USBD_CtlError>
        break;
 80088b2:	bf00      	nop
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d81e      	bhi.n	8008912 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	88db      	ldrh	r3, [r3, #6]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d004      	beq.n	80088e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f8a5 	bl	8008a2e <USBD_CtlError>
        break;
 80088e4:	e01a      	b.n	800891c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f043 0202 	orr.w	r2, r3, #2
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	330c      	adds	r3, #12
 8008906:	2202      	movs	r2, #2
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f900 	bl	8008b10 <USBD_CtlSendData>
      break;
 8008910:	e004      	b.n	800891c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008912:	6839      	ldr	r1, [r7, #0]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f88a 	bl	8008a2e <USBD_CtlError>
      break;
 800891a:	bf00      	nop
  }
}
 800891c:	bf00      	nop
 800891e:	3708      	adds	r7, #8
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d107      	bne.n	8008946 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f940 	bl	8008bc4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008944:	e013      	b.n	800896e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	885b      	ldrh	r3, [r3, #2]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d10b      	bne.n	8008966 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	889b      	ldrh	r3, [r3, #4]
 8008952:	0a1b      	lsrs	r3, r3, #8
 8008954:	b29b      	uxth	r3, r3
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f930 	bl	8008bc4 <USBD_CtlSendStatus>
}
 8008964:	e003      	b.n	800896e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f860 	bl	8008a2e <USBD_CtlError>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008986:	b2db      	uxtb	r3, r3
 8008988:	3b01      	subs	r3, #1
 800898a:	2b02      	cmp	r3, #2
 800898c:	d80b      	bhi.n	80089a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	885b      	ldrh	r3, [r3, #2]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d10c      	bne.n	80089b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f910 	bl	8008bc4 <USBD_CtlSendStatus>
      }
      break;
 80089a4:	e004      	b.n	80089b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f840 	bl	8008a2e <USBD_CtlError>
      break;
 80089ae:	e000      	b.n	80089b2 <USBD_ClrFeature+0x3c>
      break;
 80089b0:	bf00      	nop
  }
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	781a      	ldrb	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff fa41 	bl	8007e6c <SWAPBYTE>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fa34 	bl	8007e6c <SWAPBYTE>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff fa27 	bl	8007e6c <SWAPBYTE>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	461a      	mov	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	80da      	strh	r2, [r3, #6]
}
 8008a26:	bf00      	nop
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a38:	2180      	movs	r1, #128	; 0x80
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fce0 	bl	8009400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a40:	2100      	movs	r1, #0
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fcdc 	bl	8009400 <USBD_LL_StallEP>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d036      	beq.n	8008ad4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008a6a:	6938      	ldr	r0, [r7, #16]
 8008a6c:	f000 f836 	bl	8008adc <USBD_GetLen>
 8008a70:	4603      	mov	r3, r0
 8008a72:	3301      	adds	r3, #1
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	4413      	add	r3, r2
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	7812      	ldrb	r2, [r2, #0]
 8008a88:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	4413      	add	r3, r2
 8008a96:	2203      	movs	r2, #3
 8008a98:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008aa0:	e013      	b.n	8008aca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	7812      	ldrb	r2, [r2, #0]
 8008aac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	613b      	str	r3, [r7, #16]
    idx++;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	4413      	add	r3, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e7      	bne.n	8008aa2 <USBD_GetString+0x52>
 8008ad2:	e000      	b.n	8008ad6 <USBD_GetString+0x86>
    return;
 8008ad4:	bf00      	nop
  }
}
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008aec:	e005      	b.n	8008afa <USBD_GetLen+0x1e>
  {
    len++;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	3301      	adds	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3301      	adds	r3, #1
 8008af8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f5      	bne.n	8008aee <USBD_GetLen+0x12>
  }

  return len;
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	2100      	movs	r1, #0
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fceb 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	2100      	movs	r1, #0
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f000 fcda 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2203      	movs	r2, #3
 8008b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	2100      	movs	r1, #0
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fcde 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 fccd 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2204      	movs	r2, #4
 8008bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2100      	movs	r1, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fc99 	bl	8009512 <USBD_LL_Transmit>

  return USBD_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	2100      	movs	r1, #0
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fca7 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c14:	2200      	movs	r2, #0
 8008c16:	4912      	ldr	r1, [pc, #72]	; (8008c60 <MX_USB_DEVICE_Init+0x50>)
 8008c18:	4812      	ldr	r0, [pc, #72]	; (8008c64 <MX_USB_DEVICE_Init+0x54>)
 8008c1a:	f7fe fd07 	bl	800762c <USBD_Init>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c24:	f7f8 fbfc 	bl	8001420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c28:	490f      	ldr	r1, [pc, #60]	; (8008c68 <MX_USB_DEVICE_Init+0x58>)
 8008c2a:	480e      	ldr	r0, [pc, #56]	; (8008c64 <MX_USB_DEVICE_Init+0x54>)
 8008c2c:	f7fe fd2e 	bl	800768c <USBD_RegisterClass>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c36:	f7f8 fbf3 	bl	8001420 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c3a:	490c      	ldr	r1, [pc, #48]	; (8008c6c <MX_USB_DEVICE_Init+0x5c>)
 8008c3c:	4809      	ldr	r0, [pc, #36]	; (8008c64 <MX_USB_DEVICE_Init+0x54>)
 8008c3e:	f7fe fc1f 	bl	8007480 <USBD_CDC_RegisterInterface>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c48:	f7f8 fbea 	bl	8001420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c4c:	4805      	ldr	r0, [pc, #20]	; (8008c64 <MX_USB_DEVICE_Init+0x54>)
 8008c4e:	f7fe fd53 	bl	80076f8 <USBD_Start>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c58:	f7f8 fbe2 	bl	8001420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c5c:	bf00      	nop
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	200000ac 	.word	0x200000ac
 8008c64:	20000410 	.word	0x20000410
 8008c68:	20000018 	.word	0x20000018
 8008c6c:	20000098 	.word	0x20000098

08008c70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c74:	2200      	movs	r2, #0
 8008c76:	4905      	ldr	r1, [pc, #20]	; (8008c8c <CDC_Init_FS+0x1c>)
 8008c78:	4805      	ldr	r0, [pc, #20]	; (8008c90 <CDC_Init_FS+0x20>)
 8008c7a:	f7fe fc1b 	bl	80074b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c7e:	4905      	ldr	r1, [pc, #20]	; (8008c94 <CDC_Init_FS+0x24>)
 8008c80:	4803      	ldr	r0, [pc, #12]	; (8008c90 <CDC_Init_FS+0x20>)
 8008c82:	f7fe fc39 	bl	80074f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	20000eec 	.word	0x20000eec
 8008c90:	20000410 	.word	0x20000410
 8008c94:	200006ec 	.word	0x200006ec

08008c98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	6039      	str	r1, [r7, #0]
 8008cb2:	71fb      	strb	r3, [r7, #7]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	2b23      	cmp	r3, #35	; 0x23
 8008cbc:	d84a      	bhi.n	8008d54 <CDC_Control_FS+0xac>
 8008cbe:	a201      	add	r2, pc, #4	; (adr r2, 8008cc4 <CDC_Control_FS+0x1c>)
 8008cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc4:	08008d55 	.word	0x08008d55
 8008cc8:	08008d55 	.word	0x08008d55
 8008ccc:	08008d55 	.word	0x08008d55
 8008cd0:	08008d55 	.word	0x08008d55
 8008cd4:	08008d55 	.word	0x08008d55
 8008cd8:	08008d55 	.word	0x08008d55
 8008cdc:	08008d55 	.word	0x08008d55
 8008ce0:	08008d55 	.word	0x08008d55
 8008ce4:	08008d55 	.word	0x08008d55
 8008ce8:	08008d55 	.word	0x08008d55
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008d55 	.word	0x08008d55
 8008cf4:	08008d55 	.word	0x08008d55
 8008cf8:	08008d55 	.word	0x08008d55
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008d55 	.word	0x08008d55
 8008d0c:	08008d55 	.word	0x08008d55
 8008d10:	08008d55 	.word	0x08008d55
 8008d14:	08008d55 	.word	0x08008d55
 8008d18:	08008d55 	.word	0x08008d55
 8008d1c:	08008d55 	.word	0x08008d55
 8008d20:	08008d55 	.word	0x08008d55
 8008d24:	08008d55 	.word	0x08008d55
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	08008d55 	.word	0x08008d55
 8008d30:	08008d55 	.word	0x08008d55
 8008d34:	08008d55 	.word	0x08008d55
 8008d38:	08008d55 	.word	0x08008d55
 8008d3c:	08008d55 	.word	0x08008d55
 8008d40:	08008d55 	.word	0x08008d55
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d55 	.word	0x08008d55
 8008d4c:	08008d55 	.word	0x08008d55
 8008d50:	08008d55 	.word	0x08008d55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d54:	bf00      	nop
  }

  return (USBD_OK);
 8008d56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4805      	ldr	r0, [pc, #20]	; (8008d88 <CDC_Receive_FS+0x24>)
 8008d72:	f7fe fbc1 	bl	80074f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d76:	4804      	ldr	r0, [pc, #16]	; (8008d88 <CDC_Receive_FS+0x24>)
 8008d78:	f7fe fc22 	bl	80075c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20000410 	.word	0x20000410

08008d8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <CDC_Transmit_FS+0x48>)
 8008d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e00b      	b.n	8008dca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	461a      	mov	r2, r3
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4806      	ldr	r0, [pc, #24]	; (8008dd4 <CDC_Transmit_FS+0x48>)
 8008dba:	f7fe fb7b 	bl	80074b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dbe:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <CDC_Transmit_FS+0x48>)
 8008dc0:	f7fe fbb8 	bl	8007534 <USBD_CDC_TransmitPacket>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000410 	.word	0x20000410

08008dd8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4613      	mov	r3, r2
 8008de4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008dea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
	...

08008dfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2212      	movs	r2, #18
 8008e0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e0e:	4b03      	ldr	r3, [pc, #12]	; (8008e1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	200000c8 	.word	0x200000c8

08008e20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	6039      	str	r1, [r7, #0]
 8008e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2204      	movs	r2, #4
 8008e30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr
 8008e40:	200000dc 	.word	0x200000dc

08008e44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6039      	str	r1, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d105      	bne.n	8008e62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4907      	ldr	r1, [pc, #28]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e5a:	4808      	ldr	r0, [pc, #32]	; (8008e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e5c:	f7ff fdf8 	bl	8008a50 <USBD_GetString>
 8008e60:	e004      	b.n	8008e6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	4904      	ldr	r1, [pc, #16]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e66:	4805      	ldr	r0, [pc, #20]	; (8008e7c <USBD_FS_ProductStrDescriptor+0x38>)
 8008e68:	f7ff fdf2 	bl	8008a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e6c:	4b02      	ldr	r3, [pc, #8]	; (8008e78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	200016ec 	.word	0x200016ec
 8008e7c:	0800dfac 	.word	0x0800dfac

08008e80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	4904      	ldr	r1, [pc, #16]	; (8008ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e90:	4804      	ldr	r0, [pc, #16]	; (8008ea4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e92:	f7ff fddd 	bl	8008a50 <USBD_GetString>
  return USBD_StrDesc;
 8008e96:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200016ec 	.word	0x200016ec
 8008ea4:	0800dfc4 	.word	0x0800dfc4

08008ea8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	6039      	str	r1, [r7, #0]
 8008eb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	221a      	movs	r2, #26
 8008eb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eba:	f000 f843 	bl	8008f44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ebe:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200000e0 	.word	0x200000e0

08008ecc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d105      	bne.n	8008eea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4907      	ldr	r1, [pc, #28]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ee2:	4808      	ldr	r0, [pc, #32]	; (8008f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ee4:	f7ff fdb4 	bl	8008a50 <USBD_GetString>
 8008ee8:	e004      	b.n	8008ef4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	4904      	ldr	r1, [pc, #16]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eee:	4805      	ldr	r0, [pc, #20]	; (8008f04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ef0:	f7ff fdae 	bl	8008a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ef4:	4b02      	ldr	r3, [pc, #8]	; (8008f00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200016ec 	.word	0x200016ec
 8008f04:	0800dfd8 	.word	0x0800dfd8

08008f08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f1e:	4808      	ldr	r0, [pc, #32]	; (8008f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f20:	f7ff fd96 	bl	8008a50 <USBD_GetString>
 8008f24:	e004      	b.n	8008f30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	4904      	ldr	r1, [pc, #16]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f2a:	4805      	ldr	r0, [pc, #20]	; (8008f40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f2c:	f7ff fd90 	bl	8008a50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200016ec 	.word	0x200016ec
 8008f40:	0800dfe4 	.word	0x0800dfe4

08008f44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <Get_SerialNum+0x44>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f50:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <Get_SerialNum+0x48>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f56:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <Get_SerialNum+0x4c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4909      	ldr	r1, [pc, #36]	; (8008f94 <Get_SerialNum+0x50>)
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 f814 	bl	8008f9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f74:	2204      	movs	r2, #4
 8008f76:	4908      	ldr	r1, [pc, #32]	; (8008f98 <Get_SerialNum+0x54>)
 8008f78:	68b8      	ldr	r0, [r7, #8]
 8008f7a:	f000 f80f 	bl	8008f9c <IntToUnicode>
  }
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	1fff7a10 	.word	0x1fff7a10
 8008f8c:	1fff7a14 	.word	0x1fff7a14
 8008f90:	1fff7a18 	.word	0x1fff7a18
 8008f94:	200000e2 	.word	0x200000e2
 8008f98:	200000f2 	.word	0x200000f2

08008f9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
 8008fb2:	e027      	b.n	8009004 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	0f1b      	lsrs	r3, r3, #28
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d80b      	bhi.n	8008fd4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	0f1b      	lsrs	r3, r3, #28
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	440b      	add	r3, r1
 8008fcc:	3230      	adds	r2, #48	; 0x30
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	701a      	strb	r2, [r3, #0]
 8008fd2:	e00a      	b.n	8008fea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	0f1b      	lsrs	r3, r3, #28
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	440b      	add	r3, r1
 8008fe4:	3237      	adds	r2, #55	; 0x37
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	005b      	lsls	r3, r3, #1
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	3301      	adds	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
 8009004:	7dfa      	ldrb	r2, [r7, #23]
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	429a      	cmp	r2, r3
 800900a:	d3d3      	bcc.n	8008fb4 <IntToUnicode+0x18>
  }
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
	...

0800901c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b08a      	sub	sp, #40	; 0x28
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009024:	f107 0314 	add.w	r3, r7, #20
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	605a      	str	r2, [r3, #4]
 800902e:	609a      	str	r2, [r3, #8]
 8009030:	60da      	str	r2, [r3, #12]
 8009032:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903c:	d13a      	bne.n	80090b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	4b1e      	ldr	r3, [pc, #120]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	4a1d      	ldr	r2, [pc, #116]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 8009048:	f043 0301 	orr.w	r3, r3, #1
 800904c:	6313      	str	r3, [r2, #48]	; 0x30
 800904e:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800905a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800905e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009060:	2302      	movs	r3, #2
 8009062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009064:	2300      	movs	r3, #0
 8009066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009068:	2303      	movs	r3, #3
 800906a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800906c:	230a      	movs	r3, #10
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009070:	f107 0314 	add.w	r3, r7, #20
 8009074:	4619      	mov	r1, r3
 8009076:	4812      	ldr	r0, [pc, #72]	; (80090c0 <HAL_PCD_MspInit+0xa4>)
 8009078:	f7f9 fe0e 	bl	8002c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800907c:	4b0f      	ldr	r3, [pc, #60]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 800907e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009080:	4a0e      	ldr	r2, [pc, #56]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 8009082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009086:	6353      	str	r3, [r2, #52]	; 0x34
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
 800908c:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 800908e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 8009092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009096:	6453      	str	r3, [r2, #68]	; 0x44
 8009098:	4b08      	ldr	r3, [pc, #32]	; (80090bc <HAL_PCD_MspInit+0xa0>)
 800909a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800909c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80090a4:	2200      	movs	r2, #0
 80090a6:	2100      	movs	r1, #0
 80090a8:	2043      	movs	r0, #67	; 0x43
 80090aa:	f7f9 fa4e 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80090ae:	2043      	movs	r0, #67	; 0x43
 80090b0:	f7f9 fa67 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80090b4:	bf00      	nop
 80090b6:	3728      	adds	r7, #40	; 0x28
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40023800 	.word	0x40023800
 80090c0:	40020000 	.word	0x40020000

080090c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fe fb59 	bl	8007792 <USBD_LL_SetupStage>
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	6879      	ldr	r1, [r7, #4]
 80090fe:	4613      	mov	r3, r2
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	440b      	add	r3, r1
 8009108:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	4619      	mov	r1, r3
 8009112:	f7fe fb93 	bl	800783c <USBD_LL_DataOutStage>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	334c      	adds	r3, #76	; 0x4c
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	4619      	mov	r1, r3
 8009146:	f7fe fc2c 	bl	80079a2 <USBD_LL_DataInStage>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fd60 	bl	8007c26 <USBD_LL_SOF>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009176:	2301      	movs	r3, #1
 8009178:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
 8009186:	e008      	b.n	800919a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d102      	bne.n	8009196 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009190:	2301      	movs	r3, #1
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	e001      	b.n	800919a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009196:	f7f8 f943 	bl	8001420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091a0:	7bfa      	ldrb	r2, [r7, #15]
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fe fd00 	bl	8007baa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe fca8 	bl	8007b06 <USBD_LL_Reset>
}
 80091b6:	bf00      	nop
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fcfb 	bl	8007bca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6812      	ldr	r2, [r2, #0]
 80091e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d005      	beq.n	8009200 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091f4:	4b04      	ldr	r3, [pc, #16]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	4a03      	ldr	r2, [pc, #12]	; (8009208 <HAL_PCD_SuspendCallback+0x48>)
 80091fa:	f043 0306 	orr.w	r3, r3, #6
 80091fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	e000ed00 	.word	0xe000ed00

0800920c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fceb 	bl	8007bf6 <USBD_LL_Resume>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fe fd43 	bl	8007cca <USBD_LL_IsoOUTIncomplete>
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fcff 	bl	8007c66 <USBD_LL_IsoINIncomplete>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fd55 	bl	8007d2e <USBD_LL_DevConnected>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fd52 	bl	8007d44 <USBD_LL_DevDisconnected>
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d13c      	bne.n	8009332 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80092b8:	4a20      	ldr	r2, [pc, #128]	; (800933c <USBD_LL_Init+0x94>)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a1e      	ldr	r2, [pc, #120]	; (800933c <USBD_LL_Init+0x94>)
 80092c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092c8:	4b1c      	ldr	r3, [pc, #112]	; (800933c <USBD_LL_Init+0x94>)
 80092ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80092ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80092d0:	4b1a      	ldr	r3, [pc, #104]	; (800933c <USBD_LL_Init+0x94>)
 80092d2:	2204      	movs	r2, #4
 80092d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <USBD_LL_Init+0x94>)
 80092d8:	2202      	movs	r2, #2
 80092da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <USBD_LL_Init+0x94>)
 80092de:	2200      	movs	r2, #0
 80092e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <USBD_LL_Init+0x94>)
 80092e4:	2202      	movs	r2, #2
 80092e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092e8:	4b14      	ldr	r3, [pc, #80]	; (800933c <USBD_LL_Init+0x94>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <USBD_LL_Init+0x94>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80092f4:	4b11      	ldr	r3, [pc, #68]	; (800933c <USBD_LL_Init+0x94>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <USBD_LL_Init+0x94>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <USBD_LL_Init+0x94>)
 8009302:	2200      	movs	r2, #0
 8009304:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009306:	480d      	ldr	r0, [pc, #52]	; (800933c <USBD_LL_Init+0x94>)
 8009308:	f7f9 fe62 	bl	8002fd0 <HAL_PCD_Init>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009312:	f7f8 f885 	bl	8001420 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	4808      	ldr	r0, [pc, #32]	; (800933c <USBD_LL_Init+0x94>)
 800931a:	f7fb f8ba 	bl	8004492 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	2100      	movs	r1, #0
 8009322:	4806      	ldr	r0, [pc, #24]	; (800933c <USBD_LL_Init+0x94>)
 8009324:	f7fb f86e 	bl	8004404 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009328:	2280      	movs	r2, #128	; 0x80
 800932a:	2101      	movs	r1, #1
 800932c:	4803      	ldr	r0, [pc, #12]	; (800933c <USBD_LL_Init+0x94>)
 800932e:	f7fb f869 	bl	8004404 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200018ec 	.word	0x200018ec

08009340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009356:	4618      	mov	r0, r3
 8009358:	f7f9 ff57 	bl	800320a <HAL_PCD_Start>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f942 	bl	80095ec <USBD_Get_USB_Status>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936c:	7bbb      	ldrb	r3, [r7, #14]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b084      	sub	sp, #16
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	4608      	mov	r0, r1
 8009380:	4611      	mov	r1, r2
 8009382:	461a      	mov	r2, r3
 8009384:	4603      	mov	r3, r0
 8009386:	70fb      	strb	r3, [r7, #3]
 8009388:	460b      	mov	r3, r1
 800938a:	70bb      	strb	r3, [r7, #2]
 800938c:	4613      	mov	r3, r2
 800938e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800939e:	78bb      	ldrb	r3, [r7, #2]
 80093a0:	883a      	ldrh	r2, [r7, #0]
 80093a2:	78f9      	ldrb	r1, [r7, #3]
 80093a4:	f7fa fc28 	bl	8003bf8 <HAL_PCD_EP_Open>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f91c 	bl	80095ec <USBD_Get_USB_Status>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b084      	sub	sp, #16
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fa fc71 	bl	8003cc8 <HAL_PCD_EP_Close>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 f8fd 	bl	80095ec <USBD_Get_USB_Status>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7fa fd49 	bl	8003eb6 <HAL_PCD_EP_SetStall>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f8de 	bl	80095ec <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7fa fd8e 	bl	8003f7e <HAL_PCD_EP_ClrStall>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f8bf 	bl	80095ec <USBD_Get_USB_Status>
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009472:	7bbb      	ldrb	r3, [r7, #14]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800948e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009494:	2b00      	cmp	r3, #0
 8009496:	da0b      	bge.n	80094b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	333e      	adds	r3, #62	; 0x3e
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	e00b      	b.n	80094c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	4613      	mov	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ee:	78fa      	ldrb	r2, [r7, #3]
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fa fb5b 	bl	8003bae <HAL_PCD_SetAddress>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 f874 	bl	80095ec <USBD_Get_USB_Status>
 8009504:	4603      	mov	r3, r0
 8009506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009508:	7bbb      	ldrb	r3, [r7, #14]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
 800951e:	460b      	mov	r3, r1
 8009520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009530:	7af9      	ldrb	r1, [r7, #11]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	f7fa fc74 	bl	8003e22 <HAL_PCD_EP_Transmit>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f853 	bl	80095ec <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954a:	7dbb      	ldrb	r3, [r7, #22]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	460b      	mov	r3, r1
 8009562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009572:	7af9      	ldrb	r1, [r7, #11]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	f7fa fbf0 	bl	8003d5c <HAL_PCD_EP_Receive>
 800957c:	4603      	mov	r3, r0
 800957e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f832 	bl	80095ec <USBD_Get_USB_Status>
 8009588:	4603      	mov	r3, r0
 800958a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800958c:	7dbb      	ldrb	r3, [r7, #22]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fa fc20 	bl	8003df2 <HAL_PCD_EP_GetRxCount>
 80095b2:	4603      	mov	r3, r0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095c4:	4b03      	ldr	r3, [pc, #12]	; (80095d4 <USBD_static_malloc+0x18>)
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	20001df8 	.word	0x20001df8

080095d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d817      	bhi.n	8009630 <USBD_Get_USB_Status+0x44>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <USBD_Get_USB_Status+0x1c>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009619 	.word	0x08009619
 800960c:	0800961f 	.word	0x0800961f
 8009610:	08009625 	.word	0x08009625
 8009614:	0800962b 	.word	0x0800962b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
    break;
 800961c:	e00b      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800961e:	2303      	movs	r3, #3
 8009620:	73fb      	strb	r3, [r7, #15]
    break;
 8009622:	e008      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009624:	2301      	movs	r3, #1
 8009626:	73fb      	strb	r3, [r7, #15]
    break;
 8009628:	e005      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800962a:	2303      	movs	r3, #3
 800962c:	73fb      	strb	r3, [r7, #15]
    break;
 800962e:	e002      	b.n	8009636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	73fb      	strb	r3, [r7, #15]
    break;
 8009634:	bf00      	nop
  }
  return usb_status;
 8009636:	7bfb      	ldrb	r3, [r7, #15]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <__errno>:
 8009644:	4b01      	ldr	r3, [pc, #4]	; (800964c <__errno+0x8>)
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	200000fc 	.word	0x200000fc

08009650 <__libc_init_array>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	4d0d      	ldr	r5, [pc, #52]	; (8009688 <__libc_init_array+0x38>)
 8009654:	4c0d      	ldr	r4, [pc, #52]	; (800968c <__libc_init_array+0x3c>)
 8009656:	1b64      	subs	r4, r4, r5
 8009658:	10a4      	asrs	r4, r4, #2
 800965a:	2600      	movs	r6, #0
 800965c:	42a6      	cmp	r6, r4
 800965e:	d109      	bne.n	8009674 <__libc_init_array+0x24>
 8009660:	4d0b      	ldr	r5, [pc, #44]	; (8009690 <__libc_init_array+0x40>)
 8009662:	4c0c      	ldr	r4, [pc, #48]	; (8009694 <__libc_init_array+0x44>)
 8009664:	f004 fc90 	bl	800df88 <_init>
 8009668:	1b64      	subs	r4, r4, r5
 800966a:	10a4      	asrs	r4, r4, #2
 800966c:	2600      	movs	r6, #0
 800966e:	42a6      	cmp	r6, r4
 8009670:	d105      	bne.n	800967e <__libc_init_array+0x2e>
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	f855 3b04 	ldr.w	r3, [r5], #4
 8009678:	4798      	blx	r3
 800967a:	3601      	adds	r6, #1
 800967c:	e7ee      	b.n	800965c <__libc_init_array+0xc>
 800967e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009682:	4798      	blx	r3
 8009684:	3601      	adds	r6, #1
 8009686:	e7f2      	b.n	800966e <__libc_init_array+0x1e>
 8009688:	0800e4bc 	.word	0x0800e4bc
 800968c:	0800e4bc 	.word	0x0800e4bc
 8009690:	0800e4bc 	.word	0x0800e4bc
 8009694:	0800e4c0 	.word	0x0800e4c0

08009698 <memset>:
 8009698:	4402      	add	r2, r0
 800969a:	4603      	mov	r3, r0
 800969c:	4293      	cmp	r3, r2
 800969e:	d100      	bne.n	80096a2 <memset+0xa>
 80096a0:	4770      	bx	lr
 80096a2:	f803 1b01 	strb.w	r1, [r3], #1
 80096a6:	e7f9      	b.n	800969c <memset+0x4>

080096a8 <__cvt>:
 80096a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ac:	ec55 4b10 	vmov	r4, r5, d0
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	460e      	mov	r6, r1
 80096b4:	4619      	mov	r1, r3
 80096b6:	462b      	mov	r3, r5
 80096b8:	bfbb      	ittet	lt
 80096ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096be:	461d      	movlt	r5, r3
 80096c0:	2300      	movge	r3, #0
 80096c2:	232d      	movlt	r3, #45	; 0x2d
 80096c4:	700b      	strb	r3, [r1, #0]
 80096c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096cc:	4691      	mov	r9, r2
 80096ce:	f023 0820 	bic.w	r8, r3, #32
 80096d2:	bfbc      	itt	lt
 80096d4:	4622      	movlt	r2, r4
 80096d6:	4614      	movlt	r4, r2
 80096d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096dc:	d005      	beq.n	80096ea <__cvt+0x42>
 80096de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096e2:	d100      	bne.n	80096e6 <__cvt+0x3e>
 80096e4:	3601      	adds	r6, #1
 80096e6:	2102      	movs	r1, #2
 80096e8:	e000      	b.n	80096ec <__cvt+0x44>
 80096ea:	2103      	movs	r1, #3
 80096ec:	ab03      	add	r3, sp, #12
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	ab02      	add	r3, sp, #8
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	ec45 4b10 	vmov	d0, r4, r5
 80096f8:	4653      	mov	r3, sl
 80096fa:	4632      	mov	r2, r6
 80096fc:	f001 fdac 	bl	800b258 <_dtoa_r>
 8009700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009704:	4607      	mov	r7, r0
 8009706:	d102      	bne.n	800970e <__cvt+0x66>
 8009708:	f019 0f01 	tst.w	r9, #1
 800970c:	d022      	beq.n	8009754 <__cvt+0xac>
 800970e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009712:	eb07 0906 	add.w	r9, r7, r6
 8009716:	d110      	bne.n	800973a <__cvt+0x92>
 8009718:	783b      	ldrb	r3, [r7, #0]
 800971a:	2b30      	cmp	r3, #48	; 0x30
 800971c:	d10a      	bne.n	8009734 <__cvt+0x8c>
 800971e:	2200      	movs	r2, #0
 8009720:	2300      	movs	r3, #0
 8009722:	4620      	mov	r0, r4
 8009724:	4629      	mov	r1, r5
 8009726:	f7f7 f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800972a:	b918      	cbnz	r0, 8009734 <__cvt+0x8c>
 800972c:	f1c6 0601 	rsb	r6, r6, #1
 8009730:	f8ca 6000 	str.w	r6, [sl]
 8009734:	f8da 3000 	ldr.w	r3, [sl]
 8009738:	4499      	add	r9, r3
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f7 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009746:	b108      	cbz	r0, 800974c <__cvt+0xa4>
 8009748:	f8cd 900c 	str.w	r9, [sp, #12]
 800974c:	2230      	movs	r2, #48	; 0x30
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	454b      	cmp	r3, r9
 8009752:	d307      	bcc.n	8009764 <__cvt+0xbc>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009758:	1bdb      	subs	r3, r3, r7
 800975a:	4638      	mov	r0, r7
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	b004      	add	sp, #16
 8009760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009764:	1c59      	adds	r1, r3, #1
 8009766:	9103      	str	r1, [sp, #12]
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e7f0      	b.n	800974e <__cvt+0xa6>

0800976c <__exponent>:
 800976c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976e:	4603      	mov	r3, r0
 8009770:	2900      	cmp	r1, #0
 8009772:	bfb8      	it	lt
 8009774:	4249      	neglt	r1, r1
 8009776:	f803 2b02 	strb.w	r2, [r3], #2
 800977a:	bfb4      	ite	lt
 800977c:	222d      	movlt	r2, #45	; 0x2d
 800977e:	222b      	movge	r2, #43	; 0x2b
 8009780:	2909      	cmp	r1, #9
 8009782:	7042      	strb	r2, [r0, #1]
 8009784:	dd2a      	ble.n	80097dc <__exponent+0x70>
 8009786:	f10d 0407 	add.w	r4, sp, #7
 800978a:	46a4      	mov	ip, r4
 800978c:	270a      	movs	r7, #10
 800978e:	46a6      	mov	lr, r4
 8009790:	460a      	mov	r2, r1
 8009792:	fb91 f6f7 	sdiv	r6, r1, r7
 8009796:	fb07 1516 	mls	r5, r7, r6, r1
 800979a:	3530      	adds	r5, #48	; 0x30
 800979c:	2a63      	cmp	r2, #99	; 0x63
 800979e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80097a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097a6:	4631      	mov	r1, r6
 80097a8:	dcf1      	bgt.n	800978e <__exponent+0x22>
 80097aa:	3130      	adds	r1, #48	; 0x30
 80097ac:	f1ae 0502 	sub.w	r5, lr, #2
 80097b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097b4:	1c44      	adds	r4, r0, #1
 80097b6:	4629      	mov	r1, r5
 80097b8:	4561      	cmp	r1, ip
 80097ba:	d30a      	bcc.n	80097d2 <__exponent+0x66>
 80097bc:	f10d 0209 	add.w	r2, sp, #9
 80097c0:	eba2 020e 	sub.w	r2, r2, lr
 80097c4:	4565      	cmp	r5, ip
 80097c6:	bf88      	it	hi
 80097c8:	2200      	movhi	r2, #0
 80097ca:	4413      	add	r3, r2
 80097cc:	1a18      	subs	r0, r3, r0
 80097ce:	b003      	add	sp, #12
 80097d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097da:	e7ed      	b.n	80097b8 <__exponent+0x4c>
 80097dc:	2330      	movs	r3, #48	; 0x30
 80097de:	3130      	adds	r1, #48	; 0x30
 80097e0:	7083      	strb	r3, [r0, #2]
 80097e2:	70c1      	strb	r1, [r0, #3]
 80097e4:	1d03      	adds	r3, r0, #4
 80097e6:	e7f1      	b.n	80097cc <__exponent+0x60>

080097e8 <_printf_float>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	ed2d 8b02 	vpush	{d8}
 80097f0:	b08d      	sub	sp, #52	; 0x34
 80097f2:	460c      	mov	r4, r1
 80097f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80097f8:	4616      	mov	r6, r2
 80097fa:	461f      	mov	r7, r3
 80097fc:	4605      	mov	r5, r0
 80097fe:	f002 fe89 	bl	800c514 <_localeconv_r>
 8009802:	f8d0 a000 	ldr.w	sl, [r0]
 8009806:	4650      	mov	r0, sl
 8009808:	f7f6 fce2 	bl	80001d0 <strlen>
 800980c:	2300      	movs	r3, #0
 800980e:	930a      	str	r3, [sp, #40]	; 0x28
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	f8d8 3000 	ldr.w	r3, [r8]
 8009818:	f894 b018 	ldrb.w	fp, [r4, #24]
 800981c:	3307      	adds	r3, #7
 800981e:	f023 0307 	bic.w	r3, r3, #7
 8009822:	f103 0208 	add.w	r2, r3, #8
 8009826:	f8c8 2000 	str.w	r2, [r8]
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009832:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800983a:	9307      	str	r3, [sp, #28]
 800983c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009840:	ee08 0a10 	vmov	s16, r0
 8009844:	4b9f      	ldr	r3, [pc, #636]	; (8009ac4 <_printf_float+0x2dc>)
 8009846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800984e:	f7f7 f96d 	bl	8000b2c <__aeabi_dcmpun>
 8009852:	bb88      	cbnz	r0, 80098b8 <_printf_float+0xd0>
 8009854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009858:	4b9a      	ldr	r3, [pc, #616]	; (8009ac4 <_printf_float+0x2dc>)
 800985a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800985e:	f7f7 f947 	bl	8000af0 <__aeabi_dcmple>
 8009862:	bb48      	cbnz	r0, 80098b8 <_printf_float+0xd0>
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7f7 f936 	bl	8000adc <__aeabi_dcmplt>
 8009870:	b110      	cbz	r0, 8009878 <_printf_float+0x90>
 8009872:	232d      	movs	r3, #45	; 0x2d
 8009874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009878:	4b93      	ldr	r3, [pc, #588]	; (8009ac8 <_printf_float+0x2e0>)
 800987a:	4894      	ldr	r0, [pc, #592]	; (8009acc <_printf_float+0x2e4>)
 800987c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009880:	bf94      	ite	ls
 8009882:	4698      	movls	r8, r3
 8009884:	4680      	movhi	r8, r0
 8009886:	2303      	movs	r3, #3
 8009888:	6123      	str	r3, [r4, #16]
 800988a:	9b05      	ldr	r3, [sp, #20]
 800988c:	f023 0204 	bic.w	r2, r3, #4
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	9700      	str	r7, [sp, #0]
 8009898:	4633      	mov	r3, r6
 800989a:	aa0b      	add	r2, sp, #44	; 0x2c
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	f000 f9d8 	bl	8009c54 <_printf_common>
 80098a4:	3001      	adds	r0, #1
 80098a6:	f040 8090 	bne.w	80099ca <_printf_float+0x1e2>
 80098aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ae:	b00d      	add	sp, #52	; 0x34
 80098b0:	ecbd 8b02 	vpop	{d8}
 80098b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b8:	4642      	mov	r2, r8
 80098ba:	464b      	mov	r3, r9
 80098bc:	4640      	mov	r0, r8
 80098be:	4649      	mov	r1, r9
 80098c0:	f7f7 f934 	bl	8000b2c <__aeabi_dcmpun>
 80098c4:	b140      	cbz	r0, 80098d8 <_printf_float+0xf0>
 80098c6:	464b      	mov	r3, r9
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfbc      	itt	lt
 80098cc:	232d      	movlt	r3, #45	; 0x2d
 80098ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098d2:	487f      	ldr	r0, [pc, #508]	; (8009ad0 <_printf_float+0x2e8>)
 80098d4:	4b7f      	ldr	r3, [pc, #508]	; (8009ad4 <_printf_float+0x2ec>)
 80098d6:	e7d1      	b.n	800987c <_printf_float+0x94>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80098de:	9206      	str	r2, [sp, #24]
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	d13f      	bne.n	8009964 <_printf_float+0x17c>
 80098e4:	2306      	movs	r3, #6
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	9b05      	ldr	r3, [sp, #20]
 80098ea:	6861      	ldr	r1, [r4, #4]
 80098ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80098f0:	2300      	movs	r3, #0
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	ab0a      	add	r3, sp, #40	; 0x28
 80098f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80098fa:	ab09      	add	r3, sp, #36	; 0x24
 80098fc:	ec49 8b10 	vmov	d0, r8, r9
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	6022      	str	r2, [r4, #0]
 8009904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009908:	4628      	mov	r0, r5
 800990a:	f7ff fecd 	bl	80096a8 <__cvt>
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009912:	2b47      	cmp	r3, #71	; 0x47
 8009914:	4680      	mov	r8, r0
 8009916:	d108      	bne.n	800992a <_printf_float+0x142>
 8009918:	1cc8      	adds	r0, r1, #3
 800991a:	db02      	blt.n	8009922 <_printf_float+0x13a>
 800991c:	6863      	ldr	r3, [r4, #4]
 800991e:	4299      	cmp	r1, r3
 8009920:	dd41      	ble.n	80099a6 <_printf_float+0x1be>
 8009922:	f1ab 0b02 	sub.w	fp, fp, #2
 8009926:	fa5f fb8b 	uxtb.w	fp, fp
 800992a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800992e:	d820      	bhi.n	8009972 <_printf_float+0x18a>
 8009930:	3901      	subs	r1, #1
 8009932:	465a      	mov	r2, fp
 8009934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009938:	9109      	str	r1, [sp, #36]	; 0x24
 800993a:	f7ff ff17 	bl	800976c <__exponent>
 800993e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009940:	1813      	adds	r3, r2, r0
 8009942:	2a01      	cmp	r2, #1
 8009944:	4681      	mov	r9, r0
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	dc02      	bgt.n	8009950 <_printf_float+0x168>
 800994a:	6822      	ldr	r2, [r4, #0]
 800994c:	07d2      	lsls	r2, r2, #31
 800994e:	d501      	bpl.n	8009954 <_printf_float+0x16c>
 8009950:	3301      	adds	r3, #1
 8009952:	6123      	str	r3, [r4, #16]
 8009954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009958:	2b00      	cmp	r3, #0
 800995a:	d09c      	beq.n	8009896 <_printf_float+0xae>
 800995c:	232d      	movs	r3, #45	; 0x2d
 800995e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009962:	e798      	b.n	8009896 <_printf_float+0xae>
 8009964:	9a06      	ldr	r2, [sp, #24]
 8009966:	2a47      	cmp	r2, #71	; 0x47
 8009968:	d1be      	bne.n	80098e8 <_printf_float+0x100>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1bc      	bne.n	80098e8 <_printf_float+0x100>
 800996e:	2301      	movs	r3, #1
 8009970:	e7b9      	b.n	80098e6 <_printf_float+0xfe>
 8009972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009976:	d118      	bne.n	80099aa <_printf_float+0x1c2>
 8009978:	2900      	cmp	r1, #0
 800997a:	6863      	ldr	r3, [r4, #4]
 800997c:	dd0b      	ble.n	8009996 <_printf_float+0x1ae>
 800997e:	6121      	str	r1, [r4, #16]
 8009980:	b913      	cbnz	r3, 8009988 <_printf_float+0x1a0>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	07d0      	lsls	r0, r2, #31
 8009986:	d502      	bpl.n	800998e <_printf_float+0x1a6>
 8009988:	3301      	adds	r3, #1
 800998a:	440b      	add	r3, r1
 800998c:	6123      	str	r3, [r4, #16]
 800998e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009990:	f04f 0900 	mov.w	r9, #0
 8009994:	e7de      	b.n	8009954 <_printf_float+0x16c>
 8009996:	b913      	cbnz	r3, 800999e <_printf_float+0x1b6>
 8009998:	6822      	ldr	r2, [r4, #0]
 800999a:	07d2      	lsls	r2, r2, #31
 800999c:	d501      	bpl.n	80099a2 <_printf_float+0x1ba>
 800999e:	3302      	adds	r3, #2
 80099a0:	e7f4      	b.n	800998c <_printf_float+0x1a4>
 80099a2:	2301      	movs	r3, #1
 80099a4:	e7f2      	b.n	800998c <_printf_float+0x1a4>
 80099a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	4299      	cmp	r1, r3
 80099ae:	db05      	blt.n	80099bc <_printf_float+0x1d4>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	6121      	str	r1, [r4, #16]
 80099b4:	07d8      	lsls	r0, r3, #31
 80099b6:	d5ea      	bpl.n	800998e <_printf_float+0x1a6>
 80099b8:	1c4b      	adds	r3, r1, #1
 80099ba:	e7e7      	b.n	800998c <_printf_float+0x1a4>
 80099bc:	2900      	cmp	r1, #0
 80099be:	bfd4      	ite	le
 80099c0:	f1c1 0202 	rsble	r2, r1, #2
 80099c4:	2201      	movgt	r2, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	e7e0      	b.n	800998c <_printf_float+0x1a4>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	055a      	lsls	r2, r3, #21
 80099ce:	d407      	bmi.n	80099e0 <_printf_float+0x1f8>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	4642      	mov	r2, r8
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	d12c      	bne.n	8009a38 <_printf_float+0x250>
 80099de:	e764      	b.n	80098aa <_printf_float+0xc2>
 80099e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099e4:	f240 80e0 	bls.w	8009ba8 <_printf_float+0x3c0>
 80099e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	f7f7 f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d034      	beq.n	8009a62 <_printf_float+0x27a>
 80099f8:	4a37      	ldr	r2, [pc, #220]	; (8009ad8 <_printf_float+0x2f0>)
 80099fa:	2301      	movs	r3, #1
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b8      	blx	r7
 8009a02:	3001      	adds	r0, #1
 8009a04:	f43f af51 	beq.w	80098aa <_printf_float+0xc2>
 8009a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	db02      	blt.n	8009a16 <_printf_float+0x22e>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	07d8      	lsls	r0, r3, #31
 8009a14:	d510      	bpl.n	8009a38 <_printf_float+0x250>
 8009a16:	ee18 3a10 	vmov	r3, s16
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af41 	beq.w	80098aa <_printf_float+0xc2>
 8009a28:	f04f 0800 	mov.w	r8, #0
 8009a2c:	f104 091a 	add.w	r9, r4, #26
 8009a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a32:	3b01      	subs	r3, #1
 8009a34:	4543      	cmp	r3, r8
 8009a36:	dc09      	bgt.n	8009a4c <_printf_float+0x264>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	079b      	lsls	r3, r3, #30
 8009a3c:	f100 8105 	bmi.w	8009c4a <_printf_float+0x462>
 8009a40:	68e0      	ldr	r0, [r4, #12]
 8009a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a44:	4298      	cmp	r0, r3
 8009a46:	bfb8      	it	lt
 8009a48:	4618      	movlt	r0, r3
 8009a4a:	e730      	b.n	80098ae <_printf_float+0xc6>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	464a      	mov	r2, r9
 8009a50:	4631      	mov	r1, r6
 8009a52:	4628      	mov	r0, r5
 8009a54:	47b8      	blx	r7
 8009a56:	3001      	adds	r0, #1
 8009a58:	f43f af27 	beq.w	80098aa <_printf_float+0xc2>
 8009a5c:	f108 0801 	add.w	r8, r8, #1
 8009a60:	e7e6      	b.n	8009a30 <_printf_float+0x248>
 8009a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	dc39      	bgt.n	8009adc <_printf_float+0x2f4>
 8009a68:	4a1b      	ldr	r2, [pc, #108]	; (8009ad8 <_printf_float+0x2f0>)
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	47b8      	blx	r7
 8009a72:	3001      	adds	r0, #1
 8009a74:	f43f af19 	beq.w	80098aa <_printf_float+0xc2>
 8009a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d102      	bne.n	8009a86 <_printf_float+0x29e>
 8009a80:	6823      	ldr	r3, [r4, #0]
 8009a82:	07d9      	lsls	r1, r3, #31
 8009a84:	d5d8      	bpl.n	8009a38 <_printf_float+0x250>
 8009a86:	ee18 3a10 	vmov	r3, s16
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	f43f af09 	beq.w	80098aa <_printf_float+0xc2>
 8009a98:	f04f 0900 	mov.w	r9, #0
 8009a9c:	f104 0a1a 	add.w	sl, r4, #26
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	425b      	negs	r3, r3
 8009aa4:	454b      	cmp	r3, r9
 8009aa6:	dc01      	bgt.n	8009aac <_printf_float+0x2c4>
 8009aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aaa:	e792      	b.n	80099d2 <_printf_float+0x1ea>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4652      	mov	r2, sl
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f aef7 	beq.w	80098aa <_printf_float+0xc2>
 8009abc:	f109 0901 	add.w	r9, r9, #1
 8009ac0:	e7ee      	b.n	8009aa0 <_printf_float+0x2b8>
 8009ac2:	bf00      	nop
 8009ac4:	7fefffff 	.word	0x7fefffff
 8009ac8:	0800e010 	.word	0x0800e010
 8009acc:	0800e014 	.word	0x0800e014
 8009ad0:	0800e01c 	.word	0x0800e01c
 8009ad4:	0800e018 	.word	0x0800e018
 8009ad8:	0800e020 	.word	0x0800e020
 8009adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	bfa8      	it	ge
 8009ae4:	461a      	movge	r2, r3
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	4691      	mov	r9, r2
 8009aea:	dc37      	bgt.n	8009b5c <_printf_float+0x374>
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af4:	f104 021a 	add.w	r2, r4, #26
 8009af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	eba3 0309 	sub.w	r3, r3, r9
 8009b00:	455b      	cmp	r3, fp
 8009b02:	dc33      	bgt.n	8009b6c <_printf_float+0x384>
 8009b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	db3b      	blt.n	8009b84 <_printf_float+0x39c>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	07da      	lsls	r2, r3, #31
 8009b10:	d438      	bmi.n	8009b84 <_printf_float+0x39c>
 8009b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b14:	9a05      	ldr	r2, [sp, #20]
 8009b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b18:	1a9a      	subs	r2, r3, r2
 8009b1a:	eba3 0901 	sub.w	r9, r3, r1
 8009b1e:	4591      	cmp	r9, r2
 8009b20:	bfa8      	it	ge
 8009b22:	4691      	movge	r9, r2
 8009b24:	f1b9 0f00 	cmp.w	r9, #0
 8009b28:	dc35      	bgt.n	8009b96 <_printf_float+0x3ae>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b32:	f104 0a1a 	add.w	sl, r4, #26
 8009b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	eba3 0309 	sub.w	r3, r3, r9
 8009b40:	4543      	cmp	r3, r8
 8009b42:	f77f af79 	ble.w	8009a38 <_printf_float+0x250>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f aeaa 	beq.w	80098aa <_printf_float+0xc2>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	e7ec      	b.n	8009b36 <_printf_float+0x34e>
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4642      	mov	r2, r8
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	d1c0      	bne.n	8009aec <_printf_float+0x304>
 8009b6a:	e69e      	b.n	80098aa <_printf_float+0xc2>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	9205      	str	r2, [sp, #20]
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f ae97 	beq.w	80098aa <_printf_float+0xc2>
 8009b7c:	9a05      	ldr	r2, [sp, #20]
 8009b7e:	f10b 0b01 	add.w	fp, fp, #1
 8009b82:	e7b9      	b.n	8009af8 <_printf_float+0x310>
 8009b84:	ee18 3a10 	vmov	r3, s16
 8009b88:	4652      	mov	r2, sl
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	d1be      	bne.n	8009b12 <_printf_float+0x32a>
 8009b94:	e689      	b.n	80098aa <_printf_float+0xc2>
 8009b96:	9a05      	ldr	r2, [sp, #20]
 8009b98:	464b      	mov	r3, r9
 8009b9a:	4442      	add	r2, r8
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d1c1      	bne.n	8009b2a <_printf_float+0x342>
 8009ba6:	e680      	b.n	80098aa <_printf_float+0xc2>
 8009ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009baa:	2a01      	cmp	r2, #1
 8009bac:	dc01      	bgt.n	8009bb2 <_printf_float+0x3ca>
 8009bae:	07db      	lsls	r3, r3, #31
 8009bb0:	d538      	bpl.n	8009c24 <_printf_float+0x43c>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	f43f ae74 	beq.w	80098aa <_printf_float+0xc2>
 8009bc2:	ee18 3a10 	vmov	r3, s16
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f ae6b 	beq.w	80098aa <_printf_float+0xc2>
 8009bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f7f6 ff74 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be0:	b9d8      	cbnz	r0, 8009c1a <_printf_float+0x432>
 8009be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be4:	f108 0201 	add.w	r2, r8, #1
 8009be8:	3b01      	subs	r3, #1
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d10e      	bne.n	8009c12 <_printf_float+0x42a>
 8009bf4:	e659      	b.n	80098aa <_printf_float+0xc2>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	4652      	mov	r2, sl
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	47b8      	blx	r7
 8009c00:	3001      	adds	r0, #1
 8009c02:	f43f ae52 	beq.w	80098aa <_printf_float+0xc2>
 8009c06:	f108 0801 	add.w	r8, r8, #1
 8009c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	4543      	cmp	r3, r8
 8009c10:	dcf1      	bgt.n	8009bf6 <_printf_float+0x40e>
 8009c12:	464b      	mov	r3, r9
 8009c14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c18:	e6dc      	b.n	80099d4 <_printf_float+0x1ec>
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	f104 0a1a 	add.w	sl, r4, #26
 8009c22:	e7f2      	b.n	8009c0a <_printf_float+0x422>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4642      	mov	r2, r8
 8009c28:	e7df      	b.n	8009bea <_printf_float+0x402>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	464a      	mov	r2, r9
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f ae38 	beq.w	80098aa <_printf_float+0xc2>
 8009c3a:	f108 0801 	add.w	r8, r8, #1
 8009c3e:	68e3      	ldr	r3, [r4, #12]
 8009c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c42:	1a5b      	subs	r3, r3, r1
 8009c44:	4543      	cmp	r3, r8
 8009c46:	dcf0      	bgt.n	8009c2a <_printf_float+0x442>
 8009c48:	e6fa      	b.n	8009a40 <_printf_float+0x258>
 8009c4a:	f04f 0800 	mov.w	r8, #0
 8009c4e:	f104 0919 	add.w	r9, r4, #25
 8009c52:	e7f4      	b.n	8009c3e <_printf_float+0x456>

08009c54 <_printf_common>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	4616      	mov	r6, r2
 8009c5a:	4699      	mov	r9, r3
 8009c5c:	688a      	ldr	r2, [r1, #8]
 8009c5e:	690b      	ldr	r3, [r1, #16]
 8009c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c64:	4293      	cmp	r3, r2
 8009c66:	bfb8      	it	lt
 8009c68:	4613      	movlt	r3, r2
 8009c6a:	6033      	str	r3, [r6, #0]
 8009c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c70:	4607      	mov	r7, r0
 8009c72:	460c      	mov	r4, r1
 8009c74:	b10a      	cbz	r2, 8009c7a <_printf_common+0x26>
 8009c76:	3301      	adds	r3, #1
 8009c78:	6033      	str	r3, [r6, #0]
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	0699      	lsls	r1, r3, #26
 8009c7e:	bf42      	ittt	mi
 8009c80:	6833      	ldrmi	r3, [r6, #0]
 8009c82:	3302      	addmi	r3, #2
 8009c84:	6033      	strmi	r3, [r6, #0]
 8009c86:	6825      	ldr	r5, [r4, #0]
 8009c88:	f015 0506 	ands.w	r5, r5, #6
 8009c8c:	d106      	bne.n	8009c9c <_printf_common+0x48>
 8009c8e:	f104 0a19 	add.w	sl, r4, #25
 8009c92:	68e3      	ldr	r3, [r4, #12]
 8009c94:	6832      	ldr	r2, [r6, #0]
 8009c96:	1a9b      	subs	r3, r3, r2
 8009c98:	42ab      	cmp	r3, r5
 8009c9a:	dc26      	bgt.n	8009cea <_printf_common+0x96>
 8009c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ca0:	1e13      	subs	r3, r2, #0
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	bf18      	it	ne
 8009ca6:	2301      	movne	r3, #1
 8009ca8:	0692      	lsls	r2, r2, #26
 8009caa:	d42b      	bmi.n	8009d04 <_printf_common+0xb0>
 8009cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4638      	mov	r0, r7
 8009cb4:	47c0      	blx	r8
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d01e      	beq.n	8009cf8 <_printf_common+0xa4>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	68e5      	ldr	r5, [r4, #12]
 8009cbe:	6832      	ldr	r2, [r6, #0]
 8009cc0:	f003 0306 	and.w	r3, r3, #6
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	bf08      	it	eq
 8009cc8:	1aad      	subeq	r5, r5, r2
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	6922      	ldr	r2, [r4, #16]
 8009cce:	bf0c      	ite	eq
 8009cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cd4:	2500      	movne	r5, #0
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	bfc4      	itt	gt
 8009cda:	1a9b      	subgt	r3, r3, r2
 8009cdc:	18ed      	addgt	r5, r5, r3
 8009cde:	2600      	movs	r6, #0
 8009ce0:	341a      	adds	r4, #26
 8009ce2:	42b5      	cmp	r5, r6
 8009ce4:	d11a      	bne.n	8009d1c <_printf_common+0xc8>
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e008      	b.n	8009cfc <_printf_common+0xa8>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4652      	mov	r2, sl
 8009cee:	4649      	mov	r1, r9
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	47c0      	blx	r8
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d103      	bne.n	8009d00 <_printf_common+0xac>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d00:	3501      	adds	r5, #1
 8009d02:	e7c6      	b.n	8009c92 <_printf_common+0x3e>
 8009d04:	18e1      	adds	r1, r4, r3
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	2030      	movs	r0, #48	; 0x30
 8009d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d0e:	4422      	add	r2, r4
 8009d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d18:	3302      	adds	r3, #2
 8009d1a:	e7c7      	b.n	8009cac <_printf_common+0x58>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4649      	mov	r1, r9
 8009d22:	4638      	mov	r0, r7
 8009d24:	47c0      	blx	r8
 8009d26:	3001      	adds	r0, #1
 8009d28:	d0e6      	beq.n	8009cf8 <_printf_common+0xa4>
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	e7d9      	b.n	8009ce2 <_printf_common+0x8e>
	...

08009d30 <_printf_i>:
 8009d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d34:	7e0f      	ldrb	r7, [r1, #24]
 8009d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d38:	2f78      	cmp	r7, #120	; 0x78
 8009d3a:	4691      	mov	r9, r2
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	460c      	mov	r4, r1
 8009d40:	469a      	mov	sl, r3
 8009d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d46:	d807      	bhi.n	8009d58 <_printf_i+0x28>
 8009d48:	2f62      	cmp	r7, #98	; 0x62
 8009d4a:	d80a      	bhi.n	8009d62 <_printf_i+0x32>
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	f000 80d8 	beq.w	8009f02 <_printf_i+0x1d2>
 8009d52:	2f58      	cmp	r7, #88	; 0x58
 8009d54:	f000 80a3 	beq.w	8009e9e <_printf_i+0x16e>
 8009d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d60:	e03a      	b.n	8009dd8 <_printf_i+0xa8>
 8009d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d66:	2b15      	cmp	r3, #21
 8009d68:	d8f6      	bhi.n	8009d58 <_printf_i+0x28>
 8009d6a:	a101      	add	r1, pc, #4	; (adr r1, 8009d70 <_printf_i+0x40>)
 8009d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d70:	08009dc9 	.word	0x08009dc9
 8009d74:	08009ddd 	.word	0x08009ddd
 8009d78:	08009d59 	.word	0x08009d59
 8009d7c:	08009d59 	.word	0x08009d59
 8009d80:	08009d59 	.word	0x08009d59
 8009d84:	08009d59 	.word	0x08009d59
 8009d88:	08009ddd 	.word	0x08009ddd
 8009d8c:	08009d59 	.word	0x08009d59
 8009d90:	08009d59 	.word	0x08009d59
 8009d94:	08009d59 	.word	0x08009d59
 8009d98:	08009d59 	.word	0x08009d59
 8009d9c:	08009ee9 	.word	0x08009ee9
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009ecb 	.word	0x08009ecb
 8009da8:	08009d59 	.word	0x08009d59
 8009dac:	08009d59 	.word	0x08009d59
 8009db0:	08009f0b 	.word	0x08009f0b
 8009db4:	08009d59 	.word	0x08009d59
 8009db8:	08009e0d 	.word	0x08009e0d
 8009dbc:	08009d59 	.word	0x08009d59
 8009dc0:	08009d59 	.word	0x08009d59
 8009dc4:	08009ed3 	.word	0x08009ed3
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	1d1a      	adds	r2, r3, #4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	602a      	str	r2, [r5, #0]
 8009dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0a3      	b.n	8009f24 <_printf_i+0x1f4>
 8009ddc:	6820      	ldr	r0, [r4, #0]
 8009dde:	6829      	ldr	r1, [r5, #0]
 8009de0:	0606      	lsls	r6, r0, #24
 8009de2:	f101 0304 	add.w	r3, r1, #4
 8009de6:	d50a      	bpl.n	8009dfe <_printf_i+0xce>
 8009de8:	680e      	ldr	r6, [r1, #0]
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	da03      	bge.n	8009df8 <_printf_i+0xc8>
 8009df0:	232d      	movs	r3, #45	; 0x2d
 8009df2:	4276      	negs	r6, r6
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df8:	485e      	ldr	r0, [pc, #376]	; (8009f74 <_printf_i+0x244>)
 8009dfa:	230a      	movs	r3, #10
 8009dfc:	e019      	b.n	8009e32 <_printf_i+0x102>
 8009dfe:	680e      	ldr	r6, [r1, #0]
 8009e00:	602b      	str	r3, [r5, #0]
 8009e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e06:	bf18      	it	ne
 8009e08:	b236      	sxthne	r6, r6
 8009e0a:	e7ef      	b.n	8009dec <_printf_i+0xbc>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	6820      	ldr	r0, [r4, #0]
 8009e10:	1d19      	adds	r1, r3, #4
 8009e12:	6029      	str	r1, [r5, #0]
 8009e14:	0601      	lsls	r1, r0, #24
 8009e16:	d501      	bpl.n	8009e1c <_printf_i+0xec>
 8009e18:	681e      	ldr	r6, [r3, #0]
 8009e1a:	e002      	b.n	8009e22 <_printf_i+0xf2>
 8009e1c:	0646      	lsls	r6, r0, #25
 8009e1e:	d5fb      	bpl.n	8009e18 <_printf_i+0xe8>
 8009e20:	881e      	ldrh	r6, [r3, #0]
 8009e22:	4854      	ldr	r0, [pc, #336]	; (8009f74 <_printf_i+0x244>)
 8009e24:	2f6f      	cmp	r7, #111	; 0x6f
 8009e26:	bf0c      	ite	eq
 8009e28:	2308      	moveq	r3, #8
 8009e2a:	230a      	movne	r3, #10
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e32:	6865      	ldr	r5, [r4, #4]
 8009e34:	60a5      	str	r5, [r4, #8]
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	bfa2      	ittt	ge
 8009e3a:	6821      	ldrge	r1, [r4, #0]
 8009e3c:	f021 0104 	bicge.w	r1, r1, #4
 8009e40:	6021      	strge	r1, [r4, #0]
 8009e42:	b90e      	cbnz	r6, 8009e48 <_printf_i+0x118>
 8009e44:	2d00      	cmp	r5, #0
 8009e46:	d04d      	beq.n	8009ee4 <_printf_i+0x1b4>
 8009e48:	4615      	mov	r5, r2
 8009e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8009e52:	5dc7      	ldrb	r7, [r0, r7]
 8009e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e58:	4637      	mov	r7, r6
 8009e5a:	42bb      	cmp	r3, r7
 8009e5c:	460e      	mov	r6, r1
 8009e5e:	d9f4      	bls.n	8009e4a <_printf_i+0x11a>
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d10b      	bne.n	8009e7c <_printf_i+0x14c>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	07de      	lsls	r6, r3, #31
 8009e68:	d508      	bpl.n	8009e7c <_printf_i+0x14c>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	6861      	ldr	r1, [r4, #4]
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	bfde      	ittt	le
 8009e72:	2330      	movle	r3, #48	; 0x30
 8009e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e7c:	1b52      	subs	r2, r2, r5
 8009e7e:	6122      	str	r2, [r4, #16]
 8009e80:	f8cd a000 	str.w	sl, [sp]
 8009e84:	464b      	mov	r3, r9
 8009e86:	aa03      	add	r2, sp, #12
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	f7ff fee2 	bl	8009c54 <_printf_common>
 8009e90:	3001      	adds	r0, #1
 8009e92:	d14c      	bne.n	8009f2e <_printf_i+0x1fe>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e98:	b004      	add	sp, #16
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	4835      	ldr	r0, [pc, #212]	; (8009f74 <_printf_i+0x244>)
 8009ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ea4:	6829      	ldr	r1, [r5, #0]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eac:	6029      	str	r1, [r5, #0]
 8009eae:	061d      	lsls	r5, r3, #24
 8009eb0:	d514      	bpl.n	8009edc <_printf_i+0x1ac>
 8009eb2:	07df      	lsls	r7, r3, #31
 8009eb4:	bf44      	itt	mi
 8009eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009eba:	6023      	strmi	r3, [r4, #0]
 8009ebc:	b91e      	cbnz	r6, 8009ec6 <_printf_i+0x196>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	f023 0320 	bic.w	r3, r3, #32
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	2310      	movs	r3, #16
 8009ec8:	e7b0      	b.n	8009e2c <_printf_i+0xfc>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	f043 0320 	orr.w	r3, r3, #32
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	2378      	movs	r3, #120	; 0x78
 8009ed4:	4828      	ldr	r0, [pc, #160]	; (8009f78 <_printf_i+0x248>)
 8009ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009eda:	e7e3      	b.n	8009ea4 <_printf_i+0x174>
 8009edc:	0659      	lsls	r1, r3, #25
 8009ede:	bf48      	it	mi
 8009ee0:	b2b6      	uxthmi	r6, r6
 8009ee2:	e7e6      	b.n	8009eb2 <_printf_i+0x182>
 8009ee4:	4615      	mov	r5, r2
 8009ee6:	e7bb      	b.n	8009e60 <_printf_i+0x130>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	6826      	ldr	r6, [r4, #0]
 8009eec:	6961      	ldr	r1, [r4, #20]
 8009eee:	1d18      	adds	r0, r3, #4
 8009ef0:	6028      	str	r0, [r5, #0]
 8009ef2:	0635      	lsls	r5, r6, #24
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	d501      	bpl.n	8009efc <_printf_i+0x1cc>
 8009ef8:	6019      	str	r1, [r3, #0]
 8009efa:	e002      	b.n	8009f02 <_printf_i+0x1d2>
 8009efc:	0670      	lsls	r0, r6, #25
 8009efe:	d5fb      	bpl.n	8009ef8 <_printf_i+0x1c8>
 8009f00:	8019      	strh	r1, [r3, #0]
 8009f02:	2300      	movs	r3, #0
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	4615      	mov	r5, r2
 8009f08:	e7ba      	b.n	8009e80 <_printf_i+0x150>
 8009f0a:	682b      	ldr	r3, [r5, #0]
 8009f0c:	1d1a      	adds	r2, r3, #4
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	681d      	ldr	r5, [r3, #0]
 8009f12:	6862      	ldr	r2, [r4, #4]
 8009f14:	2100      	movs	r1, #0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f7f6 f962 	bl	80001e0 <memchr>
 8009f1c:	b108      	cbz	r0, 8009f22 <_printf_i+0x1f2>
 8009f1e:	1b40      	subs	r0, r0, r5
 8009f20:	6060      	str	r0, [r4, #4]
 8009f22:	6863      	ldr	r3, [r4, #4]
 8009f24:	6123      	str	r3, [r4, #16]
 8009f26:	2300      	movs	r3, #0
 8009f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f2c:	e7a8      	b.n	8009e80 <_printf_i+0x150>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4649      	mov	r1, r9
 8009f34:	4640      	mov	r0, r8
 8009f36:	47d0      	blx	sl
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d0ab      	beq.n	8009e94 <_printf_i+0x164>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	079b      	lsls	r3, r3, #30
 8009f40:	d413      	bmi.n	8009f6a <_printf_i+0x23a>
 8009f42:	68e0      	ldr	r0, [r4, #12]
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	4298      	cmp	r0, r3
 8009f48:	bfb8      	it	lt
 8009f4a:	4618      	movlt	r0, r3
 8009f4c:	e7a4      	b.n	8009e98 <_printf_i+0x168>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4632      	mov	r2, r6
 8009f52:	4649      	mov	r1, r9
 8009f54:	4640      	mov	r0, r8
 8009f56:	47d0      	blx	sl
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d09b      	beq.n	8009e94 <_printf_i+0x164>
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	68e3      	ldr	r3, [r4, #12]
 8009f60:	9903      	ldr	r1, [sp, #12]
 8009f62:	1a5b      	subs	r3, r3, r1
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	dcf2      	bgt.n	8009f4e <_printf_i+0x21e>
 8009f68:	e7eb      	b.n	8009f42 <_printf_i+0x212>
 8009f6a:	2500      	movs	r5, #0
 8009f6c:	f104 0619 	add.w	r6, r4, #25
 8009f70:	e7f5      	b.n	8009f5e <_printf_i+0x22e>
 8009f72:	bf00      	nop
 8009f74:	0800e022 	.word	0x0800e022
 8009f78:	0800e033 	.word	0x0800e033

08009f7c <_scanf_float>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	b087      	sub	sp, #28
 8009f82:	4617      	mov	r7, r2
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	688b      	ldr	r3, [r1, #8]
 8009f88:	1e5a      	subs	r2, r3, #1
 8009f8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f8e:	bf83      	ittte	hi
 8009f90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f94:	195b      	addhi	r3, r3, r5
 8009f96:	9302      	strhi	r3, [sp, #8]
 8009f98:	2300      	movls	r3, #0
 8009f9a:	bf86      	itte	hi
 8009f9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fa0:	608b      	strhi	r3, [r1, #8]
 8009fa2:	9302      	strls	r3, [sp, #8]
 8009fa4:	680b      	ldr	r3, [r1, #0]
 8009fa6:	468b      	mov	fp, r1
 8009fa8:	2500      	movs	r5, #0
 8009faa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fae:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	460c      	mov	r4, r1
 8009fba:	465e      	mov	r6, fp
 8009fbc:	46aa      	mov	sl, r5
 8009fbe:	46a9      	mov	r9, r5
 8009fc0:	9501      	str	r5, [sp, #4]
 8009fc2:	68a2      	ldr	r2, [r4, #8]
 8009fc4:	b152      	cbz	r2, 8009fdc <_scanf_float+0x60>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b4e      	cmp	r3, #78	; 0x4e
 8009fcc:	d864      	bhi.n	800a098 <_scanf_float+0x11c>
 8009fce:	2b40      	cmp	r3, #64	; 0x40
 8009fd0:	d83c      	bhi.n	800a04c <_scanf_float+0xd0>
 8009fd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009fd6:	b2c8      	uxtb	r0, r1
 8009fd8:	280e      	cmp	r0, #14
 8009fda:	d93a      	bls.n	800a052 <_scanf_float+0xd6>
 8009fdc:	f1b9 0f00 	cmp.w	r9, #0
 8009fe0:	d003      	beq.n	8009fea <_scanf_float+0x6e>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009fee:	f1ba 0f01 	cmp.w	sl, #1
 8009ff2:	f200 8113 	bhi.w	800a21c <_scanf_float+0x2a0>
 8009ff6:	455e      	cmp	r6, fp
 8009ff8:	f200 8105 	bhi.w	800a206 <_scanf_float+0x28a>
 8009ffc:	2501      	movs	r5, #1
 8009ffe:	4628      	mov	r0, r5
 800a000:	b007      	add	sp, #28
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a00a:	2a0d      	cmp	r2, #13
 800a00c:	d8e6      	bhi.n	8009fdc <_scanf_float+0x60>
 800a00e:	a101      	add	r1, pc, #4	; (adr r1, 800a014 <_scanf_float+0x98>)
 800a010:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a014:	0800a153 	.word	0x0800a153
 800a018:	08009fdd 	.word	0x08009fdd
 800a01c:	08009fdd 	.word	0x08009fdd
 800a020:	08009fdd 	.word	0x08009fdd
 800a024:	0800a1b3 	.word	0x0800a1b3
 800a028:	0800a18b 	.word	0x0800a18b
 800a02c:	08009fdd 	.word	0x08009fdd
 800a030:	08009fdd 	.word	0x08009fdd
 800a034:	0800a161 	.word	0x0800a161
 800a038:	08009fdd 	.word	0x08009fdd
 800a03c:	08009fdd 	.word	0x08009fdd
 800a040:	08009fdd 	.word	0x08009fdd
 800a044:	08009fdd 	.word	0x08009fdd
 800a048:	0800a119 	.word	0x0800a119
 800a04c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a050:	e7db      	b.n	800a00a <_scanf_float+0x8e>
 800a052:	290e      	cmp	r1, #14
 800a054:	d8c2      	bhi.n	8009fdc <_scanf_float+0x60>
 800a056:	a001      	add	r0, pc, #4	; (adr r0, 800a05c <_scanf_float+0xe0>)
 800a058:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a05c:	0800a10b 	.word	0x0800a10b
 800a060:	08009fdd 	.word	0x08009fdd
 800a064:	0800a10b 	.word	0x0800a10b
 800a068:	0800a19f 	.word	0x0800a19f
 800a06c:	08009fdd 	.word	0x08009fdd
 800a070:	0800a0b9 	.word	0x0800a0b9
 800a074:	0800a0f5 	.word	0x0800a0f5
 800a078:	0800a0f5 	.word	0x0800a0f5
 800a07c:	0800a0f5 	.word	0x0800a0f5
 800a080:	0800a0f5 	.word	0x0800a0f5
 800a084:	0800a0f5 	.word	0x0800a0f5
 800a088:	0800a0f5 	.word	0x0800a0f5
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a0f5 	.word	0x0800a0f5
 800a094:	0800a0f5 	.word	0x0800a0f5
 800a098:	2b6e      	cmp	r3, #110	; 0x6e
 800a09a:	d809      	bhi.n	800a0b0 <_scanf_float+0x134>
 800a09c:	2b60      	cmp	r3, #96	; 0x60
 800a09e:	d8b2      	bhi.n	800a006 <_scanf_float+0x8a>
 800a0a0:	2b54      	cmp	r3, #84	; 0x54
 800a0a2:	d077      	beq.n	800a194 <_scanf_float+0x218>
 800a0a4:	2b59      	cmp	r3, #89	; 0x59
 800a0a6:	d199      	bne.n	8009fdc <_scanf_float+0x60>
 800a0a8:	2d07      	cmp	r5, #7
 800a0aa:	d197      	bne.n	8009fdc <_scanf_float+0x60>
 800a0ac:	2508      	movs	r5, #8
 800a0ae:	e029      	b.n	800a104 <_scanf_float+0x188>
 800a0b0:	2b74      	cmp	r3, #116	; 0x74
 800a0b2:	d06f      	beq.n	800a194 <_scanf_float+0x218>
 800a0b4:	2b79      	cmp	r3, #121	; 0x79
 800a0b6:	e7f6      	b.n	800a0a6 <_scanf_float+0x12a>
 800a0b8:	6821      	ldr	r1, [r4, #0]
 800a0ba:	05c8      	lsls	r0, r1, #23
 800a0bc:	d51a      	bpl.n	800a0f4 <_scanf_float+0x178>
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0c4:	6021      	str	r1, [r4, #0]
 800a0c6:	f109 0901 	add.w	r9, r9, #1
 800a0ca:	b11b      	cbz	r3, 800a0d4 <_scanf_float+0x158>
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	3201      	adds	r2, #1
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	60a2      	str	r2, [r4, #8]
 800a0d4:	68a3      	ldr	r3, [r4, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	60a3      	str	r3, [r4, #8]
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	6123      	str	r3, [r4, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	607b      	str	r3, [r7, #4]
 800a0e8:	f340 8084 	ble.w	800a1f4 <_scanf_float+0x278>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	603b      	str	r3, [r7, #0]
 800a0f2:	e766      	b.n	8009fc2 <_scanf_float+0x46>
 800a0f4:	eb1a 0f05 	cmn.w	sl, r5
 800a0f8:	f47f af70 	bne.w	8009fdc <_scanf_float+0x60>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a102:	6022      	str	r2, [r4, #0]
 800a104:	f806 3b01 	strb.w	r3, [r6], #1
 800a108:	e7e4      	b.n	800a0d4 <_scanf_float+0x158>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	0610      	lsls	r0, r2, #24
 800a10e:	f57f af65 	bpl.w	8009fdc <_scanf_float+0x60>
 800a112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a116:	e7f4      	b.n	800a102 <_scanf_float+0x186>
 800a118:	f1ba 0f00 	cmp.w	sl, #0
 800a11c:	d10e      	bne.n	800a13c <_scanf_float+0x1c0>
 800a11e:	f1b9 0f00 	cmp.w	r9, #0
 800a122:	d10e      	bne.n	800a142 <_scanf_float+0x1c6>
 800a124:	6822      	ldr	r2, [r4, #0]
 800a126:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a12a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a12e:	d108      	bne.n	800a142 <_scanf_float+0x1c6>
 800a130:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a134:	6022      	str	r2, [r4, #0]
 800a136:	f04f 0a01 	mov.w	sl, #1
 800a13a:	e7e3      	b.n	800a104 <_scanf_float+0x188>
 800a13c:	f1ba 0f02 	cmp.w	sl, #2
 800a140:	d055      	beq.n	800a1ee <_scanf_float+0x272>
 800a142:	2d01      	cmp	r5, #1
 800a144:	d002      	beq.n	800a14c <_scanf_float+0x1d0>
 800a146:	2d04      	cmp	r5, #4
 800a148:	f47f af48 	bne.w	8009fdc <_scanf_float+0x60>
 800a14c:	3501      	adds	r5, #1
 800a14e:	b2ed      	uxtb	r5, r5
 800a150:	e7d8      	b.n	800a104 <_scanf_float+0x188>
 800a152:	f1ba 0f01 	cmp.w	sl, #1
 800a156:	f47f af41 	bne.w	8009fdc <_scanf_float+0x60>
 800a15a:	f04f 0a02 	mov.w	sl, #2
 800a15e:	e7d1      	b.n	800a104 <_scanf_float+0x188>
 800a160:	b97d      	cbnz	r5, 800a182 <_scanf_float+0x206>
 800a162:	f1b9 0f00 	cmp.w	r9, #0
 800a166:	f47f af3c 	bne.w	8009fe2 <_scanf_float+0x66>
 800a16a:	6822      	ldr	r2, [r4, #0]
 800a16c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a170:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a174:	f47f af39 	bne.w	8009fea <_scanf_float+0x6e>
 800a178:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a17c:	6022      	str	r2, [r4, #0]
 800a17e:	2501      	movs	r5, #1
 800a180:	e7c0      	b.n	800a104 <_scanf_float+0x188>
 800a182:	2d03      	cmp	r5, #3
 800a184:	d0e2      	beq.n	800a14c <_scanf_float+0x1d0>
 800a186:	2d05      	cmp	r5, #5
 800a188:	e7de      	b.n	800a148 <_scanf_float+0x1cc>
 800a18a:	2d02      	cmp	r5, #2
 800a18c:	f47f af26 	bne.w	8009fdc <_scanf_float+0x60>
 800a190:	2503      	movs	r5, #3
 800a192:	e7b7      	b.n	800a104 <_scanf_float+0x188>
 800a194:	2d06      	cmp	r5, #6
 800a196:	f47f af21 	bne.w	8009fdc <_scanf_float+0x60>
 800a19a:	2507      	movs	r5, #7
 800a19c:	e7b2      	b.n	800a104 <_scanf_float+0x188>
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	0591      	lsls	r1, r2, #22
 800a1a2:	f57f af1b 	bpl.w	8009fdc <_scanf_float+0x60>
 800a1a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a1aa:	6022      	str	r2, [r4, #0]
 800a1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1b0:	e7a8      	b.n	800a104 <_scanf_float+0x188>
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1bc:	d006      	beq.n	800a1cc <_scanf_float+0x250>
 800a1be:	0550      	lsls	r0, r2, #21
 800a1c0:	f57f af0c 	bpl.w	8009fdc <_scanf_float+0x60>
 800a1c4:	f1b9 0f00 	cmp.w	r9, #0
 800a1c8:	f43f af0f 	beq.w	8009fea <_scanf_float+0x6e>
 800a1cc:	0591      	lsls	r1, r2, #22
 800a1ce:	bf58      	it	pl
 800a1d0:	9901      	ldrpl	r1, [sp, #4]
 800a1d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1d6:	bf58      	it	pl
 800a1d8:	eba9 0101 	subpl.w	r1, r9, r1
 800a1dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a1e0:	bf58      	it	pl
 800a1e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1e6:	6022      	str	r2, [r4, #0]
 800a1e8:	f04f 0900 	mov.w	r9, #0
 800a1ec:	e78a      	b.n	800a104 <_scanf_float+0x188>
 800a1ee:	f04f 0a03 	mov.w	sl, #3
 800a1f2:	e787      	b.n	800a104 <_scanf_float+0x188>
 800a1f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	4798      	blx	r3
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f aedf 	beq.w	8009fc2 <_scanf_float+0x46>
 800a204:	e6ea      	b.n	8009fdc <_scanf_float+0x60>
 800a206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a20a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a20e:	463a      	mov	r2, r7
 800a210:	4640      	mov	r0, r8
 800a212:	4798      	blx	r3
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	3b01      	subs	r3, #1
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	e6ec      	b.n	8009ff6 <_scanf_float+0x7a>
 800a21c:	1e6b      	subs	r3, r5, #1
 800a21e:	2b06      	cmp	r3, #6
 800a220:	d825      	bhi.n	800a26e <_scanf_float+0x2f2>
 800a222:	2d02      	cmp	r5, #2
 800a224:	d836      	bhi.n	800a294 <_scanf_float+0x318>
 800a226:	455e      	cmp	r6, fp
 800a228:	f67f aee8 	bls.w	8009ffc <_scanf_float+0x80>
 800a22c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a230:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a234:	463a      	mov	r2, r7
 800a236:	4640      	mov	r0, r8
 800a238:	4798      	blx	r3
 800a23a:	6923      	ldr	r3, [r4, #16]
 800a23c:	3b01      	subs	r3, #1
 800a23e:	6123      	str	r3, [r4, #16]
 800a240:	e7f1      	b.n	800a226 <_scanf_float+0x2aa>
 800a242:	9802      	ldr	r0, [sp, #8]
 800a244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a248:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a24c:	9002      	str	r0, [sp, #8]
 800a24e:	463a      	mov	r2, r7
 800a250:	4640      	mov	r0, r8
 800a252:	4798      	blx	r3
 800a254:	6923      	ldr	r3, [r4, #16]
 800a256:	3b01      	subs	r3, #1
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a25e:	fa5f fa8a 	uxtb.w	sl, sl
 800a262:	f1ba 0f02 	cmp.w	sl, #2
 800a266:	d1ec      	bne.n	800a242 <_scanf_float+0x2c6>
 800a268:	3d03      	subs	r5, #3
 800a26a:	b2ed      	uxtb	r5, r5
 800a26c:	1b76      	subs	r6, r6, r5
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	05da      	lsls	r2, r3, #23
 800a272:	d52f      	bpl.n	800a2d4 <_scanf_float+0x358>
 800a274:	055b      	lsls	r3, r3, #21
 800a276:	d510      	bpl.n	800a29a <_scanf_float+0x31e>
 800a278:	455e      	cmp	r6, fp
 800a27a:	f67f aebf 	bls.w	8009ffc <_scanf_float+0x80>
 800a27e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a286:	463a      	mov	r2, r7
 800a288:	4640      	mov	r0, r8
 800a28a:	4798      	blx	r3
 800a28c:	6923      	ldr	r3, [r4, #16]
 800a28e:	3b01      	subs	r3, #1
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	e7f1      	b.n	800a278 <_scanf_float+0x2fc>
 800a294:	46aa      	mov	sl, r5
 800a296:	9602      	str	r6, [sp, #8]
 800a298:	e7df      	b.n	800a25a <_scanf_float+0x2de>
 800a29a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	2965      	cmp	r1, #101	; 0x65
 800a2a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a2a6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a2aa:	6123      	str	r3, [r4, #16]
 800a2ac:	d00c      	beq.n	800a2c8 <_scanf_float+0x34c>
 800a2ae:	2945      	cmp	r1, #69	; 0x45
 800a2b0:	d00a      	beq.n	800a2c8 <_scanf_float+0x34c>
 800a2b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2b6:	463a      	mov	r2, r7
 800a2b8:	4640      	mov	r0, r8
 800a2ba:	4798      	blx	r3
 800a2bc:	6923      	ldr	r3, [r4, #16]
 800a2be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	1eb5      	subs	r5, r6, #2
 800a2c6:	6123      	str	r3, [r4, #16]
 800a2c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2cc:	463a      	mov	r2, r7
 800a2ce:	4640      	mov	r0, r8
 800a2d0:	4798      	blx	r3
 800a2d2:	462e      	mov	r6, r5
 800a2d4:	6825      	ldr	r5, [r4, #0]
 800a2d6:	f015 0510 	ands.w	r5, r5, #16
 800a2da:	d159      	bne.n	800a390 <_scanf_float+0x414>
 800a2dc:	7035      	strb	r5, [r6, #0]
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2e8:	d11b      	bne.n	800a322 <_scanf_float+0x3a6>
 800a2ea:	9b01      	ldr	r3, [sp, #4]
 800a2ec:	454b      	cmp	r3, r9
 800a2ee:	eba3 0209 	sub.w	r2, r3, r9
 800a2f2:	d123      	bne.n	800a33c <_scanf_float+0x3c0>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	4659      	mov	r1, fp
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	f000 fe97 	bl	800b02c <_strtod_r>
 800a2fe:	6822      	ldr	r2, [r4, #0]
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	f012 0f02 	tst.w	r2, #2
 800a306:	ec57 6b10 	vmov	r6, r7, d0
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	d021      	beq.n	800a352 <_scanf_float+0x3d6>
 800a30e:	9903      	ldr	r1, [sp, #12]
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	600a      	str	r2, [r1, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	e9c3 6700 	strd	r6, r7, [r3]
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60e3      	str	r3, [r4, #12]
 800a320:	e66d      	b.n	8009ffe <_scanf_float+0x82>
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0e5      	beq.n	800a2f4 <_scanf_float+0x378>
 800a328:	9905      	ldr	r1, [sp, #20]
 800a32a:	230a      	movs	r3, #10
 800a32c:	462a      	mov	r2, r5
 800a32e:	3101      	adds	r1, #1
 800a330:	4640      	mov	r0, r8
 800a332:	f000 ff03 	bl	800b13c <_strtol_r>
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	9e05      	ldr	r6, [sp, #20]
 800a33a:	1ac2      	subs	r2, r0, r3
 800a33c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a340:	429e      	cmp	r6, r3
 800a342:	bf28      	it	cs
 800a344:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a348:	4912      	ldr	r1, [pc, #72]	; (800a394 <_scanf_float+0x418>)
 800a34a:	4630      	mov	r0, r6
 800a34c:	f000 f82c 	bl	800a3a8 <siprintf>
 800a350:	e7d0      	b.n	800a2f4 <_scanf_float+0x378>
 800a352:	9903      	ldr	r1, [sp, #12]
 800a354:	f012 0f04 	tst.w	r2, #4
 800a358:	f103 0204 	add.w	r2, r3, #4
 800a35c:	600a      	str	r2, [r1, #0]
 800a35e:	d1d9      	bne.n	800a314 <_scanf_float+0x398>
 800a360:	f8d3 8000 	ldr.w	r8, [r3]
 800a364:	ee10 2a10 	vmov	r2, s0
 800a368:	ee10 0a10 	vmov	r0, s0
 800a36c:	463b      	mov	r3, r7
 800a36e:	4639      	mov	r1, r7
 800a370:	f7f6 fbdc 	bl	8000b2c <__aeabi_dcmpun>
 800a374:	b128      	cbz	r0, 800a382 <_scanf_float+0x406>
 800a376:	4808      	ldr	r0, [pc, #32]	; (800a398 <_scanf_float+0x41c>)
 800a378:	f000 f810 	bl	800a39c <nanf>
 800a37c:	ed88 0a00 	vstr	s0, [r8]
 800a380:	e7cb      	b.n	800a31a <_scanf_float+0x39e>
 800a382:	4630      	mov	r0, r6
 800a384:	4639      	mov	r1, r7
 800a386:	f7f6 fc2f 	bl	8000be8 <__aeabi_d2f>
 800a38a:	f8c8 0000 	str.w	r0, [r8]
 800a38e:	e7c4      	b.n	800a31a <_scanf_float+0x39e>
 800a390:	2500      	movs	r5, #0
 800a392:	e634      	b.n	8009ffe <_scanf_float+0x82>
 800a394:	0800e044 	.word	0x0800e044
 800a398:	0800e450 	.word	0x0800e450

0800a39c <nanf>:
 800a39c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a3a4 <nanf+0x8>
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	7fc00000 	.word	0x7fc00000

0800a3a8 <siprintf>:
 800a3a8:	b40e      	push	{r1, r2, r3}
 800a3aa:	b500      	push	{lr}
 800a3ac:	b09c      	sub	sp, #112	; 0x70
 800a3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800a3b0:	9002      	str	r0, [sp, #8]
 800a3b2:	9006      	str	r0, [sp, #24]
 800a3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b8:	4809      	ldr	r0, [pc, #36]	; (800a3e0 <siprintf+0x38>)
 800a3ba:	9107      	str	r1, [sp, #28]
 800a3bc:	9104      	str	r1, [sp, #16]
 800a3be:	4909      	ldr	r1, [pc, #36]	; (800a3e4 <siprintf+0x3c>)
 800a3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c4:	9105      	str	r1, [sp, #20]
 800a3c6:	6800      	ldr	r0, [r0, #0]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	a902      	add	r1, sp, #8
 800a3cc:	f002 fee2 	bl	800d194 <_svfiprintf_r>
 800a3d0:	9b02      	ldr	r3, [sp, #8]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	701a      	strb	r2, [r3, #0]
 800a3d6:	b01c      	add	sp, #112	; 0x70
 800a3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3dc:	b003      	add	sp, #12
 800a3de:	4770      	bx	lr
 800a3e0:	200000fc 	.word	0x200000fc
 800a3e4:	ffff0208 	.word	0xffff0208

0800a3e8 <sulp>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	ec45 4b10 	vmov	d0, r4, r5
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	f002 fc2c 	bl	800cc50 <__ulp>
 800a3f8:	ec51 0b10 	vmov	r0, r1, d0
 800a3fc:	b17e      	cbz	r6, 800a41e <sulp+0x36>
 800a3fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd09      	ble.n	800a41e <sulp+0x36>
 800a40a:	051b      	lsls	r3, r3, #20
 800a40c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a410:	2400      	movs	r4, #0
 800a412:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a416:	4622      	mov	r2, r4
 800a418:	462b      	mov	r3, r5
 800a41a:	f7f6 f8ed 	bl	80005f8 <__aeabi_dmul>
 800a41e:	bd70      	pop	{r4, r5, r6, pc}

0800a420 <_strtod_l>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b02 	vpush	{d8}
 800a428:	b09d      	sub	sp, #116	; 0x74
 800a42a:	461f      	mov	r7, r3
 800a42c:	2300      	movs	r3, #0
 800a42e:	9318      	str	r3, [sp, #96]	; 0x60
 800a430:	4ba2      	ldr	r3, [pc, #648]	; (800a6bc <_strtod_l+0x29c>)
 800a432:	9213      	str	r2, [sp, #76]	; 0x4c
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	9305      	str	r3, [sp, #20]
 800a438:	4604      	mov	r4, r0
 800a43a:	4618      	mov	r0, r3
 800a43c:	4688      	mov	r8, r1
 800a43e:	f7f5 fec7 	bl	80001d0 <strlen>
 800a442:	f04f 0a00 	mov.w	sl, #0
 800a446:	4605      	mov	r5, r0
 800a448:	f04f 0b00 	mov.w	fp, #0
 800a44c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a452:	781a      	ldrb	r2, [r3, #0]
 800a454:	2a2b      	cmp	r2, #43	; 0x2b
 800a456:	d04e      	beq.n	800a4f6 <_strtod_l+0xd6>
 800a458:	d83b      	bhi.n	800a4d2 <_strtod_l+0xb2>
 800a45a:	2a0d      	cmp	r2, #13
 800a45c:	d834      	bhi.n	800a4c8 <_strtod_l+0xa8>
 800a45e:	2a08      	cmp	r2, #8
 800a460:	d834      	bhi.n	800a4cc <_strtod_l+0xac>
 800a462:	2a00      	cmp	r2, #0
 800a464:	d03e      	beq.n	800a4e4 <_strtod_l+0xc4>
 800a466:	2300      	movs	r3, #0
 800a468:	930a      	str	r3, [sp, #40]	; 0x28
 800a46a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a46c:	7833      	ldrb	r3, [r6, #0]
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	f040 80b0 	bne.w	800a5d4 <_strtod_l+0x1b4>
 800a474:	7873      	ldrb	r3, [r6, #1]
 800a476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a47a:	2b58      	cmp	r3, #88	; 0x58
 800a47c:	d168      	bne.n	800a550 <_strtod_l+0x130>
 800a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	ab18      	add	r3, sp, #96	; 0x60
 800a484:	9702      	str	r7, [sp, #8]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	4a8d      	ldr	r2, [pc, #564]	; (800a6c0 <_strtod_l+0x2a0>)
 800a48a:	ab19      	add	r3, sp, #100	; 0x64
 800a48c:	a917      	add	r1, sp, #92	; 0x5c
 800a48e:	4620      	mov	r0, r4
 800a490:	f001 fd38 	bl	800bf04 <__gethex>
 800a494:	f010 0707 	ands.w	r7, r0, #7
 800a498:	4605      	mov	r5, r0
 800a49a:	d005      	beq.n	800a4a8 <_strtod_l+0x88>
 800a49c:	2f06      	cmp	r7, #6
 800a49e:	d12c      	bne.n	800a4fa <_strtod_l+0xda>
 800a4a0:	3601      	adds	r6, #1
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f040 8590 	bne.w	800afd0 <_strtod_l+0xbb0>
 800a4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b2:	b1eb      	cbz	r3, 800a4f0 <_strtod_l+0xd0>
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4ba:	ec43 2b10 	vmov	d0, r2, r3
 800a4be:	b01d      	add	sp, #116	; 0x74
 800a4c0:	ecbd 8b02 	vpop	{d8}
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	2a20      	cmp	r2, #32
 800a4ca:	d1cc      	bne.n	800a466 <_strtod_l+0x46>
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800a4d0:	e7be      	b.n	800a450 <_strtod_l+0x30>
 800a4d2:	2a2d      	cmp	r2, #45	; 0x2d
 800a4d4:	d1c7      	bne.n	800a466 <_strtod_l+0x46>
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	920a      	str	r2, [sp, #40]	; 0x28
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1c2      	bne.n	800a46a <_strtod_l+0x4a>
 800a4e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 856e 	bne.w	800afcc <_strtod_l+0xbac>
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	465b      	mov	r3, fp
 800a4f4:	e7e1      	b.n	800a4ba <_strtod_l+0x9a>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	e7ee      	b.n	800a4d8 <_strtod_l+0xb8>
 800a4fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a4fc:	b13a      	cbz	r2, 800a50e <_strtod_l+0xee>
 800a4fe:	2135      	movs	r1, #53	; 0x35
 800a500:	a81a      	add	r0, sp, #104	; 0x68
 800a502:	f002 fcb0 	bl	800ce66 <__copybits>
 800a506:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a508:	4620      	mov	r0, r4
 800a50a:	f002 f86f 	bl	800c5ec <_Bfree>
 800a50e:	3f01      	subs	r7, #1
 800a510:	2f04      	cmp	r7, #4
 800a512:	d806      	bhi.n	800a522 <_strtod_l+0x102>
 800a514:	e8df f007 	tbb	[pc, r7]
 800a518:	1714030a 	.word	0x1714030a
 800a51c:	0a          	.byte	0x0a
 800a51d:	00          	.byte	0x00
 800a51e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a522:	0728      	lsls	r0, r5, #28
 800a524:	d5c0      	bpl.n	800a4a8 <_strtod_l+0x88>
 800a526:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a52a:	e7bd      	b.n	800a4a8 <_strtod_l+0x88>
 800a52c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a53a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a53e:	e7f0      	b.n	800a522 <_strtod_l+0x102>
 800a540:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a6c4 <_strtod_l+0x2a4>
 800a544:	e7ed      	b.n	800a522 <_strtod_l+0x102>
 800a546:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a54a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a54e:	e7e8      	b.n	800a522 <_strtod_l+0x102>
 800a550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	9217      	str	r2, [sp, #92]	; 0x5c
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b30      	cmp	r3, #48	; 0x30
 800a55a:	d0f9      	beq.n	800a550 <_strtod_l+0x130>
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0a3      	beq.n	800a4a8 <_strtod_l+0x88>
 800a560:	2301      	movs	r3, #1
 800a562:	f04f 0900 	mov.w	r9, #0
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a56a:	9308      	str	r3, [sp, #32]
 800a56c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a570:	464f      	mov	r7, r9
 800a572:	220a      	movs	r2, #10
 800a574:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a576:	7806      	ldrb	r6, [r0, #0]
 800a578:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a57c:	b2d9      	uxtb	r1, r3
 800a57e:	2909      	cmp	r1, #9
 800a580:	d92a      	bls.n	800a5d8 <_strtod_l+0x1b8>
 800a582:	9905      	ldr	r1, [sp, #20]
 800a584:	462a      	mov	r2, r5
 800a586:	f002 ff1f 	bl	800d3c8 <strncmp>
 800a58a:	b398      	cbz	r0, 800a5f4 <_strtod_l+0x1d4>
 800a58c:	2000      	movs	r0, #0
 800a58e:	4632      	mov	r2, r6
 800a590:	463d      	mov	r5, r7
 800a592:	9005      	str	r0, [sp, #20]
 800a594:	4603      	mov	r3, r0
 800a596:	2a65      	cmp	r2, #101	; 0x65
 800a598:	d001      	beq.n	800a59e <_strtod_l+0x17e>
 800a59a:	2a45      	cmp	r2, #69	; 0x45
 800a59c:	d118      	bne.n	800a5d0 <_strtod_l+0x1b0>
 800a59e:	b91d      	cbnz	r5, 800a5a8 <_strtod_l+0x188>
 800a5a0:	9a04      	ldr	r2, [sp, #16]
 800a5a2:	4302      	orrs	r2, r0
 800a5a4:	d09e      	beq.n	800a4e4 <_strtod_l+0xc4>
 800a5a6:	2500      	movs	r5, #0
 800a5a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a5ac:	f108 0201 	add.w	r2, r8, #1
 800a5b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a5b6:	2a2b      	cmp	r2, #43	; 0x2b
 800a5b8:	d075      	beq.n	800a6a6 <_strtod_l+0x286>
 800a5ba:	2a2d      	cmp	r2, #45	; 0x2d
 800a5bc:	d07b      	beq.n	800a6b6 <_strtod_l+0x296>
 800a5be:	f04f 0c00 	mov.w	ip, #0
 800a5c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a5c6:	2909      	cmp	r1, #9
 800a5c8:	f240 8082 	bls.w	800a6d0 <_strtod_l+0x2b0>
 800a5cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	e09d      	b.n	800a710 <_strtod_l+0x2f0>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e7c4      	b.n	800a562 <_strtod_l+0x142>
 800a5d8:	2f08      	cmp	r7, #8
 800a5da:	bfd8      	it	le
 800a5dc:	9907      	ldrle	r1, [sp, #28]
 800a5de:	f100 0001 	add.w	r0, r0, #1
 800a5e2:	bfda      	itte	le
 800a5e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5e8:	9307      	strle	r3, [sp, #28]
 800a5ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a5ee:	3701      	adds	r7, #1
 800a5f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a5f2:	e7bf      	b.n	800a574 <_strtod_l+0x154>
 800a5f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f6:	195a      	adds	r2, r3, r5
 800a5f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5fa:	5d5a      	ldrb	r2, [r3, r5]
 800a5fc:	2f00      	cmp	r7, #0
 800a5fe:	d037      	beq.n	800a670 <_strtod_l+0x250>
 800a600:	9005      	str	r0, [sp, #20]
 800a602:	463d      	mov	r5, r7
 800a604:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a608:	2b09      	cmp	r3, #9
 800a60a:	d912      	bls.n	800a632 <_strtod_l+0x212>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e7c2      	b.n	800a596 <_strtod_l+0x176>
 800a610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	9217      	str	r2, [sp, #92]	; 0x5c
 800a616:	785a      	ldrb	r2, [r3, #1]
 800a618:	3001      	adds	r0, #1
 800a61a:	2a30      	cmp	r2, #48	; 0x30
 800a61c:	d0f8      	beq.n	800a610 <_strtod_l+0x1f0>
 800a61e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a622:	2b08      	cmp	r3, #8
 800a624:	f200 84d9 	bhi.w	800afda <_strtod_l+0xbba>
 800a628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a62a:	9005      	str	r0, [sp, #20]
 800a62c:	2000      	movs	r0, #0
 800a62e:	9308      	str	r3, [sp, #32]
 800a630:	4605      	mov	r5, r0
 800a632:	3a30      	subs	r2, #48	; 0x30
 800a634:	f100 0301 	add.w	r3, r0, #1
 800a638:	d014      	beq.n	800a664 <_strtod_l+0x244>
 800a63a:	9905      	ldr	r1, [sp, #20]
 800a63c:	4419      	add	r1, r3
 800a63e:	9105      	str	r1, [sp, #20]
 800a640:	462b      	mov	r3, r5
 800a642:	eb00 0e05 	add.w	lr, r0, r5
 800a646:	210a      	movs	r1, #10
 800a648:	4573      	cmp	r3, lr
 800a64a:	d113      	bne.n	800a674 <_strtod_l+0x254>
 800a64c:	182b      	adds	r3, r5, r0
 800a64e:	2b08      	cmp	r3, #8
 800a650:	f105 0501 	add.w	r5, r5, #1
 800a654:	4405      	add	r5, r0
 800a656:	dc1c      	bgt.n	800a692 <_strtod_l+0x272>
 800a658:	9907      	ldr	r1, [sp, #28]
 800a65a:	230a      	movs	r3, #10
 800a65c:	fb03 2301 	mla	r3, r3, r1, r2
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	2300      	movs	r3, #0
 800a664:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a666:	1c51      	adds	r1, r2, #1
 800a668:	9117      	str	r1, [sp, #92]	; 0x5c
 800a66a:	7852      	ldrb	r2, [r2, #1]
 800a66c:	4618      	mov	r0, r3
 800a66e:	e7c9      	b.n	800a604 <_strtod_l+0x1e4>
 800a670:	4638      	mov	r0, r7
 800a672:	e7d2      	b.n	800a61a <_strtod_l+0x1fa>
 800a674:	2b08      	cmp	r3, #8
 800a676:	dc04      	bgt.n	800a682 <_strtod_l+0x262>
 800a678:	9e07      	ldr	r6, [sp, #28]
 800a67a:	434e      	muls	r6, r1
 800a67c:	9607      	str	r6, [sp, #28]
 800a67e:	3301      	adds	r3, #1
 800a680:	e7e2      	b.n	800a648 <_strtod_l+0x228>
 800a682:	f103 0c01 	add.w	ip, r3, #1
 800a686:	f1bc 0f10 	cmp.w	ip, #16
 800a68a:	bfd8      	it	le
 800a68c:	fb01 f909 	mulle.w	r9, r1, r9
 800a690:	e7f5      	b.n	800a67e <_strtod_l+0x25e>
 800a692:	2d10      	cmp	r5, #16
 800a694:	bfdc      	itt	le
 800a696:	230a      	movle	r3, #10
 800a698:	fb03 2909 	mlale	r9, r3, r9, r2
 800a69c:	e7e1      	b.n	800a662 <_strtod_l+0x242>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9305      	str	r3, [sp, #20]
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e77c      	b.n	800a5a0 <_strtod_l+0x180>
 800a6a6:	f04f 0c00 	mov.w	ip, #0
 800a6aa:	f108 0202 	add.w	r2, r8, #2
 800a6ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a6b4:	e785      	b.n	800a5c2 <_strtod_l+0x1a2>
 800a6b6:	f04f 0c01 	mov.w	ip, #1
 800a6ba:	e7f6      	b.n	800a6aa <_strtod_l+0x28a>
 800a6bc:	0800e298 	.word	0x0800e298
 800a6c0:	0800e04c 	.word	0x0800e04c
 800a6c4:	7ff00000 	.word	0x7ff00000
 800a6c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6ca:	1c51      	adds	r1, r2, #1
 800a6cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a6ce:	7852      	ldrb	r2, [r2, #1]
 800a6d0:	2a30      	cmp	r2, #48	; 0x30
 800a6d2:	d0f9      	beq.n	800a6c8 <_strtod_l+0x2a8>
 800a6d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a6d8:	2908      	cmp	r1, #8
 800a6da:	f63f af79 	bhi.w	800a5d0 <_strtod_l+0x1b0>
 800a6de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a6e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6e4:	9206      	str	r2, [sp, #24]
 800a6e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6e8:	1c51      	adds	r1, r2, #1
 800a6ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800a6ec:	7852      	ldrb	r2, [r2, #1]
 800a6ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a6f2:	2e09      	cmp	r6, #9
 800a6f4:	d937      	bls.n	800a766 <_strtod_l+0x346>
 800a6f6:	9e06      	ldr	r6, [sp, #24]
 800a6f8:	1b89      	subs	r1, r1, r6
 800a6fa:	2908      	cmp	r1, #8
 800a6fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a700:	dc02      	bgt.n	800a708 <_strtod_l+0x2e8>
 800a702:	4576      	cmp	r6, lr
 800a704:	bfa8      	it	ge
 800a706:	4676      	movge	r6, lr
 800a708:	f1bc 0f00 	cmp.w	ip, #0
 800a70c:	d000      	beq.n	800a710 <_strtod_l+0x2f0>
 800a70e:	4276      	negs	r6, r6
 800a710:	2d00      	cmp	r5, #0
 800a712:	d14d      	bne.n	800a7b0 <_strtod_l+0x390>
 800a714:	9904      	ldr	r1, [sp, #16]
 800a716:	4301      	orrs	r1, r0
 800a718:	f47f aec6 	bne.w	800a4a8 <_strtod_l+0x88>
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f aee1 	bne.w	800a4e4 <_strtod_l+0xc4>
 800a722:	2a69      	cmp	r2, #105	; 0x69
 800a724:	d027      	beq.n	800a776 <_strtod_l+0x356>
 800a726:	dc24      	bgt.n	800a772 <_strtod_l+0x352>
 800a728:	2a49      	cmp	r2, #73	; 0x49
 800a72a:	d024      	beq.n	800a776 <_strtod_l+0x356>
 800a72c:	2a4e      	cmp	r2, #78	; 0x4e
 800a72e:	f47f aed9 	bne.w	800a4e4 <_strtod_l+0xc4>
 800a732:	499f      	ldr	r1, [pc, #636]	; (800a9b0 <_strtod_l+0x590>)
 800a734:	a817      	add	r0, sp, #92	; 0x5c
 800a736:	f001 fe3d 	bl	800c3b4 <__match>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	f43f aed2 	beq.w	800a4e4 <_strtod_l+0xc4>
 800a740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b28      	cmp	r3, #40	; 0x28
 800a746:	d12d      	bne.n	800a7a4 <_strtod_l+0x384>
 800a748:	499a      	ldr	r1, [pc, #616]	; (800a9b4 <_strtod_l+0x594>)
 800a74a:	aa1a      	add	r2, sp, #104	; 0x68
 800a74c:	a817      	add	r0, sp, #92	; 0x5c
 800a74e:	f001 fe45 	bl	800c3dc <__hexnan>
 800a752:	2805      	cmp	r0, #5
 800a754:	d126      	bne.n	800a7a4 <_strtod_l+0x384>
 800a756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a758:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a75c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a760:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a764:	e6a0      	b.n	800a4a8 <_strtod_l+0x88>
 800a766:	210a      	movs	r1, #10
 800a768:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a76c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a770:	e7b9      	b.n	800a6e6 <_strtod_l+0x2c6>
 800a772:	2a6e      	cmp	r2, #110	; 0x6e
 800a774:	e7db      	b.n	800a72e <_strtod_l+0x30e>
 800a776:	4990      	ldr	r1, [pc, #576]	; (800a9b8 <_strtod_l+0x598>)
 800a778:	a817      	add	r0, sp, #92	; 0x5c
 800a77a:	f001 fe1b 	bl	800c3b4 <__match>
 800a77e:	2800      	cmp	r0, #0
 800a780:	f43f aeb0 	beq.w	800a4e4 <_strtod_l+0xc4>
 800a784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a786:	498d      	ldr	r1, [pc, #564]	; (800a9bc <_strtod_l+0x59c>)
 800a788:	3b01      	subs	r3, #1
 800a78a:	a817      	add	r0, sp, #92	; 0x5c
 800a78c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a78e:	f001 fe11 	bl	800c3b4 <__match>
 800a792:	b910      	cbnz	r0, 800a79a <_strtod_l+0x37a>
 800a794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a796:	3301      	adds	r3, #1
 800a798:	9317      	str	r3, [sp, #92]	; 0x5c
 800a79a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a9cc <_strtod_l+0x5ac>
 800a79e:	f04f 0a00 	mov.w	sl, #0
 800a7a2:	e681      	b.n	800a4a8 <_strtod_l+0x88>
 800a7a4:	4886      	ldr	r0, [pc, #536]	; (800a9c0 <_strtod_l+0x5a0>)
 800a7a6:	f002 fdf7 	bl	800d398 <nan>
 800a7aa:	ec5b ab10 	vmov	sl, fp, d0
 800a7ae:	e67b      	b.n	800a4a8 <_strtod_l+0x88>
 800a7b0:	9b05      	ldr	r3, [sp, #20]
 800a7b2:	9807      	ldr	r0, [sp, #28]
 800a7b4:	1af3      	subs	r3, r6, r3
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	bf08      	it	eq
 800a7ba:	462f      	moveq	r7, r5
 800a7bc:	2d10      	cmp	r5, #16
 800a7be:	9306      	str	r3, [sp, #24]
 800a7c0:	46a8      	mov	r8, r5
 800a7c2:	bfa8      	it	ge
 800a7c4:	f04f 0810 	movge.w	r8, #16
 800a7c8:	f7f5 fe9c 	bl	8000504 <__aeabi_ui2d>
 800a7cc:	2d09      	cmp	r5, #9
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	dd13      	ble.n	800a7fc <_strtod_l+0x3dc>
 800a7d4:	4b7b      	ldr	r3, [pc, #492]	; (800a9c4 <_strtod_l+0x5a4>)
 800a7d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a7da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	4682      	mov	sl, r0
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	468b      	mov	fp, r1
 800a7e8:	f7f5 fe8c 	bl	8000504 <__aeabi_ui2d>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4650      	mov	r0, sl
 800a7f2:	4659      	mov	r1, fp
 800a7f4:	f7f5 fd4a 	bl	800028c <__adddf3>
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	468b      	mov	fp, r1
 800a7fc:	2d0f      	cmp	r5, #15
 800a7fe:	dc38      	bgt.n	800a872 <_strtod_l+0x452>
 800a800:	9b06      	ldr	r3, [sp, #24]
 800a802:	2b00      	cmp	r3, #0
 800a804:	f43f ae50 	beq.w	800a4a8 <_strtod_l+0x88>
 800a808:	dd24      	ble.n	800a854 <_strtod_l+0x434>
 800a80a:	2b16      	cmp	r3, #22
 800a80c:	dc0b      	bgt.n	800a826 <_strtod_l+0x406>
 800a80e:	496d      	ldr	r1, [pc, #436]	; (800a9c4 <_strtod_l+0x5a4>)
 800a810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a814:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a818:	4652      	mov	r2, sl
 800a81a:	465b      	mov	r3, fp
 800a81c:	f7f5 feec 	bl	80005f8 <__aeabi_dmul>
 800a820:	4682      	mov	sl, r0
 800a822:	468b      	mov	fp, r1
 800a824:	e640      	b.n	800a4a8 <_strtod_l+0x88>
 800a826:	9a06      	ldr	r2, [sp, #24]
 800a828:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a82c:	4293      	cmp	r3, r2
 800a82e:	db20      	blt.n	800a872 <_strtod_l+0x452>
 800a830:	4c64      	ldr	r4, [pc, #400]	; (800a9c4 <_strtod_l+0x5a4>)
 800a832:	f1c5 050f 	rsb	r5, r5, #15
 800a836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a83a:	4652      	mov	r2, sl
 800a83c:	465b      	mov	r3, fp
 800a83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a842:	f7f5 fed9 	bl	80005f8 <__aeabi_dmul>
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	1b5d      	subs	r5, r3, r5
 800a84a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a84e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a852:	e7e3      	b.n	800a81c <_strtod_l+0x3fc>
 800a854:	9b06      	ldr	r3, [sp, #24]
 800a856:	3316      	adds	r3, #22
 800a858:	db0b      	blt.n	800a872 <_strtod_l+0x452>
 800a85a:	9b05      	ldr	r3, [sp, #20]
 800a85c:	1b9e      	subs	r6, r3, r6
 800a85e:	4b59      	ldr	r3, [pc, #356]	; (800a9c4 <_strtod_l+0x5a4>)
 800a860:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a864:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a868:	4650      	mov	r0, sl
 800a86a:	4659      	mov	r1, fp
 800a86c:	f7f5 ffee 	bl	800084c <__aeabi_ddiv>
 800a870:	e7d6      	b.n	800a820 <_strtod_l+0x400>
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	eba5 0808 	sub.w	r8, r5, r8
 800a878:	4498      	add	r8, r3
 800a87a:	f1b8 0f00 	cmp.w	r8, #0
 800a87e:	dd74      	ble.n	800a96a <_strtod_l+0x54a>
 800a880:	f018 030f 	ands.w	r3, r8, #15
 800a884:	d00a      	beq.n	800a89c <_strtod_l+0x47c>
 800a886:	494f      	ldr	r1, [pc, #316]	; (800a9c4 <_strtod_l+0x5a4>)
 800a888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a88c:	4652      	mov	r2, sl
 800a88e:	465b      	mov	r3, fp
 800a890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a894:	f7f5 feb0 	bl	80005f8 <__aeabi_dmul>
 800a898:	4682      	mov	sl, r0
 800a89a:	468b      	mov	fp, r1
 800a89c:	f038 080f 	bics.w	r8, r8, #15
 800a8a0:	d04f      	beq.n	800a942 <_strtod_l+0x522>
 800a8a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a8a6:	dd22      	ble.n	800a8ee <_strtod_l+0x4ce>
 800a8a8:	2500      	movs	r5, #0
 800a8aa:	462e      	mov	r6, r5
 800a8ac:	9507      	str	r5, [sp, #28]
 800a8ae:	9505      	str	r5, [sp, #20]
 800a8b0:	2322      	movs	r3, #34	; 0x22
 800a8b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a9cc <_strtod_l+0x5ac>
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	f04f 0a00 	mov.w	sl, #0
 800a8bc:	9b07      	ldr	r3, [sp, #28]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f43f adf2 	beq.w	800a4a8 <_strtod_l+0x88>
 800a8c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f001 fe90 	bl	800c5ec <_Bfree>
 800a8cc:	9905      	ldr	r1, [sp, #20]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f001 fe8c 	bl	800c5ec <_Bfree>
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f001 fe88 	bl	800c5ec <_Bfree>
 800a8dc:	9907      	ldr	r1, [sp, #28]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f001 fe84 	bl	800c5ec <_Bfree>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f001 fe80 	bl	800c5ec <_Bfree>
 800a8ec:	e5dc      	b.n	800a4a8 <_strtod_l+0x88>
 800a8ee:	4b36      	ldr	r3, [pc, #216]	; (800a9c8 <_strtod_l+0x5a8>)
 800a8f0:	9304      	str	r3, [sp, #16]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	4659      	mov	r1, fp
 800a8fc:	4699      	mov	r9, r3
 800a8fe:	f1b8 0f01 	cmp.w	r8, #1
 800a902:	dc21      	bgt.n	800a948 <_strtod_l+0x528>
 800a904:	b10b      	cbz	r3, 800a90a <_strtod_l+0x4ea>
 800a906:	4682      	mov	sl, r0
 800a908:	468b      	mov	fp, r1
 800a90a:	4b2f      	ldr	r3, [pc, #188]	; (800a9c8 <_strtod_l+0x5a8>)
 800a90c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a910:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a914:	4652      	mov	r2, sl
 800a916:	465b      	mov	r3, fp
 800a918:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a91c:	f7f5 fe6c 	bl	80005f8 <__aeabi_dmul>
 800a920:	4b2a      	ldr	r3, [pc, #168]	; (800a9cc <_strtod_l+0x5ac>)
 800a922:	460a      	mov	r2, r1
 800a924:	400b      	ands	r3, r1
 800a926:	492a      	ldr	r1, [pc, #168]	; (800a9d0 <_strtod_l+0x5b0>)
 800a928:	428b      	cmp	r3, r1
 800a92a:	4682      	mov	sl, r0
 800a92c:	d8bc      	bhi.n	800a8a8 <_strtod_l+0x488>
 800a92e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a932:	428b      	cmp	r3, r1
 800a934:	bf86      	itte	hi
 800a936:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a9d4 <_strtod_l+0x5b4>
 800a93a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a93e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a942:	2300      	movs	r3, #0
 800a944:	9304      	str	r3, [sp, #16]
 800a946:	e084      	b.n	800aa52 <_strtod_l+0x632>
 800a948:	f018 0f01 	tst.w	r8, #1
 800a94c:	d005      	beq.n	800a95a <_strtod_l+0x53a>
 800a94e:	9b04      	ldr	r3, [sp, #16]
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fe50 	bl	80005f8 <__aeabi_dmul>
 800a958:	2301      	movs	r3, #1
 800a95a:	9a04      	ldr	r2, [sp, #16]
 800a95c:	3208      	adds	r2, #8
 800a95e:	f109 0901 	add.w	r9, r9, #1
 800a962:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a966:	9204      	str	r2, [sp, #16]
 800a968:	e7c9      	b.n	800a8fe <_strtod_l+0x4de>
 800a96a:	d0ea      	beq.n	800a942 <_strtod_l+0x522>
 800a96c:	f1c8 0800 	rsb	r8, r8, #0
 800a970:	f018 020f 	ands.w	r2, r8, #15
 800a974:	d00a      	beq.n	800a98c <_strtod_l+0x56c>
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <_strtod_l+0x5a4>)
 800a978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a97c:	4650      	mov	r0, sl
 800a97e:	4659      	mov	r1, fp
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 ff62 	bl	800084c <__aeabi_ddiv>
 800a988:	4682      	mov	sl, r0
 800a98a:	468b      	mov	fp, r1
 800a98c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a990:	d0d7      	beq.n	800a942 <_strtod_l+0x522>
 800a992:	f1b8 0f1f 	cmp.w	r8, #31
 800a996:	dd1f      	ble.n	800a9d8 <_strtod_l+0x5b8>
 800a998:	2500      	movs	r5, #0
 800a99a:	462e      	mov	r6, r5
 800a99c:	9507      	str	r5, [sp, #28]
 800a99e:	9505      	str	r5, [sp, #20]
 800a9a0:	2322      	movs	r3, #34	; 0x22
 800a9a2:	f04f 0a00 	mov.w	sl, #0
 800a9a6:	f04f 0b00 	mov.w	fp, #0
 800a9aa:	6023      	str	r3, [r4, #0]
 800a9ac:	e786      	b.n	800a8bc <_strtod_l+0x49c>
 800a9ae:	bf00      	nop
 800a9b0:	0800e01d 	.word	0x0800e01d
 800a9b4:	0800e060 	.word	0x0800e060
 800a9b8:	0800e015 	.word	0x0800e015
 800a9bc:	0800e1a4 	.word	0x0800e1a4
 800a9c0:	0800e450 	.word	0x0800e450
 800a9c4:	0800e330 	.word	0x0800e330
 800a9c8:	0800e308 	.word	0x0800e308
 800a9cc:	7ff00000 	.word	0x7ff00000
 800a9d0:	7ca00000 	.word	0x7ca00000
 800a9d4:	7fefffff 	.word	0x7fefffff
 800a9d8:	f018 0310 	ands.w	r3, r8, #16
 800a9dc:	bf18      	it	ne
 800a9de:	236a      	movne	r3, #106	; 0x6a
 800a9e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ad90 <_strtod_l+0x970>
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	4659      	mov	r1, fp
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f018 0f01 	tst.w	r8, #1
 800a9f0:	d004      	beq.n	800a9fc <_strtod_l+0x5dc>
 800a9f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a9f6:	f7f5 fdff 	bl	80005f8 <__aeabi_dmul>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aa00:	f109 0908 	add.w	r9, r9, #8
 800aa04:	d1f2      	bne.n	800a9ec <_strtod_l+0x5cc>
 800aa06:	b10b      	cbz	r3, 800aa0c <_strtod_l+0x5ec>
 800aa08:	4682      	mov	sl, r0
 800aa0a:	468b      	mov	fp, r1
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	b1c3      	cbz	r3, 800aa42 <_strtod_l+0x622>
 800aa10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	dd11      	ble.n	800aa42 <_strtod_l+0x622>
 800aa1e:	2b1f      	cmp	r3, #31
 800aa20:	f340 8124 	ble.w	800ac6c <_strtod_l+0x84c>
 800aa24:	2b34      	cmp	r3, #52	; 0x34
 800aa26:	bfde      	ittt	le
 800aa28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa2c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800aa30:	fa03 f202 	lslle.w	r2, r3, r2
 800aa34:	f04f 0a00 	mov.w	sl, #0
 800aa38:	bfcc      	ite	gt
 800aa3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aa3e:	ea02 0b01 	andle.w	fp, r2, r1
 800aa42:	2200      	movs	r2, #0
 800aa44:	2300      	movs	r3, #0
 800aa46:	4650      	mov	r0, sl
 800aa48:	4659      	mov	r1, fp
 800aa4a:	f7f6 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d1a2      	bne.n	800a998 <_strtod_l+0x578>
 800aa52:	9b07      	ldr	r3, [sp, #28]
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	9908      	ldr	r1, [sp, #32]
 800aa58:	462b      	mov	r3, r5
 800aa5a:	463a      	mov	r2, r7
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f001 fe2d 	bl	800c6bc <__s2b>
 800aa62:	9007      	str	r0, [sp, #28]
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f43f af1f 	beq.w	800a8a8 <_strtod_l+0x488>
 800aa6a:	9b05      	ldr	r3, [sp, #20]
 800aa6c:	1b9e      	subs	r6, r3, r6
 800aa6e:	9b06      	ldr	r3, [sp, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfb4      	ite	lt
 800aa74:	4633      	movlt	r3, r6
 800aa76:	2300      	movge	r3, #0
 800aa78:	930c      	str	r3, [sp, #48]	; 0x30
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	2500      	movs	r5, #0
 800aa7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa82:	9312      	str	r3, [sp, #72]	; 0x48
 800aa84:	462e      	mov	r6, r5
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	4620      	mov	r0, r4
 800aa8a:	6859      	ldr	r1, [r3, #4]
 800aa8c:	f001 fd6e 	bl	800c56c <_Balloc>
 800aa90:	9005      	str	r0, [sp, #20]
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f43f af0c 	beq.w	800a8b0 <_strtod_l+0x490>
 800aa98:	9b07      	ldr	r3, [sp, #28]
 800aa9a:	691a      	ldr	r2, [r3, #16]
 800aa9c:	3202      	adds	r2, #2
 800aa9e:	f103 010c 	add.w	r1, r3, #12
 800aaa2:	0092      	lsls	r2, r2, #2
 800aaa4:	300c      	adds	r0, #12
 800aaa6:	f001 fd53 	bl	800c550 <memcpy>
 800aaaa:	ec4b ab10 	vmov	d0, sl, fp
 800aaae:	aa1a      	add	r2, sp, #104	; 0x68
 800aab0:	a919      	add	r1, sp, #100	; 0x64
 800aab2:	4620      	mov	r0, r4
 800aab4:	f002 f948 	bl	800cd48 <__d2b>
 800aab8:	ec4b ab18 	vmov	d8, sl, fp
 800aabc:	9018      	str	r0, [sp, #96]	; 0x60
 800aabe:	2800      	cmp	r0, #0
 800aac0:	f43f aef6 	beq.w	800a8b0 <_strtod_l+0x490>
 800aac4:	2101      	movs	r1, #1
 800aac6:	4620      	mov	r0, r4
 800aac8:	f001 fe92 	bl	800c7f0 <__i2b>
 800aacc:	4606      	mov	r6, r0
 800aace:	2800      	cmp	r0, #0
 800aad0:	f43f aeee 	beq.w	800a8b0 <_strtod_l+0x490>
 800aad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aad6:	9904      	ldr	r1, [sp, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	bfab      	itete	ge
 800aadc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800aade:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800aae0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aae2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800aae6:	bfac      	ite	ge
 800aae8:	eb03 0902 	addge.w	r9, r3, r2
 800aaec:	1ad7      	sublt	r7, r2, r3
 800aaee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aaf0:	eba3 0801 	sub.w	r8, r3, r1
 800aaf4:	4490      	add	r8, r2
 800aaf6:	4ba1      	ldr	r3, [pc, #644]	; (800ad7c <_strtod_l+0x95c>)
 800aaf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800aafc:	4598      	cmp	r8, r3
 800aafe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab02:	f280 80c7 	bge.w	800ac94 <_strtod_l+0x874>
 800ab06:	eba3 0308 	sub.w	r3, r3, r8
 800ab0a:	2b1f      	cmp	r3, #31
 800ab0c:	eba2 0203 	sub.w	r2, r2, r3
 800ab10:	f04f 0101 	mov.w	r1, #1
 800ab14:	f300 80b1 	bgt.w	800ac7a <_strtod_l+0x85a>
 800ab18:	fa01 f303 	lsl.w	r3, r1, r3
 800ab1c:	930d      	str	r3, [sp, #52]	; 0x34
 800ab1e:	2300      	movs	r3, #0
 800ab20:	9308      	str	r3, [sp, #32]
 800ab22:	eb09 0802 	add.w	r8, r9, r2
 800ab26:	9b04      	ldr	r3, [sp, #16]
 800ab28:	45c1      	cmp	r9, r8
 800ab2a:	4417      	add	r7, r2
 800ab2c:	441f      	add	r7, r3
 800ab2e:	464b      	mov	r3, r9
 800ab30:	bfa8      	it	ge
 800ab32:	4643      	movge	r3, r8
 800ab34:	42bb      	cmp	r3, r7
 800ab36:	bfa8      	it	ge
 800ab38:	463b      	movge	r3, r7
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bfc2      	ittt	gt
 800ab3e:	eba8 0803 	subgt.w	r8, r8, r3
 800ab42:	1aff      	subgt	r7, r7, r3
 800ab44:	eba9 0903 	subgt.w	r9, r9, r3
 800ab48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	dd17      	ble.n	800ab7e <_strtod_l+0x75e>
 800ab4e:	4631      	mov	r1, r6
 800ab50:	461a      	mov	r2, r3
 800ab52:	4620      	mov	r0, r4
 800ab54:	f001 ff0c 	bl	800c970 <__pow5mult>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	f43f aea8 	beq.w	800a8b0 <_strtod_l+0x490>
 800ab60:	4601      	mov	r1, r0
 800ab62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab64:	4620      	mov	r0, r4
 800ab66:	f001 fe59 	bl	800c81c <__multiply>
 800ab6a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f ae9f 	beq.w	800a8b0 <_strtod_l+0x490>
 800ab72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab74:	4620      	mov	r0, r4
 800ab76:	f001 fd39 	bl	800c5ec <_Bfree>
 800ab7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7c:	9318      	str	r3, [sp, #96]	; 0x60
 800ab7e:	f1b8 0f00 	cmp.w	r8, #0
 800ab82:	f300 808c 	bgt.w	800ac9e <_strtod_l+0x87e>
 800ab86:	9b06      	ldr	r3, [sp, #24]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dd08      	ble.n	800ab9e <_strtod_l+0x77e>
 800ab8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab8e:	9905      	ldr	r1, [sp, #20]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f001 feed 	bl	800c970 <__pow5mult>
 800ab96:	9005      	str	r0, [sp, #20]
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f43f ae89 	beq.w	800a8b0 <_strtod_l+0x490>
 800ab9e:	2f00      	cmp	r7, #0
 800aba0:	dd08      	ble.n	800abb4 <_strtod_l+0x794>
 800aba2:	9905      	ldr	r1, [sp, #20]
 800aba4:	463a      	mov	r2, r7
 800aba6:	4620      	mov	r0, r4
 800aba8:	f001 ff3c 	bl	800ca24 <__lshift>
 800abac:	9005      	str	r0, [sp, #20]
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f ae7e 	beq.w	800a8b0 <_strtod_l+0x490>
 800abb4:	f1b9 0f00 	cmp.w	r9, #0
 800abb8:	dd08      	ble.n	800abcc <_strtod_l+0x7ac>
 800abba:	4631      	mov	r1, r6
 800abbc:	464a      	mov	r2, r9
 800abbe:	4620      	mov	r0, r4
 800abc0:	f001 ff30 	bl	800ca24 <__lshift>
 800abc4:	4606      	mov	r6, r0
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f43f ae72 	beq.w	800a8b0 <_strtod_l+0x490>
 800abcc:	9a05      	ldr	r2, [sp, #20]
 800abce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abd0:	4620      	mov	r0, r4
 800abd2:	f001 ffb3 	bl	800cb3c <__mdiff>
 800abd6:	4605      	mov	r5, r0
 800abd8:	2800      	cmp	r0, #0
 800abda:	f43f ae69 	beq.w	800a8b0 <_strtod_l+0x490>
 800abde:	68c3      	ldr	r3, [r0, #12]
 800abe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800abe2:	2300      	movs	r3, #0
 800abe4:	60c3      	str	r3, [r0, #12]
 800abe6:	4631      	mov	r1, r6
 800abe8:	f001 ff8c 	bl	800cb04 <__mcmp>
 800abec:	2800      	cmp	r0, #0
 800abee:	da60      	bge.n	800acb2 <_strtod_l+0x892>
 800abf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf2:	ea53 030a 	orrs.w	r3, r3, sl
 800abf6:	f040 8082 	bne.w	800acfe <_strtod_l+0x8de>
 800abfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d17d      	bne.n	800acfe <_strtod_l+0x8de>
 800ac02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac06:	0d1b      	lsrs	r3, r3, #20
 800ac08:	051b      	lsls	r3, r3, #20
 800ac0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac0e:	d976      	bls.n	800acfe <_strtod_l+0x8de>
 800ac10:	696b      	ldr	r3, [r5, #20]
 800ac12:	b913      	cbnz	r3, 800ac1a <_strtod_l+0x7fa>
 800ac14:	692b      	ldr	r3, [r5, #16]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	dd71      	ble.n	800acfe <_strtod_l+0x8de>
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f001 ff00 	bl	800ca24 <__lshift>
 800ac24:	4631      	mov	r1, r6
 800ac26:	4605      	mov	r5, r0
 800ac28:	f001 ff6c 	bl	800cb04 <__mcmp>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	dd66      	ble.n	800acfe <_strtod_l+0x8de>
 800ac30:	9904      	ldr	r1, [sp, #16]
 800ac32:	4a53      	ldr	r2, [pc, #332]	; (800ad80 <_strtod_l+0x960>)
 800ac34:	465b      	mov	r3, fp
 800ac36:	2900      	cmp	r1, #0
 800ac38:	f000 8081 	beq.w	800ad3e <_strtod_l+0x91e>
 800ac3c:	ea02 010b 	and.w	r1, r2, fp
 800ac40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac44:	dc7b      	bgt.n	800ad3e <_strtod_l+0x91e>
 800ac46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac4a:	f77f aea9 	ble.w	800a9a0 <_strtod_l+0x580>
 800ac4e:	4b4d      	ldr	r3, [pc, #308]	; (800ad84 <_strtod_l+0x964>)
 800ac50:	4650      	mov	r0, sl
 800ac52:	4659      	mov	r1, fp
 800ac54:	2200      	movs	r2, #0
 800ac56:	f7f5 fccf 	bl	80005f8 <__aeabi_dmul>
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	4303      	orrs	r3, r0
 800ac5e:	bf08      	it	eq
 800ac60:	2322      	moveq	r3, #34	; 0x22
 800ac62:	4682      	mov	sl, r0
 800ac64:	468b      	mov	fp, r1
 800ac66:	bf08      	it	eq
 800ac68:	6023      	streq	r3, [r4, #0]
 800ac6a:	e62b      	b.n	800a8c4 <_strtod_l+0x4a4>
 800ac6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac70:	fa02 f303 	lsl.w	r3, r2, r3
 800ac74:	ea03 0a0a 	and.w	sl, r3, sl
 800ac78:	e6e3      	b.n	800aa42 <_strtod_l+0x622>
 800ac7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ac7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ac82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ac86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ac8a:	fa01 f308 	lsl.w	r3, r1, r8
 800ac8e:	9308      	str	r3, [sp, #32]
 800ac90:	910d      	str	r1, [sp, #52]	; 0x34
 800ac92:	e746      	b.n	800ab22 <_strtod_l+0x702>
 800ac94:	2300      	movs	r3, #0
 800ac96:	9308      	str	r3, [sp, #32]
 800ac98:	2301      	movs	r3, #1
 800ac9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac9c:	e741      	b.n	800ab22 <_strtod_l+0x702>
 800ac9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aca0:	4642      	mov	r2, r8
 800aca2:	4620      	mov	r0, r4
 800aca4:	f001 febe 	bl	800ca24 <__lshift>
 800aca8:	9018      	str	r0, [sp, #96]	; 0x60
 800acaa:	2800      	cmp	r0, #0
 800acac:	f47f af6b 	bne.w	800ab86 <_strtod_l+0x766>
 800acb0:	e5fe      	b.n	800a8b0 <_strtod_l+0x490>
 800acb2:	465f      	mov	r7, fp
 800acb4:	d16e      	bne.n	800ad94 <_strtod_l+0x974>
 800acb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acbc:	b342      	cbz	r2, 800ad10 <_strtod_l+0x8f0>
 800acbe:	4a32      	ldr	r2, [pc, #200]	; (800ad88 <_strtod_l+0x968>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d128      	bne.n	800ad16 <_strtod_l+0x8f6>
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	4651      	mov	r1, sl
 800acc8:	b1eb      	cbz	r3, 800ad06 <_strtod_l+0x8e6>
 800acca:	4b2d      	ldr	r3, [pc, #180]	; (800ad80 <_strtod_l+0x960>)
 800accc:	403b      	ands	r3, r7
 800acce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acd6:	d819      	bhi.n	800ad0c <_strtod_l+0x8ec>
 800acd8:	0d1b      	lsrs	r3, r3, #20
 800acda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acde:	fa02 f303 	lsl.w	r3, r2, r3
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d117      	bne.n	800ad16 <_strtod_l+0x8f6>
 800ace6:	4b29      	ldr	r3, [pc, #164]	; (800ad8c <_strtod_l+0x96c>)
 800ace8:	429f      	cmp	r7, r3
 800acea:	d102      	bne.n	800acf2 <_strtod_l+0x8d2>
 800acec:	3101      	adds	r1, #1
 800acee:	f43f addf 	beq.w	800a8b0 <_strtod_l+0x490>
 800acf2:	4b23      	ldr	r3, [pc, #140]	; (800ad80 <_strtod_l+0x960>)
 800acf4:	403b      	ands	r3, r7
 800acf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800acfa:	f04f 0a00 	mov.w	sl, #0
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1a4      	bne.n	800ac4e <_strtod_l+0x82e>
 800ad04:	e5de      	b.n	800a8c4 <_strtod_l+0x4a4>
 800ad06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad0a:	e7ea      	b.n	800ace2 <_strtod_l+0x8c2>
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	e7e8      	b.n	800ace2 <_strtod_l+0x8c2>
 800ad10:	ea53 030a 	orrs.w	r3, r3, sl
 800ad14:	d08c      	beq.n	800ac30 <_strtod_l+0x810>
 800ad16:	9b08      	ldr	r3, [sp, #32]
 800ad18:	b1db      	cbz	r3, 800ad52 <_strtod_l+0x932>
 800ad1a:	423b      	tst	r3, r7
 800ad1c:	d0ef      	beq.n	800acfe <_strtod_l+0x8de>
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad20:	9a04      	ldr	r2, [sp, #16]
 800ad22:	4650      	mov	r0, sl
 800ad24:	4659      	mov	r1, fp
 800ad26:	b1c3      	cbz	r3, 800ad5a <_strtod_l+0x93a>
 800ad28:	f7ff fb5e 	bl	800a3e8 <sulp>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	ec51 0b18 	vmov	r0, r1, d8
 800ad34:	f7f5 faaa 	bl	800028c <__adddf3>
 800ad38:	4682      	mov	sl, r0
 800ad3a:	468b      	mov	fp, r1
 800ad3c:	e7df      	b.n	800acfe <_strtod_l+0x8de>
 800ad3e:	4013      	ands	r3, r2
 800ad40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad4c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ad50:	e7d5      	b.n	800acfe <_strtod_l+0x8de>
 800ad52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad54:	ea13 0f0a 	tst.w	r3, sl
 800ad58:	e7e0      	b.n	800ad1c <_strtod_l+0x8fc>
 800ad5a:	f7ff fb45 	bl	800a3e8 <sulp>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	ec51 0b18 	vmov	r0, r1, d8
 800ad66:	f7f5 fa8f 	bl	8000288 <__aeabi_dsub>
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4682      	mov	sl, r0
 800ad70:	468b      	mov	fp, r1
 800ad72:	f7f5 fea9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d0c1      	beq.n	800acfe <_strtod_l+0x8de>
 800ad7a:	e611      	b.n	800a9a0 <_strtod_l+0x580>
 800ad7c:	fffffc02 	.word	0xfffffc02
 800ad80:	7ff00000 	.word	0x7ff00000
 800ad84:	39500000 	.word	0x39500000
 800ad88:	000fffff 	.word	0x000fffff
 800ad8c:	7fefffff 	.word	0x7fefffff
 800ad90:	0800e078 	.word	0x0800e078
 800ad94:	4631      	mov	r1, r6
 800ad96:	4628      	mov	r0, r5
 800ad98:	f002 f832 	bl	800ce00 <__ratio>
 800ad9c:	ec59 8b10 	vmov	r8, r9, d0
 800ada0:	ee10 0a10 	vmov	r0, s0
 800ada4:	2200      	movs	r2, #0
 800ada6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adaa:	4649      	mov	r1, r9
 800adac:	f7f5 fea0 	bl	8000af0 <__aeabi_dcmple>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d07a      	beq.n	800aeaa <_strtod_l+0xa8a>
 800adb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d04a      	beq.n	800ae50 <_strtod_l+0xa30>
 800adba:	4b95      	ldr	r3, [pc, #596]	; (800b010 <_strtod_l+0xbf0>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b010 <_strtod_l+0xbf0>
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	4b92      	ldr	r3, [pc, #584]	; (800b014 <_strtod_l+0xbf4>)
 800adcc:	403b      	ands	r3, r7
 800adce:	930d      	str	r3, [sp, #52]	; 0x34
 800add0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800add2:	4b91      	ldr	r3, [pc, #580]	; (800b018 <_strtod_l+0xbf8>)
 800add4:	429a      	cmp	r2, r3
 800add6:	f040 80b0 	bne.w	800af3a <_strtod_l+0xb1a>
 800adda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ade2:	ec4b ab10 	vmov	d0, sl, fp
 800ade6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800adea:	f001 ff31 	bl	800cc50 <__ulp>
 800adee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adf2:	ec53 2b10 	vmov	r2, r3, d0
 800adf6:	f7f5 fbff 	bl	80005f8 <__aeabi_dmul>
 800adfa:	4652      	mov	r2, sl
 800adfc:	465b      	mov	r3, fp
 800adfe:	f7f5 fa45 	bl	800028c <__adddf3>
 800ae02:	460b      	mov	r3, r1
 800ae04:	4983      	ldr	r1, [pc, #524]	; (800b014 <_strtod_l+0xbf4>)
 800ae06:	4a85      	ldr	r2, [pc, #532]	; (800b01c <_strtod_l+0xbfc>)
 800ae08:	4019      	ands	r1, r3
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	d960      	bls.n	800aed2 <_strtod_l+0xab2>
 800ae10:	ee18 3a90 	vmov	r3, s17
 800ae14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d104      	bne.n	800ae26 <_strtod_l+0xa06>
 800ae1c:	ee18 3a10 	vmov	r3, s16
 800ae20:	3301      	adds	r3, #1
 800ae22:	f43f ad45 	beq.w	800a8b0 <_strtod_l+0x490>
 800ae26:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b028 <_strtod_l+0xc08>
 800ae2a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ae2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae30:	4620      	mov	r0, r4
 800ae32:	f001 fbdb 	bl	800c5ec <_Bfree>
 800ae36:	9905      	ldr	r1, [sp, #20]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f001 fbd7 	bl	800c5ec <_Bfree>
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4620      	mov	r0, r4
 800ae42:	f001 fbd3 	bl	800c5ec <_Bfree>
 800ae46:	4629      	mov	r1, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f001 fbcf 	bl	800c5ec <_Bfree>
 800ae4e:	e61a      	b.n	800aa86 <_strtod_l+0x666>
 800ae50:	f1ba 0f00 	cmp.w	sl, #0
 800ae54:	d11b      	bne.n	800ae8e <_strtod_l+0xa6e>
 800ae56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae5a:	b9f3      	cbnz	r3, 800ae9a <_strtod_l+0xa7a>
 800ae5c:	4b6c      	ldr	r3, [pc, #432]	; (800b010 <_strtod_l+0xbf0>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	4640      	mov	r0, r8
 800ae62:	4649      	mov	r1, r9
 800ae64:	f7f5 fe3a 	bl	8000adc <__aeabi_dcmplt>
 800ae68:	b9d0      	cbnz	r0, 800aea0 <_strtod_l+0xa80>
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	4b6c      	ldr	r3, [pc, #432]	; (800b020 <_strtod_l+0xc00>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	f7f5 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ae76:	4680      	mov	r8, r0
 800ae78:	4689      	mov	r9, r1
 800ae7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ae82:	9315      	str	r3, [sp, #84]	; 0x54
 800ae84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ae88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ae8c:	e79d      	b.n	800adca <_strtod_l+0x9aa>
 800ae8e:	f1ba 0f01 	cmp.w	sl, #1
 800ae92:	d102      	bne.n	800ae9a <_strtod_l+0xa7a>
 800ae94:	2f00      	cmp	r7, #0
 800ae96:	f43f ad83 	beq.w	800a9a0 <_strtod_l+0x580>
 800ae9a:	4b62      	ldr	r3, [pc, #392]	; (800b024 <_strtod_l+0xc04>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	e78e      	b.n	800adbe <_strtod_l+0x99e>
 800aea0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b020 <_strtod_l+0xc00>
 800aea4:	f04f 0800 	mov.w	r8, #0
 800aea8:	e7e7      	b.n	800ae7a <_strtod_l+0xa5a>
 800aeaa:	4b5d      	ldr	r3, [pc, #372]	; (800b020 <_strtod_l+0xc00>)
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb8:	4680      	mov	r8, r0
 800aeba:	4689      	mov	r9, r1
 800aebc:	b933      	cbnz	r3, 800aecc <_strtod_l+0xaac>
 800aebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aec2:	900e      	str	r0, [sp, #56]	; 0x38
 800aec4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aeca:	e7dd      	b.n	800ae88 <_strtod_l+0xa68>
 800aecc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aed0:	e7f9      	b.n	800aec6 <_strtod_l+0xaa6>
 800aed2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1a8      	bne.n	800ae2e <_strtod_l+0xa0e>
 800aedc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aee2:	0d1b      	lsrs	r3, r3, #20
 800aee4:	051b      	lsls	r3, r3, #20
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d1a1      	bne.n	800ae2e <_strtod_l+0xa0e>
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	f7f5 fee3 	bl	8000cb8 <__aeabi_d2lz>
 800aef2:	f7f5 fb53 	bl	800059c <__aeabi_l2d>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4640      	mov	r0, r8
 800aefc:	4649      	mov	r1, r9
 800aefe:	f7f5 f9c3 	bl	8000288 <__aeabi_dsub>
 800af02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af08:	ea43 030a 	orr.w	r3, r3, sl
 800af0c:	4313      	orrs	r3, r2
 800af0e:	4680      	mov	r8, r0
 800af10:	4689      	mov	r9, r1
 800af12:	d055      	beq.n	800afc0 <_strtod_l+0xba0>
 800af14:	a336      	add	r3, pc, #216	; (adr r3, 800aff0 <_strtod_l+0xbd0>)
 800af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1a:	f7f5 fddf 	bl	8000adc <__aeabi_dcmplt>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f47f acd0 	bne.w	800a8c4 <_strtod_l+0x4a4>
 800af24:	a334      	add	r3, pc, #208	; (adr r3, 800aff8 <_strtod_l+0xbd8>)
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	4640      	mov	r0, r8
 800af2c:	4649      	mov	r1, r9
 800af2e:	f7f5 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 800af32:	2800      	cmp	r0, #0
 800af34:	f43f af7b 	beq.w	800ae2e <_strtod_l+0xa0e>
 800af38:	e4c4      	b.n	800a8c4 <_strtod_l+0x4a4>
 800af3a:	9b04      	ldr	r3, [sp, #16]
 800af3c:	b333      	cbz	r3, 800af8c <_strtod_l+0xb6c>
 800af3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af44:	d822      	bhi.n	800af8c <_strtod_l+0xb6c>
 800af46:	a32e      	add	r3, pc, #184	; (adr r3, 800b000 <_strtod_l+0xbe0>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	4640      	mov	r0, r8
 800af4e:	4649      	mov	r1, r9
 800af50:	f7f5 fdce 	bl	8000af0 <__aeabi_dcmple>
 800af54:	b1a0      	cbz	r0, 800af80 <_strtod_l+0xb60>
 800af56:	4649      	mov	r1, r9
 800af58:	4640      	mov	r0, r8
 800af5a:	f7f5 fe25 	bl	8000ba8 <__aeabi_d2uiz>
 800af5e:	2801      	cmp	r0, #1
 800af60:	bf38      	it	cc
 800af62:	2001      	movcc	r0, #1
 800af64:	f7f5 face 	bl	8000504 <__aeabi_ui2d>
 800af68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6a:	4680      	mov	r8, r0
 800af6c:	4689      	mov	r9, r1
 800af6e:	bb23      	cbnz	r3, 800afba <_strtod_l+0xb9a>
 800af70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af74:	9010      	str	r0, [sp, #64]	; 0x40
 800af76:	9311      	str	r3, [sp, #68]	; 0x44
 800af78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af88:	1a9b      	subs	r3, r3, r2
 800af8a:	9309      	str	r3, [sp, #36]	; 0x24
 800af8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af90:	eeb0 0a48 	vmov.f32	s0, s16
 800af94:	eef0 0a68 	vmov.f32	s1, s17
 800af98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af9c:	f001 fe58 	bl	800cc50 <__ulp>
 800afa0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afa4:	ec53 2b10 	vmov	r2, r3, d0
 800afa8:	f7f5 fb26 	bl	80005f8 <__aeabi_dmul>
 800afac:	ec53 2b18 	vmov	r2, r3, d8
 800afb0:	f7f5 f96c 	bl	800028c <__adddf3>
 800afb4:	4682      	mov	sl, r0
 800afb6:	468b      	mov	fp, r1
 800afb8:	e78d      	b.n	800aed6 <_strtod_l+0xab6>
 800afba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800afbe:	e7db      	b.n	800af78 <_strtod_l+0xb58>
 800afc0:	a311      	add	r3, pc, #68	; (adr r3, 800b008 <_strtod_l+0xbe8>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 fd89 	bl	8000adc <__aeabi_dcmplt>
 800afca:	e7b2      	b.n	800af32 <_strtod_l+0xb12>
 800afcc:	2300      	movs	r3, #0
 800afce:	930a      	str	r3, [sp, #40]	; 0x28
 800afd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	f7ff ba6b 	b.w	800a4b0 <_strtod_l+0x90>
 800afda:	2a65      	cmp	r2, #101	; 0x65
 800afdc:	f43f ab5f 	beq.w	800a69e <_strtod_l+0x27e>
 800afe0:	2a45      	cmp	r2, #69	; 0x45
 800afe2:	f43f ab5c 	beq.w	800a69e <_strtod_l+0x27e>
 800afe6:	2301      	movs	r3, #1
 800afe8:	f7ff bb94 	b.w	800a714 <_strtod_l+0x2f4>
 800afec:	f3af 8000 	nop.w
 800aff0:	94a03595 	.word	0x94a03595
 800aff4:	3fdfffff 	.word	0x3fdfffff
 800aff8:	35afe535 	.word	0x35afe535
 800affc:	3fe00000 	.word	0x3fe00000
 800b000:	ffc00000 	.word	0xffc00000
 800b004:	41dfffff 	.word	0x41dfffff
 800b008:	94a03595 	.word	0x94a03595
 800b00c:	3fcfffff 	.word	0x3fcfffff
 800b010:	3ff00000 	.word	0x3ff00000
 800b014:	7ff00000 	.word	0x7ff00000
 800b018:	7fe00000 	.word	0x7fe00000
 800b01c:	7c9fffff 	.word	0x7c9fffff
 800b020:	3fe00000 	.word	0x3fe00000
 800b024:	bff00000 	.word	0xbff00000
 800b028:	7fefffff 	.word	0x7fefffff

0800b02c <_strtod_r>:
 800b02c:	4b01      	ldr	r3, [pc, #4]	; (800b034 <_strtod_r+0x8>)
 800b02e:	f7ff b9f7 	b.w	800a420 <_strtod_l>
 800b032:	bf00      	nop
 800b034:	20000164 	.word	0x20000164

0800b038 <_strtol_l.constprop.0>:
 800b038:	2b01      	cmp	r3, #1
 800b03a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b03e:	d001      	beq.n	800b044 <_strtol_l.constprop.0+0xc>
 800b040:	2b24      	cmp	r3, #36	; 0x24
 800b042:	d906      	bls.n	800b052 <_strtol_l.constprop.0+0x1a>
 800b044:	f7fe fafe 	bl	8009644 <__errno>
 800b048:	2316      	movs	r3, #22
 800b04a:	6003      	str	r3, [r0, #0]
 800b04c:	2000      	movs	r0, #0
 800b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b052:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b138 <_strtol_l.constprop.0+0x100>
 800b056:	460d      	mov	r5, r1
 800b058:	462e      	mov	r6, r5
 800b05a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b05e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b062:	f017 0708 	ands.w	r7, r7, #8
 800b066:	d1f7      	bne.n	800b058 <_strtol_l.constprop.0+0x20>
 800b068:	2c2d      	cmp	r4, #45	; 0x2d
 800b06a:	d132      	bne.n	800b0d2 <_strtol_l.constprop.0+0x9a>
 800b06c:	782c      	ldrb	r4, [r5, #0]
 800b06e:	2701      	movs	r7, #1
 800b070:	1cb5      	adds	r5, r6, #2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d05b      	beq.n	800b12e <_strtol_l.constprop.0+0xf6>
 800b076:	2b10      	cmp	r3, #16
 800b078:	d109      	bne.n	800b08e <_strtol_l.constprop.0+0x56>
 800b07a:	2c30      	cmp	r4, #48	; 0x30
 800b07c:	d107      	bne.n	800b08e <_strtol_l.constprop.0+0x56>
 800b07e:	782c      	ldrb	r4, [r5, #0]
 800b080:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b084:	2c58      	cmp	r4, #88	; 0x58
 800b086:	d14d      	bne.n	800b124 <_strtol_l.constprop.0+0xec>
 800b088:	786c      	ldrb	r4, [r5, #1]
 800b08a:	2310      	movs	r3, #16
 800b08c:	3502      	adds	r5, #2
 800b08e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b092:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b096:	f04f 0c00 	mov.w	ip, #0
 800b09a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b09e:	4666      	mov	r6, ip
 800b0a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b0a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b0a8:	f1be 0f09 	cmp.w	lr, #9
 800b0ac:	d816      	bhi.n	800b0dc <_strtol_l.constprop.0+0xa4>
 800b0ae:	4674      	mov	r4, lr
 800b0b0:	42a3      	cmp	r3, r4
 800b0b2:	dd24      	ble.n	800b0fe <_strtol_l.constprop.0+0xc6>
 800b0b4:	f1bc 0f00 	cmp.w	ip, #0
 800b0b8:	db1e      	blt.n	800b0f8 <_strtol_l.constprop.0+0xc0>
 800b0ba:	45b1      	cmp	r9, r6
 800b0bc:	d31c      	bcc.n	800b0f8 <_strtol_l.constprop.0+0xc0>
 800b0be:	d101      	bne.n	800b0c4 <_strtol_l.constprop.0+0x8c>
 800b0c0:	45a2      	cmp	sl, r4
 800b0c2:	db19      	blt.n	800b0f8 <_strtol_l.constprop.0+0xc0>
 800b0c4:	fb06 4603 	mla	r6, r6, r3, r4
 800b0c8:	f04f 0c01 	mov.w	ip, #1
 800b0cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0d0:	e7e8      	b.n	800b0a4 <_strtol_l.constprop.0+0x6c>
 800b0d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b0d4:	bf04      	itt	eq
 800b0d6:	782c      	ldrbeq	r4, [r5, #0]
 800b0d8:	1cb5      	addeq	r5, r6, #2
 800b0da:	e7ca      	b.n	800b072 <_strtol_l.constprop.0+0x3a>
 800b0dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b0e0:	f1be 0f19 	cmp.w	lr, #25
 800b0e4:	d801      	bhi.n	800b0ea <_strtol_l.constprop.0+0xb2>
 800b0e6:	3c37      	subs	r4, #55	; 0x37
 800b0e8:	e7e2      	b.n	800b0b0 <_strtol_l.constprop.0+0x78>
 800b0ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b0ee:	f1be 0f19 	cmp.w	lr, #25
 800b0f2:	d804      	bhi.n	800b0fe <_strtol_l.constprop.0+0xc6>
 800b0f4:	3c57      	subs	r4, #87	; 0x57
 800b0f6:	e7db      	b.n	800b0b0 <_strtol_l.constprop.0+0x78>
 800b0f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b0fc:	e7e6      	b.n	800b0cc <_strtol_l.constprop.0+0x94>
 800b0fe:	f1bc 0f00 	cmp.w	ip, #0
 800b102:	da05      	bge.n	800b110 <_strtol_l.constprop.0+0xd8>
 800b104:	2322      	movs	r3, #34	; 0x22
 800b106:	6003      	str	r3, [r0, #0]
 800b108:	4646      	mov	r6, r8
 800b10a:	b942      	cbnz	r2, 800b11e <_strtol_l.constprop.0+0xe6>
 800b10c:	4630      	mov	r0, r6
 800b10e:	e79e      	b.n	800b04e <_strtol_l.constprop.0+0x16>
 800b110:	b107      	cbz	r7, 800b114 <_strtol_l.constprop.0+0xdc>
 800b112:	4276      	negs	r6, r6
 800b114:	2a00      	cmp	r2, #0
 800b116:	d0f9      	beq.n	800b10c <_strtol_l.constprop.0+0xd4>
 800b118:	f1bc 0f00 	cmp.w	ip, #0
 800b11c:	d000      	beq.n	800b120 <_strtol_l.constprop.0+0xe8>
 800b11e:	1e69      	subs	r1, r5, #1
 800b120:	6011      	str	r1, [r2, #0]
 800b122:	e7f3      	b.n	800b10c <_strtol_l.constprop.0+0xd4>
 800b124:	2430      	movs	r4, #48	; 0x30
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1b1      	bne.n	800b08e <_strtol_l.constprop.0+0x56>
 800b12a:	2308      	movs	r3, #8
 800b12c:	e7af      	b.n	800b08e <_strtol_l.constprop.0+0x56>
 800b12e:	2c30      	cmp	r4, #48	; 0x30
 800b130:	d0a5      	beq.n	800b07e <_strtol_l.constprop.0+0x46>
 800b132:	230a      	movs	r3, #10
 800b134:	e7ab      	b.n	800b08e <_strtol_l.constprop.0+0x56>
 800b136:	bf00      	nop
 800b138:	0800e0a1 	.word	0x0800e0a1

0800b13c <_strtol_r>:
 800b13c:	f7ff bf7c 	b.w	800b038 <_strtol_l.constprop.0>

0800b140 <quorem>:
 800b140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	6903      	ldr	r3, [r0, #16]
 800b146:	690c      	ldr	r4, [r1, #16]
 800b148:	42a3      	cmp	r3, r4
 800b14a:	4607      	mov	r7, r0
 800b14c:	f2c0 8081 	blt.w	800b252 <quorem+0x112>
 800b150:	3c01      	subs	r4, #1
 800b152:	f101 0814 	add.w	r8, r1, #20
 800b156:	f100 0514 	add.w	r5, r0, #20
 800b15a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b164:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b168:	3301      	adds	r3, #1
 800b16a:	429a      	cmp	r2, r3
 800b16c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b170:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b174:	fbb2 f6f3 	udiv	r6, r2, r3
 800b178:	d331      	bcc.n	800b1de <quorem+0x9e>
 800b17a:	f04f 0e00 	mov.w	lr, #0
 800b17e:	4640      	mov	r0, r8
 800b180:	46ac      	mov	ip, r5
 800b182:	46f2      	mov	sl, lr
 800b184:	f850 2b04 	ldr.w	r2, [r0], #4
 800b188:	b293      	uxth	r3, r2
 800b18a:	fb06 e303 	mla	r3, r6, r3, lr
 800b18e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b192:	b29b      	uxth	r3, r3
 800b194:	ebaa 0303 	sub.w	r3, sl, r3
 800b198:	f8dc a000 	ldr.w	sl, [ip]
 800b19c:	0c12      	lsrs	r2, r2, #16
 800b19e:	fa13 f38a 	uxtah	r3, r3, sl
 800b1a2:	fb06 e202 	mla	r2, r6, r2, lr
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	9b00      	ldr	r3, [sp, #0]
 800b1aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1ae:	b292      	uxth	r2, r2
 800b1b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b1b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1bc:	4581      	cmp	r9, r0
 800b1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b1c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1ca:	d2db      	bcs.n	800b184 <quorem+0x44>
 800b1cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b1d0:	b92b      	cbnz	r3, 800b1de <quorem+0x9e>
 800b1d2:	9b01      	ldr	r3, [sp, #4]
 800b1d4:	3b04      	subs	r3, #4
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	461a      	mov	r2, r3
 800b1da:	d32e      	bcc.n	800b23a <quorem+0xfa>
 800b1dc:	613c      	str	r4, [r7, #16]
 800b1de:	4638      	mov	r0, r7
 800b1e0:	f001 fc90 	bl	800cb04 <__mcmp>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	db24      	blt.n	800b232 <quorem+0xf2>
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f04f 0c00 	mov.w	ip, #0
 800b1f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1f4:	f8d0 e000 	ldr.w	lr, [r0]
 800b1f8:	b293      	uxth	r3, r2
 800b1fa:	ebac 0303 	sub.w	r3, ip, r3
 800b1fe:	0c12      	lsrs	r2, r2, #16
 800b200:	fa13 f38e 	uxtah	r3, r3, lr
 800b204:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b212:	45c1      	cmp	r9, r8
 800b214:	f840 3b04 	str.w	r3, [r0], #4
 800b218:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b21c:	d2e8      	bcs.n	800b1f0 <quorem+0xb0>
 800b21e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b226:	b922      	cbnz	r2, 800b232 <quorem+0xf2>
 800b228:	3b04      	subs	r3, #4
 800b22a:	429d      	cmp	r5, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	d30a      	bcc.n	800b246 <quorem+0x106>
 800b230:	613c      	str	r4, [r7, #16]
 800b232:	4630      	mov	r0, r6
 800b234:	b003      	add	sp, #12
 800b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23a:	6812      	ldr	r2, [r2, #0]
 800b23c:	3b04      	subs	r3, #4
 800b23e:	2a00      	cmp	r2, #0
 800b240:	d1cc      	bne.n	800b1dc <quorem+0x9c>
 800b242:	3c01      	subs	r4, #1
 800b244:	e7c7      	b.n	800b1d6 <quorem+0x96>
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	3b04      	subs	r3, #4
 800b24a:	2a00      	cmp	r2, #0
 800b24c:	d1f0      	bne.n	800b230 <quorem+0xf0>
 800b24e:	3c01      	subs	r4, #1
 800b250:	e7eb      	b.n	800b22a <quorem+0xea>
 800b252:	2000      	movs	r0, #0
 800b254:	e7ee      	b.n	800b234 <quorem+0xf4>
	...

0800b258 <_dtoa_r>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	ed2d 8b04 	vpush	{d8-d9}
 800b260:	ec57 6b10 	vmov	r6, r7, d0
 800b264:	b093      	sub	sp, #76	; 0x4c
 800b266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b268:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b26c:	9106      	str	r1, [sp, #24]
 800b26e:	ee10 aa10 	vmov	sl, s0
 800b272:	4604      	mov	r4, r0
 800b274:	9209      	str	r2, [sp, #36]	; 0x24
 800b276:	930c      	str	r3, [sp, #48]	; 0x30
 800b278:	46bb      	mov	fp, r7
 800b27a:	b975      	cbnz	r5, 800b29a <_dtoa_r+0x42>
 800b27c:	2010      	movs	r0, #16
 800b27e:	f001 f94d 	bl	800c51c <malloc>
 800b282:	4602      	mov	r2, r0
 800b284:	6260      	str	r0, [r4, #36]	; 0x24
 800b286:	b920      	cbnz	r0, 800b292 <_dtoa_r+0x3a>
 800b288:	4ba7      	ldr	r3, [pc, #668]	; (800b528 <_dtoa_r+0x2d0>)
 800b28a:	21ea      	movs	r1, #234	; 0xea
 800b28c:	48a7      	ldr	r0, [pc, #668]	; (800b52c <_dtoa_r+0x2d4>)
 800b28e:	f002 f8bd 	bl	800d40c <__assert_func>
 800b292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b296:	6005      	str	r5, [r0, #0]
 800b298:	60c5      	str	r5, [r0, #12]
 800b29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b29c:	6819      	ldr	r1, [r3, #0]
 800b29e:	b151      	cbz	r1, 800b2b6 <_dtoa_r+0x5e>
 800b2a0:	685a      	ldr	r2, [r3, #4]
 800b2a2:	604a      	str	r2, [r1, #4]
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4093      	lsls	r3, r2
 800b2a8:	608b      	str	r3, [r1, #8]
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f001 f99e 	bl	800c5ec <_Bfree>
 800b2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	1e3b      	subs	r3, r7, #0
 800b2b8:	bfaa      	itet	ge
 800b2ba:	2300      	movge	r3, #0
 800b2bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b2c0:	f8c8 3000 	strge.w	r3, [r8]
 800b2c4:	4b9a      	ldr	r3, [pc, #616]	; (800b530 <_dtoa_r+0x2d8>)
 800b2c6:	bfbc      	itt	lt
 800b2c8:	2201      	movlt	r2, #1
 800b2ca:	f8c8 2000 	strlt.w	r2, [r8]
 800b2ce:	ea33 030b 	bics.w	r3, r3, fp
 800b2d2:	d11b      	bne.n	800b30c <_dtoa_r+0xb4>
 800b2d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b2da:	6013      	str	r3, [r2, #0]
 800b2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e0:	4333      	orrs	r3, r6
 800b2e2:	f000 8592 	beq.w	800be0a <_dtoa_r+0xbb2>
 800b2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2e8:	b963      	cbnz	r3, 800b304 <_dtoa_r+0xac>
 800b2ea:	4b92      	ldr	r3, [pc, #584]	; (800b534 <_dtoa_r+0x2dc>)
 800b2ec:	e022      	b.n	800b334 <_dtoa_r+0xdc>
 800b2ee:	4b92      	ldr	r3, [pc, #584]	; (800b538 <_dtoa_r+0x2e0>)
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	b013      	add	sp, #76	; 0x4c
 800b2fc:	ecbd 8b04 	vpop	{d8-d9}
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	4b8b      	ldr	r3, [pc, #556]	; (800b534 <_dtoa_r+0x2dc>)
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	3303      	adds	r3, #3
 800b30a:	e7f3      	b.n	800b2f4 <_dtoa_r+0x9c>
 800b30c:	2200      	movs	r2, #0
 800b30e:	2300      	movs	r3, #0
 800b310:	4650      	mov	r0, sl
 800b312:	4659      	mov	r1, fp
 800b314:	f7f5 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b318:	ec4b ab19 	vmov	d9, sl, fp
 800b31c:	4680      	mov	r8, r0
 800b31e:	b158      	cbz	r0, 800b338 <_dtoa_r+0xe0>
 800b320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b322:	2301      	movs	r3, #1
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 856b 	beq.w	800be04 <_dtoa_r+0xbac>
 800b32e:	4883      	ldr	r0, [pc, #524]	; (800b53c <_dtoa_r+0x2e4>)
 800b330:	6018      	str	r0, [r3, #0]
 800b332:	1e43      	subs	r3, r0, #1
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	e7df      	b.n	800b2f8 <_dtoa_r+0xa0>
 800b338:	ec4b ab10 	vmov	d0, sl, fp
 800b33c:	aa10      	add	r2, sp, #64	; 0x40
 800b33e:	a911      	add	r1, sp, #68	; 0x44
 800b340:	4620      	mov	r0, r4
 800b342:	f001 fd01 	bl	800cd48 <__d2b>
 800b346:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b34a:	ee08 0a10 	vmov	s16, r0
 800b34e:	2d00      	cmp	r5, #0
 800b350:	f000 8084 	beq.w	800b45c <_dtoa_r+0x204>
 800b354:	ee19 3a90 	vmov	r3, s19
 800b358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b35c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b360:	4656      	mov	r6, sl
 800b362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b36a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b36e:	4b74      	ldr	r3, [pc, #464]	; (800b540 <_dtoa_r+0x2e8>)
 800b370:	2200      	movs	r2, #0
 800b372:	4630      	mov	r0, r6
 800b374:	4639      	mov	r1, r7
 800b376:	f7f4 ff87 	bl	8000288 <__aeabi_dsub>
 800b37a:	a365      	add	r3, pc, #404	; (adr r3, 800b510 <_dtoa_r+0x2b8>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	a364      	add	r3, pc, #400	; (adr r3, 800b518 <_dtoa_r+0x2c0>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff7f 	bl	800028c <__adddf3>
 800b38e:	4606      	mov	r6, r0
 800b390:	4628      	mov	r0, r5
 800b392:	460f      	mov	r7, r1
 800b394:	f7f5 f8c6 	bl	8000524 <__aeabi_i2d>
 800b398:	a361      	add	r3, pc, #388	; (adr r3, 800b520 <_dtoa_r+0x2c8>)
 800b39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39e:	f7f5 f92b 	bl	80005f8 <__aeabi_dmul>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	f7f4 ff6f 	bl	800028c <__adddf3>
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	460f      	mov	r7, r1
 800b3b2:	f7f5 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	9000      	str	r0, [sp, #0]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4630      	mov	r0, r6
 800b3be:	4639      	mov	r1, r7
 800b3c0:	f7f5 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800b3c4:	b150      	cbz	r0, 800b3dc <_dtoa_r+0x184>
 800b3c6:	9800      	ldr	r0, [sp, #0]
 800b3c8:	f7f5 f8ac 	bl	8000524 <__aeabi_i2d>
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	f7f5 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3d4:	b910      	cbnz	r0, 800b3dc <_dtoa_r+0x184>
 800b3d6:	9b00      	ldr	r3, [sp, #0]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	2b16      	cmp	r3, #22
 800b3e0:	d85a      	bhi.n	800b498 <_dtoa_r+0x240>
 800b3e2:	9a00      	ldr	r2, [sp, #0]
 800b3e4:	4b57      	ldr	r3, [pc, #348]	; (800b544 <_dtoa_r+0x2ec>)
 800b3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	ec51 0b19 	vmov	r0, r1, d9
 800b3f2:	f7f5 fb73 	bl	8000adc <__aeabi_dcmplt>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d050      	beq.n	800b49c <_dtoa_r+0x244>
 800b3fa:	9b00      	ldr	r3, [sp, #0]
 800b3fc:	3b01      	subs	r3, #1
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	930b      	str	r3, [sp, #44]	; 0x2c
 800b404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b406:	1b5d      	subs	r5, r3, r5
 800b408:	1e6b      	subs	r3, r5, #1
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	bf45      	ittet	mi
 800b40e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b412:	9304      	strmi	r3, [sp, #16]
 800b414:	2300      	movpl	r3, #0
 800b416:	2300      	movmi	r3, #0
 800b418:	bf4c      	ite	mi
 800b41a:	9305      	strmi	r3, [sp, #20]
 800b41c:	9304      	strpl	r3, [sp, #16]
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	db3d      	blt.n	800b4a0 <_dtoa_r+0x248>
 800b424:	9b05      	ldr	r3, [sp, #20]
 800b426:	9a00      	ldr	r2, [sp, #0]
 800b428:	920a      	str	r2, [sp, #40]	; 0x28
 800b42a:	4413      	add	r3, r2
 800b42c:	9305      	str	r3, [sp, #20]
 800b42e:	2300      	movs	r3, #0
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	9b06      	ldr	r3, [sp, #24]
 800b434:	2b09      	cmp	r3, #9
 800b436:	f200 8089 	bhi.w	800b54c <_dtoa_r+0x2f4>
 800b43a:	2b05      	cmp	r3, #5
 800b43c:	bfc4      	itt	gt
 800b43e:	3b04      	subgt	r3, #4
 800b440:	9306      	strgt	r3, [sp, #24]
 800b442:	9b06      	ldr	r3, [sp, #24]
 800b444:	f1a3 0302 	sub.w	r3, r3, #2
 800b448:	bfcc      	ite	gt
 800b44a:	2500      	movgt	r5, #0
 800b44c:	2501      	movle	r5, #1
 800b44e:	2b03      	cmp	r3, #3
 800b450:	f200 8087 	bhi.w	800b562 <_dtoa_r+0x30a>
 800b454:	e8df f003 	tbb	[pc, r3]
 800b458:	59383a2d 	.word	0x59383a2d
 800b45c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b460:	441d      	add	r5, r3
 800b462:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b466:	2b20      	cmp	r3, #32
 800b468:	bfc1      	itttt	gt
 800b46a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b46e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b472:	fa0b f303 	lslgt.w	r3, fp, r3
 800b476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b47a:	bfda      	itte	le
 800b47c:	f1c3 0320 	rsble	r3, r3, #32
 800b480:	fa06 f003 	lslle.w	r0, r6, r3
 800b484:	4318      	orrgt	r0, r3
 800b486:	f7f5 f83d 	bl	8000504 <__aeabi_ui2d>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4606      	mov	r6, r0
 800b48e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b492:	3d01      	subs	r5, #1
 800b494:	930e      	str	r3, [sp, #56]	; 0x38
 800b496:	e76a      	b.n	800b36e <_dtoa_r+0x116>
 800b498:	2301      	movs	r3, #1
 800b49a:	e7b2      	b.n	800b402 <_dtoa_r+0x1aa>
 800b49c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b49e:	e7b1      	b.n	800b404 <_dtoa_r+0x1ac>
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	9a00      	ldr	r2, [sp, #0]
 800b4a4:	1a9b      	subs	r3, r3, r2
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	4253      	negs	r3, r2
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b0:	e7bf      	b.n	800b432 <_dtoa_r+0x1da>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	9308      	str	r3, [sp, #32]
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	dc55      	bgt.n	800b568 <_dtoa_r+0x310>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c6:	e00c      	b.n	800b4e2 <_dtoa_r+0x28a>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e7f3      	b.n	800b4b4 <_dtoa_r+0x25c>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d0:	9308      	str	r3, [sp, #32]
 800b4d2:	9b00      	ldr	r3, [sp, #0]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	9302      	str	r3, [sp, #8]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	bfb8      	it	lt
 800b4e0:	2301      	movlt	r3, #1
 800b4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	6042      	str	r2, [r0, #4]
 800b4e8:	2204      	movs	r2, #4
 800b4ea:	f102 0614 	add.w	r6, r2, #20
 800b4ee:	429e      	cmp	r6, r3
 800b4f0:	6841      	ldr	r1, [r0, #4]
 800b4f2:	d93d      	bls.n	800b570 <_dtoa_r+0x318>
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f001 f839 	bl	800c56c <_Balloc>
 800b4fa:	9001      	str	r0, [sp, #4]
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d13b      	bne.n	800b578 <_dtoa_r+0x320>
 800b500:	4b11      	ldr	r3, [pc, #68]	; (800b548 <_dtoa_r+0x2f0>)
 800b502:	4602      	mov	r2, r0
 800b504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b508:	e6c0      	b.n	800b28c <_dtoa_r+0x34>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e7df      	b.n	800b4ce <_dtoa_r+0x276>
 800b50e:	bf00      	nop
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0800e1ae 	.word	0x0800e1ae
 800b52c:	0800e1c5 	.word	0x0800e1c5
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0800e1aa 	.word	0x0800e1aa
 800b538:	0800e1a1 	.word	0x0800e1a1
 800b53c:	0800e021 	.word	0x0800e021
 800b540:	3ff80000 	.word	0x3ff80000
 800b544:	0800e330 	.word	0x0800e330
 800b548:	0800e220 	.word	0x0800e220
 800b54c:	2501      	movs	r5, #1
 800b54e:	2300      	movs	r3, #0
 800b550:	9306      	str	r3, [sp, #24]
 800b552:	9508      	str	r5, [sp, #32]
 800b554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b55c:	2200      	movs	r2, #0
 800b55e:	2312      	movs	r3, #18
 800b560:	e7b0      	b.n	800b4c4 <_dtoa_r+0x26c>
 800b562:	2301      	movs	r3, #1
 800b564:	9308      	str	r3, [sp, #32]
 800b566:	e7f5      	b.n	800b554 <_dtoa_r+0x2fc>
 800b568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b56e:	e7b8      	b.n	800b4e2 <_dtoa_r+0x28a>
 800b570:	3101      	adds	r1, #1
 800b572:	6041      	str	r1, [r0, #4]
 800b574:	0052      	lsls	r2, r2, #1
 800b576:	e7b8      	b.n	800b4ea <_dtoa_r+0x292>
 800b578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b57a:	9a01      	ldr	r2, [sp, #4]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	2b0e      	cmp	r3, #14
 800b582:	f200 809d 	bhi.w	800b6c0 <_dtoa_r+0x468>
 800b586:	2d00      	cmp	r5, #0
 800b588:	f000 809a 	beq.w	800b6c0 <_dtoa_r+0x468>
 800b58c:	9b00      	ldr	r3, [sp, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dd32      	ble.n	800b5f8 <_dtoa_r+0x3a0>
 800b592:	4ab7      	ldr	r2, [pc, #732]	; (800b870 <_dtoa_r+0x618>)
 800b594:	f003 030f 	and.w	r3, r3, #15
 800b598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5a0:	9b00      	ldr	r3, [sp, #0]
 800b5a2:	05d8      	lsls	r0, r3, #23
 800b5a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b5a8:	d516      	bpl.n	800b5d8 <_dtoa_r+0x380>
 800b5aa:	4bb2      	ldr	r3, [pc, #712]	; (800b874 <_dtoa_r+0x61c>)
 800b5ac:	ec51 0b19 	vmov	r0, r1, d9
 800b5b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5b4:	f7f5 f94a 	bl	800084c <__aeabi_ddiv>
 800b5b8:	f007 070f 	and.w	r7, r7, #15
 800b5bc:	4682      	mov	sl, r0
 800b5be:	468b      	mov	fp, r1
 800b5c0:	2503      	movs	r5, #3
 800b5c2:	4eac      	ldr	r6, [pc, #688]	; (800b874 <_dtoa_r+0x61c>)
 800b5c4:	b957      	cbnz	r7, 800b5dc <_dtoa_r+0x384>
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4659      	mov	r1, fp
 800b5ce:	f7f5 f93d 	bl	800084c <__aeabi_ddiv>
 800b5d2:	4682      	mov	sl, r0
 800b5d4:	468b      	mov	fp, r1
 800b5d6:	e028      	b.n	800b62a <_dtoa_r+0x3d2>
 800b5d8:	2502      	movs	r5, #2
 800b5da:	e7f2      	b.n	800b5c2 <_dtoa_r+0x36a>
 800b5dc:	07f9      	lsls	r1, r7, #31
 800b5de:	d508      	bpl.n	800b5f2 <_dtoa_r+0x39a>
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5e8:	f7f5 f806 	bl	80005f8 <__aeabi_dmul>
 800b5ec:	3501      	adds	r5, #1
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	107f      	asrs	r7, r7, #1
 800b5f4:	3608      	adds	r6, #8
 800b5f6:	e7e5      	b.n	800b5c4 <_dtoa_r+0x36c>
 800b5f8:	f000 809b 	beq.w	800b732 <_dtoa_r+0x4da>
 800b5fc:	9b00      	ldr	r3, [sp, #0]
 800b5fe:	4f9d      	ldr	r7, [pc, #628]	; (800b874 <_dtoa_r+0x61c>)
 800b600:	425e      	negs	r6, r3
 800b602:	4b9b      	ldr	r3, [pc, #620]	; (800b870 <_dtoa_r+0x618>)
 800b604:	f006 020f 	and.w	r2, r6, #15
 800b608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b610:	ec51 0b19 	vmov	r0, r1, d9
 800b614:	f7f4 fff0 	bl	80005f8 <__aeabi_dmul>
 800b618:	1136      	asrs	r6, r6, #4
 800b61a:	4682      	mov	sl, r0
 800b61c:	468b      	mov	fp, r1
 800b61e:	2300      	movs	r3, #0
 800b620:	2502      	movs	r5, #2
 800b622:	2e00      	cmp	r6, #0
 800b624:	d17a      	bne.n	800b71c <_dtoa_r+0x4c4>
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1d3      	bne.n	800b5d2 <_dtoa_r+0x37a>
 800b62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8082 	beq.w	800b736 <_dtoa_r+0x4de>
 800b632:	4b91      	ldr	r3, [pc, #580]	; (800b878 <_dtoa_r+0x620>)
 800b634:	2200      	movs	r2, #0
 800b636:	4650      	mov	r0, sl
 800b638:	4659      	mov	r1, fp
 800b63a:	f7f5 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d079      	beq.n	800b736 <_dtoa_r+0x4de>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d076      	beq.n	800b736 <_dtoa_r+0x4de>
 800b648:	9b02      	ldr	r3, [sp, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	dd36      	ble.n	800b6bc <_dtoa_r+0x464>
 800b64e:	9b00      	ldr	r3, [sp, #0]
 800b650:	4650      	mov	r0, sl
 800b652:	4659      	mov	r1, fp
 800b654:	1e5f      	subs	r7, r3, #1
 800b656:	2200      	movs	r2, #0
 800b658:	4b88      	ldr	r3, [pc, #544]	; (800b87c <_dtoa_r+0x624>)
 800b65a:	f7f4 ffcd 	bl	80005f8 <__aeabi_dmul>
 800b65e:	9e02      	ldr	r6, [sp, #8]
 800b660:	4682      	mov	sl, r0
 800b662:	468b      	mov	fp, r1
 800b664:	3501      	adds	r5, #1
 800b666:	4628      	mov	r0, r5
 800b668:	f7f4 ff5c 	bl	8000524 <__aeabi_i2d>
 800b66c:	4652      	mov	r2, sl
 800b66e:	465b      	mov	r3, fp
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	4b82      	ldr	r3, [pc, #520]	; (800b880 <_dtoa_r+0x628>)
 800b676:	2200      	movs	r2, #0
 800b678:	f7f4 fe08 	bl	800028c <__adddf3>
 800b67c:	46d0      	mov	r8, sl
 800b67e:	46d9      	mov	r9, fp
 800b680:	4682      	mov	sl, r0
 800b682:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b686:	2e00      	cmp	r6, #0
 800b688:	d158      	bne.n	800b73c <_dtoa_r+0x4e4>
 800b68a:	4b7e      	ldr	r3, [pc, #504]	; (800b884 <_dtoa_r+0x62c>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	4640      	mov	r0, r8
 800b690:	4649      	mov	r1, r9
 800b692:	f7f4 fdf9 	bl	8000288 <__aeabi_dsub>
 800b696:	4652      	mov	r2, sl
 800b698:	465b      	mov	r3, fp
 800b69a:	4680      	mov	r8, r0
 800b69c:	4689      	mov	r9, r1
 800b69e:	f7f5 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	f040 8295 	bne.w	800bbd2 <_dtoa_r+0x97a>
 800b6a8:	4652      	mov	r2, sl
 800b6aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	f7f5 fa13 	bl	8000adc <__aeabi_dcmplt>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	f040 8289 	bne.w	800bbce <_dtoa_r+0x976>
 800b6bc:	ec5b ab19 	vmov	sl, fp, d9
 800b6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f2c0 8148 	blt.w	800b958 <_dtoa_r+0x700>
 800b6c8:	9a00      	ldr	r2, [sp, #0]
 800b6ca:	2a0e      	cmp	r2, #14
 800b6cc:	f300 8144 	bgt.w	800b958 <_dtoa_r+0x700>
 800b6d0:	4b67      	ldr	r3, [pc, #412]	; (800b870 <_dtoa_r+0x618>)
 800b6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f280 80d5 	bge.w	800b88c <_dtoa_r+0x634>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f300 80d1 	bgt.w	800b88c <_dtoa_r+0x634>
 800b6ea:	f040 826f 	bne.w	800bbcc <_dtoa_r+0x974>
 800b6ee:	4b65      	ldr	r3, [pc, #404]	; (800b884 <_dtoa_r+0x62c>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 ff7f 	bl	80005f8 <__aeabi_dmul>
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	f7f5 fa01 	bl	8000b04 <__aeabi_dcmpge>
 800b702:	9e03      	ldr	r6, [sp, #12]
 800b704:	4637      	mov	r7, r6
 800b706:	2800      	cmp	r0, #0
 800b708:	f040 8245 	bne.w	800bb96 <_dtoa_r+0x93e>
 800b70c:	9d01      	ldr	r5, [sp, #4]
 800b70e:	2331      	movs	r3, #49	; 0x31
 800b710:	f805 3b01 	strb.w	r3, [r5], #1
 800b714:	9b00      	ldr	r3, [sp, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	e240      	b.n	800bb9e <_dtoa_r+0x946>
 800b71c:	07f2      	lsls	r2, r6, #31
 800b71e:	d505      	bpl.n	800b72c <_dtoa_r+0x4d4>
 800b720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	3501      	adds	r5, #1
 800b72a:	2301      	movs	r3, #1
 800b72c:	1076      	asrs	r6, r6, #1
 800b72e:	3708      	adds	r7, #8
 800b730:	e777      	b.n	800b622 <_dtoa_r+0x3ca>
 800b732:	2502      	movs	r5, #2
 800b734:	e779      	b.n	800b62a <_dtoa_r+0x3d2>
 800b736:	9f00      	ldr	r7, [sp, #0]
 800b738:	9e03      	ldr	r6, [sp, #12]
 800b73a:	e794      	b.n	800b666 <_dtoa_r+0x40e>
 800b73c:	9901      	ldr	r1, [sp, #4]
 800b73e:	4b4c      	ldr	r3, [pc, #304]	; (800b870 <_dtoa_r+0x618>)
 800b740:	4431      	add	r1, r6
 800b742:	910d      	str	r1, [sp, #52]	; 0x34
 800b744:	9908      	ldr	r1, [sp, #32]
 800b746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b74a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b74e:	2900      	cmp	r1, #0
 800b750:	d043      	beq.n	800b7da <_dtoa_r+0x582>
 800b752:	494d      	ldr	r1, [pc, #308]	; (800b888 <_dtoa_r+0x630>)
 800b754:	2000      	movs	r0, #0
 800b756:	f7f5 f879 	bl	800084c <__aeabi_ddiv>
 800b75a:	4652      	mov	r2, sl
 800b75c:	465b      	mov	r3, fp
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	9d01      	ldr	r5, [sp, #4]
 800b764:	4682      	mov	sl, r0
 800b766:	468b      	mov	fp, r1
 800b768:	4649      	mov	r1, r9
 800b76a:	4640      	mov	r0, r8
 800b76c:	f7f5 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800b770:	4606      	mov	r6, r0
 800b772:	f7f4 fed7 	bl	8000524 <__aeabi_i2d>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4640      	mov	r0, r8
 800b77c:	4649      	mov	r1, r9
 800b77e:	f7f4 fd83 	bl	8000288 <__aeabi_dsub>
 800b782:	3630      	adds	r6, #48	; 0x30
 800b784:	f805 6b01 	strb.w	r6, [r5], #1
 800b788:	4652      	mov	r2, sl
 800b78a:	465b      	mov	r3, fp
 800b78c:	4680      	mov	r8, r0
 800b78e:	4689      	mov	r9, r1
 800b790:	f7f5 f9a4 	bl	8000adc <__aeabi_dcmplt>
 800b794:	2800      	cmp	r0, #0
 800b796:	d163      	bne.n	800b860 <_dtoa_r+0x608>
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	4936      	ldr	r1, [pc, #216]	; (800b878 <_dtoa_r+0x620>)
 800b79e:	2000      	movs	r0, #0
 800b7a0:	f7f4 fd72 	bl	8000288 <__aeabi_dsub>
 800b7a4:	4652      	mov	r2, sl
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	f7f5 f998 	bl	8000adc <__aeabi_dcmplt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	f040 80b5 	bne.w	800b91c <_dtoa_r+0x6c4>
 800b7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7b4:	429d      	cmp	r5, r3
 800b7b6:	d081      	beq.n	800b6bc <_dtoa_r+0x464>
 800b7b8:	4b30      	ldr	r3, [pc, #192]	; (800b87c <_dtoa_r+0x624>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4650      	mov	r0, sl
 800b7be:	4659      	mov	r1, fp
 800b7c0:	f7f4 ff1a 	bl	80005f8 <__aeabi_dmul>
 800b7c4:	4b2d      	ldr	r3, [pc, #180]	; (800b87c <_dtoa_r+0x624>)
 800b7c6:	4682      	mov	sl, r0
 800b7c8:	468b      	mov	fp, r1
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	f7f4 ff12 	bl	80005f8 <__aeabi_dmul>
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4689      	mov	r9, r1
 800b7d8:	e7c6      	b.n	800b768 <_dtoa_r+0x510>
 800b7da:	4650      	mov	r0, sl
 800b7dc:	4659      	mov	r1, fp
 800b7de:	f7f4 ff0b 	bl	80005f8 <__aeabi_dmul>
 800b7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e4:	9d01      	ldr	r5, [sp, #4]
 800b7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	468b      	mov	fp, r1
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4640      	mov	r0, r8
 800b7f0:	f7f5 f9b2 	bl	8000b58 <__aeabi_d2iz>
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	f7f4 fe95 	bl	8000524 <__aeabi_i2d>
 800b7fa:	3630      	adds	r6, #48	; 0x30
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 fd40 	bl	8000288 <__aeabi_dsub>
 800b808:	f805 6b01 	strb.w	r6, [r5], #1
 800b80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b80e:	429d      	cmp	r5, r3
 800b810:	4680      	mov	r8, r0
 800b812:	4689      	mov	r9, r1
 800b814:	f04f 0200 	mov.w	r2, #0
 800b818:	d124      	bne.n	800b864 <_dtoa_r+0x60c>
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <_dtoa_r+0x630>)
 800b81c:	4650      	mov	r0, sl
 800b81e:	4659      	mov	r1, fp
 800b820:	f7f4 fd34 	bl	800028c <__adddf3>
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	f7f5 f974 	bl	8000b18 <__aeabi_dcmpgt>
 800b830:	2800      	cmp	r0, #0
 800b832:	d173      	bne.n	800b91c <_dtoa_r+0x6c4>
 800b834:	4652      	mov	r2, sl
 800b836:	465b      	mov	r3, fp
 800b838:	4913      	ldr	r1, [pc, #76]	; (800b888 <_dtoa_r+0x630>)
 800b83a:	2000      	movs	r0, #0
 800b83c:	f7f4 fd24 	bl	8000288 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4640      	mov	r0, r8
 800b846:	4649      	mov	r1, r9
 800b848:	f7f5 f948 	bl	8000adc <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f43f af35 	beq.w	800b6bc <_dtoa_r+0x464>
 800b852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b854:	1e6b      	subs	r3, r5, #1
 800b856:	930f      	str	r3, [sp, #60]	; 0x3c
 800b858:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b85c:	2b30      	cmp	r3, #48	; 0x30
 800b85e:	d0f8      	beq.n	800b852 <_dtoa_r+0x5fa>
 800b860:	9700      	str	r7, [sp, #0]
 800b862:	e049      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800b864:	4b05      	ldr	r3, [pc, #20]	; (800b87c <_dtoa_r+0x624>)
 800b866:	f7f4 fec7 	bl	80005f8 <__aeabi_dmul>
 800b86a:	4680      	mov	r8, r0
 800b86c:	4689      	mov	r9, r1
 800b86e:	e7bd      	b.n	800b7ec <_dtoa_r+0x594>
 800b870:	0800e330 	.word	0x0800e330
 800b874:	0800e308 	.word	0x0800e308
 800b878:	3ff00000 	.word	0x3ff00000
 800b87c:	40240000 	.word	0x40240000
 800b880:	401c0000 	.word	0x401c0000
 800b884:	40140000 	.word	0x40140000
 800b888:	3fe00000 	.word	0x3fe00000
 800b88c:	9d01      	ldr	r5, [sp, #4]
 800b88e:	4656      	mov	r6, sl
 800b890:	465f      	mov	r7, fp
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 ffd7 	bl	800084c <__aeabi_ddiv>
 800b89e:	f7f5 f95b 	bl	8000b58 <__aeabi_d2iz>
 800b8a2:	4682      	mov	sl, r0
 800b8a4:	f7f4 fe3e 	bl	8000524 <__aeabi_i2d>
 800b8a8:	4642      	mov	r2, r8
 800b8aa:	464b      	mov	r3, r9
 800b8ac:	f7f4 fea4 	bl	80005f8 <__aeabi_dmul>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b8bc:	f7f4 fce4 	bl	8000288 <__aeabi_dsub>
 800b8c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c4:	9e01      	ldr	r6, [sp, #4]
 800b8c6:	9f03      	ldr	r7, [sp, #12]
 800b8c8:	1bae      	subs	r6, r5, r6
 800b8ca:	42b7      	cmp	r7, r6
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	d135      	bne.n	800b93e <_dtoa_r+0x6e6>
 800b8d2:	f7f4 fcdb 	bl	800028c <__adddf3>
 800b8d6:	4642      	mov	r2, r8
 800b8d8:	464b      	mov	r3, r9
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460f      	mov	r7, r1
 800b8de:	f7f5 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8e2:	b9d0      	cbnz	r0, 800b91a <_dtoa_r+0x6c2>
 800b8e4:	4642      	mov	r2, r8
 800b8e6:	464b      	mov	r3, r9
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f5 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8f0:	b110      	cbz	r0, 800b8f8 <_dtoa_r+0x6a0>
 800b8f2:	f01a 0f01 	tst.w	sl, #1
 800b8f6:	d110      	bne.n	800b91a <_dtoa_r+0x6c2>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	f000 fe75 	bl	800c5ec <_Bfree>
 800b902:	2300      	movs	r3, #0
 800b904:	9800      	ldr	r0, [sp, #0]
 800b906:	702b      	strb	r3, [r5, #0]
 800b908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b90a:	3001      	adds	r0, #1
 800b90c:	6018      	str	r0, [r3, #0]
 800b90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b910:	2b00      	cmp	r3, #0
 800b912:	f43f acf1 	beq.w	800b2f8 <_dtoa_r+0xa0>
 800b916:	601d      	str	r5, [r3, #0]
 800b918:	e4ee      	b.n	800b2f8 <_dtoa_r+0xa0>
 800b91a:	9f00      	ldr	r7, [sp, #0]
 800b91c:	462b      	mov	r3, r5
 800b91e:	461d      	mov	r5, r3
 800b920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b924:	2a39      	cmp	r2, #57	; 0x39
 800b926:	d106      	bne.n	800b936 <_dtoa_r+0x6de>
 800b928:	9a01      	ldr	r2, [sp, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d1f7      	bne.n	800b91e <_dtoa_r+0x6c6>
 800b92e:	9901      	ldr	r1, [sp, #4]
 800b930:	2230      	movs	r2, #48	; 0x30
 800b932:	3701      	adds	r7, #1
 800b934:	700a      	strb	r2, [r1, #0]
 800b936:	781a      	ldrb	r2, [r3, #0]
 800b938:	3201      	adds	r2, #1
 800b93a:	701a      	strb	r2, [r3, #0]
 800b93c:	e790      	b.n	800b860 <_dtoa_r+0x608>
 800b93e:	4ba6      	ldr	r3, [pc, #664]	; (800bbd8 <_dtoa_r+0x980>)
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe59 	bl	80005f8 <__aeabi_dmul>
 800b946:	2200      	movs	r2, #0
 800b948:	2300      	movs	r3, #0
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	f7f5 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b952:	2800      	cmp	r0, #0
 800b954:	d09d      	beq.n	800b892 <_dtoa_r+0x63a>
 800b956:	e7cf      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800b958:	9a08      	ldr	r2, [sp, #32]
 800b95a:	2a00      	cmp	r2, #0
 800b95c:	f000 80d7 	beq.w	800bb0e <_dtoa_r+0x8b6>
 800b960:	9a06      	ldr	r2, [sp, #24]
 800b962:	2a01      	cmp	r2, #1
 800b964:	f300 80ba 	bgt.w	800badc <_dtoa_r+0x884>
 800b968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	f000 80b2 	beq.w	800bad4 <_dtoa_r+0x87c>
 800b970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b974:	9e07      	ldr	r6, [sp, #28]
 800b976:	9d04      	ldr	r5, [sp, #16]
 800b978:	9a04      	ldr	r2, [sp, #16]
 800b97a:	441a      	add	r2, r3
 800b97c:	9204      	str	r2, [sp, #16]
 800b97e:	9a05      	ldr	r2, [sp, #20]
 800b980:	2101      	movs	r1, #1
 800b982:	441a      	add	r2, r3
 800b984:	4620      	mov	r0, r4
 800b986:	9205      	str	r2, [sp, #20]
 800b988:	f000 ff32 	bl	800c7f0 <__i2b>
 800b98c:	4607      	mov	r7, r0
 800b98e:	2d00      	cmp	r5, #0
 800b990:	dd0c      	ble.n	800b9ac <_dtoa_r+0x754>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dd09      	ble.n	800b9ac <_dtoa_r+0x754>
 800b998:	42ab      	cmp	r3, r5
 800b99a:	9a04      	ldr	r2, [sp, #16]
 800b99c:	bfa8      	it	ge
 800b99e:	462b      	movge	r3, r5
 800b9a0:	1ad2      	subs	r2, r2, r3
 800b9a2:	9204      	str	r2, [sp, #16]
 800b9a4:	9a05      	ldr	r2, [sp, #20]
 800b9a6:	1aed      	subs	r5, r5, r3
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	9b07      	ldr	r3, [sp, #28]
 800b9ae:	b31b      	cbz	r3, 800b9f8 <_dtoa_r+0x7a0>
 800b9b0:	9b08      	ldr	r3, [sp, #32]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 80af 	beq.w	800bb16 <_dtoa_r+0x8be>
 800b9b8:	2e00      	cmp	r6, #0
 800b9ba:	dd13      	ble.n	800b9e4 <_dtoa_r+0x78c>
 800b9bc:	4639      	mov	r1, r7
 800b9be:	4632      	mov	r2, r6
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 ffd5 	bl	800c970 <__pow5mult>
 800b9c6:	ee18 2a10 	vmov	r2, s16
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	f000 ff24 	bl	800c81c <__multiply>
 800b9d4:	ee18 1a10 	vmov	r1, s16
 800b9d8:	4680      	mov	r8, r0
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 fe06 	bl	800c5ec <_Bfree>
 800b9e0:	ee08 8a10 	vmov	s16, r8
 800b9e4:	9b07      	ldr	r3, [sp, #28]
 800b9e6:	1b9a      	subs	r2, r3, r6
 800b9e8:	d006      	beq.n	800b9f8 <_dtoa_r+0x7a0>
 800b9ea:	ee18 1a10 	vmov	r1, s16
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 ffbe 	bl	800c970 <__pow5mult>
 800b9f4:	ee08 0a10 	vmov	s16, r0
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f000 fef8 	bl	800c7f0 <__i2b>
 800ba00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	4606      	mov	r6, r0
 800ba06:	f340 8088 	ble.w	800bb1a <_dtoa_r+0x8c2>
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4601      	mov	r1, r0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 ffae 	bl	800c970 <__pow5mult>
 800ba14:	9b06      	ldr	r3, [sp, #24]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	4606      	mov	r6, r0
 800ba1a:	f340 8081 	ble.w	800bb20 <_dtoa_r+0x8c8>
 800ba1e:	f04f 0800 	mov.w	r8, #0
 800ba22:	6933      	ldr	r3, [r6, #16]
 800ba24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba28:	6918      	ldr	r0, [r3, #16]
 800ba2a:	f000 fe91 	bl	800c750 <__hi0bits>
 800ba2e:	f1c0 0020 	rsb	r0, r0, #32
 800ba32:	9b05      	ldr	r3, [sp, #20]
 800ba34:	4418      	add	r0, r3
 800ba36:	f010 001f 	ands.w	r0, r0, #31
 800ba3a:	f000 8092 	beq.w	800bb62 <_dtoa_r+0x90a>
 800ba3e:	f1c0 0320 	rsb	r3, r0, #32
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	f340 808a 	ble.w	800bb5c <_dtoa_r+0x904>
 800ba48:	f1c0 001c 	rsb	r0, r0, #28
 800ba4c:	9b04      	ldr	r3, [sp, #16]
 800ba4e:	4403      	add	r3, r0
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	9b05      	ldr	r3, [sp, #20]
 800ba54:	4403      	add	r3, r0
 800ba56:	4405      	add	r5, r0
 800ba58:	9305      	str	r3, [sp, #20]
 800ba5a:	9b04      	ldr	r3, [sp, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd07      	ble.n	800ba70 <_dtoa_r+0x818>
 800ba60:	ee18 1a10 	vmov	r1, s16
 800ba64:	461a      	mov	r2, r3
 800ba66:	4620      	mov	r0, r4
 800ba68:	f000 ffdc 	bl	800ca24 <__lshift>
 800ba6c:	ee08 0a10 	vmov	s16, r0
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dd05      	ble.n	800ba82 <_dtoa_r+0x82a>
 800ba76:	4631      	mov	r1, r6
 800ba78:	461a      	mov	r2, r3
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 ffd2 	bl	800ca24 <__lshift>
 800ba80:	4606      	mov	r6, r0
 800ba82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d06e      	beq.n	800bb66 <_dtoa_r+0x90e>
 800ba88:	ee18 0a10 	vmov	r0, s16
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	f001 f839 	bl	800cb04 <__mcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	da67      	bge.n	800bb66 <_dtoa_r+0x90e>
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	220a      	movs	r2, #10
 800baa2:	2300      	movs	r3, #0
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fdc3 	bl	800c630 <__multadd>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	ee08 0a10 	vmov	s16, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 81b1 	beq.w	800be18 <_dtoa_r+0xbc0>
 800bab6:	2300      	movs	r3, #0
 800bab8:	4639      	mov	r1, r7
 800baba:	220a      	movs	r2, #10
 800babc:	4620      	mov	r0, r4
 800babe:	f000 fdb7 	bl	800c630 <__multadd>
 800bac2:	9b02      	ldr	r3, [sp, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	4607      	mov	r7, r0
 800bac8:	f300 808e 	bgt.w	800bbe8 <_dtoa_r+0x990>
 800bacc:	9b06      	ldr	r3, [sp, #24]
 800bace:	2b02      	cmp	r3, #2
 800bad0:	dc51      	bgt.n	800bb76 <_dtoa_r+0x91e>
 800bad2:	e089      	b.n	800bbe8 <_dtoa_r+0x990>
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bada:	e74b      	b.n	800b974 <_dtoa_r+0x71c>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1e5e      	subs	r6, r3, #1
 800bae0:	9b07      	ldr	r3, [sp, #28]
 800bae2:	42b3      	cmp	r3, r6
 800bae4:	bfbf      	itttt	lt
 800bae6:	9b07      	ldrlt	r3, [sp, #28]
 800bae8:	9607      	strlt	r6, [sp, #28]
 800baea:	1af2      	sublt	r2, r6, r3
 800baec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800baee:	bfb6      	itet	lt
 800baf0:	189b      	addlt	r3, r3, r2
 800baf2:	1b9e      	subge	r6, r3, r6
 800baf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	bfb8      	it	lt
 800bafa:	2600      	movlt	r6, #0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	bfb7      	itett	lt
 800bb00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb08:	1a9d      	sublt	r5, r3, r2
 800bb0a:	2300      	movlt	r3, #0
 800bb0c:	e734      	b.n	800b978 <_dtoa_r+0x720>
 800bb0e:	9e07      	ldr	r6, [sp, #28]
 800bb10:	9d04      	ldr	r5, [sp, #16]
 800bb12:	9f08      	ldr	r7, [sp, #32]
 800bb14:	e73b      	b.n	800b98e <_dtoa_r+0x736>
 800bb16:	9a07      	ldr	r2, [sp, #28]
 800bb18:	e767      	b.n	800b9ea <_dtoa_r+0x792>
 800bb1a:	9b06      	ldr	r3, [sp, #24]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	dc18      	bgt.n	800bb52 <_dtoa_r+0x8fa>
 800bb20:	f1ba 0f00 	cmp.w	sl, #0
 800bb24:	d115      	bne.n	800bb52 <_dtoa_r+0x8fa>
 800bb26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb2a:	b993      	cbnz	r3, 800bb52 <_dtoa_r+0x8fa>
 800bb2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb30:	0d1b      	lsrs	r3, r3, #20
 800bb32:	051b      	lsls	r3, r3, #20
 800bb34:	b183      	cbz	r3, 800bb58 <_dtoa_r+0x900>
 800bb36:	9b04      	ldr	r3, [sp, #16]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	9b05      	ldr	r3, [sp, #20]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	9305      	str	r3, [sp, #20]
 800bb42:	f04f 0801 	mov.w	r8, #1
 800bb46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f af6a 	bne.w	800ba22 <_dtoa_r+0x7ca>
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e76f      	b.n	800ba32 <_dtoa_r+0x7da>
 800bb52:	f04f 0800 	mov.w	r8, #0
 800bb56:	e7f6      	b.n	800bb46 <_dtoa_r+0x8ee>
 800bb58:	4698      	mov	r8, r3
 800bb5a:	e7f4      	b.n	800bb46 <_dtoa_r+0x8ee>
 800bb5c:	f43f af7d 	beq.w	800ba5a <_dtoa_r+0x802>
 800bb60:	4618      	mov	r0, r3
 800bb62:	301c      	adds	r0, #28
 800bb64:	e772      	b.n	800ba4c <_dtoa_r+0x7f4>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	dc37      	bgt.n	800bbdc <_dtoa_r+0x984>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dd34      	ble.n	800bbdc <_dtoa_r+0x984>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	9302      	str	r3, [sp, #8]
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	b96b      	cbnz	r3, 800bb96 <_dtoa_r+0x93e>
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 fd56 	bl	800c630 <__multadd>
 800bb84:	4601      	mov	r1, r0
 800bb86:	4606      	mov	r6, r0
 800bb88:	ee18 0a10 	vmov	r0, s16
 800bb8c:	f000 ffba 	bl	800cb04 <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	f73f adbb 	bgt.w	800b70c <_dtoa_r+0x4b4>
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	9d01      	ldr	r5, [sp, #4]
 800bb9a:	43db      	mvns	r3, r3
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	f04f 0800 	mov.w	r8, #0
 800bba2:	4631      	mov	r1, r6
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 fd21 	bl	800c5ec <_Bfree>
 800bbaa:	2f00      	cmp	r7, #0
 800bbac:	f43f aea4 	beq.w	800b8f8 <_dtoa_r+0x6a0>
 800bbb0:	f1b8 0f00 	cmp.w	r8, #0
 800bbb4:	d005      	beq.n	800bbc2 <_dtoa_r+0x96a>
 800bbb6:	45b8      	cmp	r8, r7
 800bbb8:	d003      	beq.n	800bbc2 <_dtoa_r+0x96a>
 800bbba:	4641      	mov	r1, r8
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fd15 	bl	800c5ec <_Bfree>
 800bbc2:	4639      	mov	r1, r7
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fd11 	bl	800c5ec <_Bfree>
 800bbca:	e695      	b.n	800b8f8 <_dtoa_r+0x6a0>
 800bbcc:	2600      	movs	r6, #0
 800bbce:	4637      	mov	r7, r6
 800bbd0:	e7e1      	b.n	800bb96 <_dtoa_r+0x93e>
 800bbd2:	9700      	str	r7, [sp, #0]
 800bbd4:	4637      	mov	r7, r6
 800bbd6:	e599      	b.n	800b70c <_dtoa_r+0x4b4>
 800bbd8:	40240000 	.word	0x40240000
 800bbdc:	9b08      	ldr	r3, [sp, #32]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 80ca 	beq.w	800bd78 <_dtoa_r+0xb20>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	9302      	str	r3, [sp, #8]
 800bbe8:	2d00      	cmp	r5, #0
 800bbea:	dd05      	ble.n	800bbf8 <_dtoa_r+0x9a0>
 800bbec:	4639      	mov	r1, r7
 800bbee:	462a      	mov	r2, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 ff17 	bl	800ca24 <__lshift>
 800bbf6:	4607      	mov	r7, r0
 800bbf8:	f1b8 0f00 	cmp.w	r8, #0
 800bbfc:	d05b      	beq.n	800bcb6 <_dtoa_r+0xa5e>
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fcb3 	bl	800c56c <_Balloc>
 800bc06:	4605      	mov	r5, r0
 800bc08:	b928      	cbnz	r0, 800bc16 <_dtoa_r+0x9be>
 800bc0a:	4b87      	ldr	r3, [pc, #540]	; (800be28 <_dtoa_r+0xbd0>)
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc12:	f7ff bb3b 	b.w	800b28c <_dtoa_r+0x34>
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	3202      	adds	r2, #2
 800bc1a:	0092      	lsls	r2, r2, #2
 800bc1c:	f107 010c 	add.w	r1, r7, #12
 800bc20:	300c      	adds	r0, #12
 800bc22:	f000 fc95 	bl	800c550 <memcpy>
 800bc26:	2201      	movs	r2, #1
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fefa 	bl	800ca24 <__lshift>
 800bc30:	9b01      	ldr	r3, [sp, #4]
 800bc32:	f103 0901 	add.w	r9, r3, #1
 800bc36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	f00a 0301 	and.w	r3, sl, #1
 800bc42:	46b8      	mov	r8, r7
 800bc44:	9304      	str	r3, [sp, #16]
 800bc46:	4607      	mov	r7, r0
 800bc48:	4631      	mov	r1, r6
 800bc4a:	ee18 0a10 	vmov	r0, s16
 800bc4e:	f7ff fa77 	bl	800b140 <quorem>
 800bc52:	4641      	mov	r1, r8
 800bc54:	9002      	str	r0, [sp, #8]
 800bc56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc5a:	ee18 0a10 	vmov	r0, s16
 800bc5e:	f000 ff51 	bl	800cb04 <__mcmp>
 800bc62:	463a      	mov	r2, r7
 800bc64:	9003      	str	r0, [sp, #12]
 800bc66:	4631      	mov	r1, r6
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 ff67 	bl	800cb3c <__mdiff>
 800bc6e:	68c2      	ldr	r2, [r0, #12]
 800bc70:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800bc74:	4605      	mov	r5, r0
 800bc76:	bb02      	cbnz	r2, 800bcba <_dtoa_r+0xa62>
 800bc78:	4601      	mov	r1, r0
 800bc7a:	ee18 0a10 	vmov	r0, s16
 800bc7e:	f000 ff41 	bl	800cb04 <__mcmp>
 800bc82:	4602      	mov	r2, r0
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	9207      	str	r2, [sp, #28]
 800bc8a:	f000 fcaf 	bl	800c5ec <_Bfree>
 800bc8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bc92:	ea43 0102 	orr.w	r1, r3, r2
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	464d      	mov	r5, r9
 800bc9c:	d10f      	bne.n	800bcbe <_dtoa_r+0xa66>
 800bc9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bca2:	d02a      	beq.n	800bcfa <_dtoa_r+0xaa2>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dd02      	ble.n	800bcb0 <_dtoa_r+0xa58>
 800bcaa:	9b02      	ldr	r3, [sp, #8]
 800bcac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bcb0:	f88b a000 	strb.w	sl, [fp]
 800bcb4:	e775      	b.n	800bba2 <_dtoa_r+0x94a>
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	e7ba      	b.n	800bc30 <_dtoa_r+0x9d8>
 800bcba:	2201      	movs	r2, #1
 800bcbc:	e7e2      	b.n	800bc84 <_dtoa_r+0xa2c>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	db04      	blt.n	800bcce <_dtoa_r+0xa76>
 800bcc4:	9906      	ldr	r1, [sp, #24]
 800bcc6:	430b      	orrs	r3, r1
 800bcc8:	9904      	ldr	r1, [sp, #16]
 800bcca:	430b      	orrs	r3, r1
 800bccc:	d122      	bne.n	800bd14 <_dtoa_r+0xabc>
 800bcce:	2a00      	cmp	r2, #0
 800bcd0:	ddee      	ble.n	800bcb0 <_dtoa_r+0xa58>
 800bcd2:	ee18 1a10 	vmov	r1, s16
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fea3 	bl	800ca24 <__lshift>
 800bcde:	4631      	mov	r1, r6
 800bce0:	ee08 0a10 	vmov	s16, r0
 800bce4:	f000 ff0e 	bl	800cb04 <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dc03      	bgt.n	800bcf4 <_dtoa_r+0xa9c>
 800bcec:	d1e0      	bne.n	800bcb0 <_dtoa_r+0xa58>
 800bcee:	f01a 0f01 	tst.w	sl, #1
 800bcf2:	d0dd      	beq.n	800bcb0 <_dtoa_r+0xa58>
 800bcf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcf8:	d1d7      	bne.n	800bcaa <_dtoa_r+0xa52>
 800bcfa:	2339      	movs	r3, #57	; 0x39
 800bcfc:	f88b 3000 	strb.w	r3, [fp]
 800bd00:	462b      	mov	r3, r5
 800bd02:	461d      	mov	r5, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd0a:	2a39      	cmp	r2, #57	; 0x39
 800bd0c:	d071      	beq.n	800bdf2 <_dtoa_r+0xb9a>
 800bd0e:	3201      	adds	r2, #1
 800bd10:	701a      	strb	r2, [r3, #0]
 800bd12:	e746      	b.n	800bba2 <_dtoa_r+0x94a>
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	dd07      	ble.n	800bd28 <_dtoa_r+0xad0>
 800bd18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd1c:	d0ed      	beq.n	800bcfa <_dtoa_r+0xaa2>
 800bd1e:	f10a 0301 	add.w	r3, sl, #1
 800bd22:	f88b 3000 	strb.w	r3, [fp]
 800bd26:	e73c      	b.n	800bba2 <_dtoa_r+0x94a>
 800bd28:	9b05      	ldr	r3, [sp, #20]
 800bd2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd2e:	4599      	cmp	r9, r3
 800bd30:	d047      	beq.n	800bdc2 <_dtoa_r+0xb6a>
 800bd32:	ee18 1a10 	vmov	r1, s16
 800bd36:	2300      	movs	r3, #0
 800bd38:	220a      	movs	r2, #10
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f000 fc78 	bl	800c630 <__multadd>
 800bd40:	45b8      	cmp	r8, r7
 800bd42:	ee08 0a10 	vmov	s16, r0
 800bd46:	f04f 0300 	mov.w	r3, #0
 800bd4a:	f04f 020a 	mov.w	r2, #10
 800bd4e:	4641      	mov	r1, r8
 800bd50:	4620      	mov	r0, r4
 800bd52:	d106      	bne.n	800bd62 <_dtoa_r+0xb0a>
 800bd54:	f000 fc6c 	bl	800c630 <__multadd>
 800bd58:	4680      	mov	r8, r0
 800bd5a:	4607      	mov	r7, r0
 800bd5c:	f109 0901 	add.w	r9, r9, #1
 800bd60:	e772      	b.n	800bc48 <_dtoa_r+0x9f0>
 800bd62:	f000 fc65 	bl	800c630 <__multadd>
 800bd66:	4639      	mov	r1, r7
 800bd68:	4680      	mov	r8, r0
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	220a      	movs	r2, #10
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fc5e 	bl	800c630 <__multadd>
 800bd74:	4607      	mov	r7, r0
 800bd76:	e7f1      	b.n	800bd5c <_dtoa_r+0xb04>
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	9302      	str	r3, [sp, #8]
 800bd7c:	9d01      	ldr	r5, [sp, #4]
 800bd7e:	ee18 0a10 	vmov	r0, s16
 800bd82:	4631      	mov	r1, r6
 800bd84:	f7ff f9dc 	bl	800b140 <quorem>
 800bd88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bd8c:	9b01      	ldr	r3, [sp, #4]
 800bd8e:	f805 ab01 	strb.w	sl, [r5], #1
 800bd92:	1aea      	subs	r2, r5, r3
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	4293      	cmp	r3, r2
 800bd98:	dd09      	ble.n	800bdae <_dtoa_r+0xb56>
 800bd9a:	ee18 1a10 	vmov	r1, s16
 800bd9e:	2300      	movs	r3, #0
 800bda0:	220a      	movs	r2, #10
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 fc44 	bl	800c630 <__multadd>
 800bda8:	ee08 0a10 	vmov	s16, r0
 800bdac:	e7e7      	b.n	800bd7e <_dtoa_r+0xb26>
 800bdae:	9b02      	ldr	r3, [sp, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	bfc8      	it	gt
 800bdb4:	461d      	movgt	r5, r3
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	bfd8      	it	le
 800bdba:	2501      	movle	r5, #1
 800bdbc:	441d      	add	r5, r3
 800bdbe:	f04f 0800 	mov.w	r8, #0
 800bdc2:	ee18 1a10 	vmov	r1, s16
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f000 fe2b 	bl	800ca24 <__lshift>
 800bdce:	4631      	mov	r1, r6
 800bdd0:	ee08 0a10 	vmov	s16, r0
 800bdd4:	f000 fe96 	bl	800cb04 <__mcmp>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	dc91      	bgt.n	800bd00 <_dtoa_r+0xaa8>
 800bddc:	d102      	bne.n	800bde4 <_dtoa_r+0xb8c>
 800bdde:	f01a 0f01 	tst.w	sl, #1
 800bde2:	d18d      	bne.n	800bd00 <_dtoa_r+0xaa8>
 800bde4:	462b      	mov	r3, r5
 800bde6:	461d      	mov	r5, r3
 800bde8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdec:	2a30      	cmp	r2, #48	; 0x30
 800bdee:	d0fa      	beq.n	800bde6 <_dtoa_r+0xb8e>
 800bdf0:	e6d7      	b.n	800bba2 <_dtoa_r+0x94a>
 800bdf2:	9a01      	ldr	r2, [sp, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d184      	bne.n	800bd02 <_dtoa_r+0xaaa>
 800bdf8:	9b00      	ldr	r3, [sp, #0]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2331      	movs	r3, #49	; 0x31
 800be00:	7013      	strb	r3, [r2, #0]
 800be02:	e6ce      	b.n	800bba2 <_dtoa_r+0x94a>
 800be04:	4b09      	ldr	r3, [pc, #36]	; (800be2c <_dtoa_r+0xbd4>)
 800be06:	f7ff ba95 	b.w	800b334 <_dtoa_r+0xdc>
 800be0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f47f aa6e 	bne.w	800b2ee <_dtoa_r+0x96>
 800be12:	4b07      	ldr	r3, [pc, #28]	; (800be30 <_dtoa_r+0xbd8>)
 800be14:	f7ff ba8e 	b.w	800b334 <_dtoa_r+0xdc>
 800be18:	9b02      	ldr	r3, [sp, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dcae      	bgt.n	800bd7c <_dtoa_r+0xb24>
 800be1e:	9b06      	ldr	r3, [sp, #24]
 800be20:	2b02      	cmp	r3, #2
 800be22:	f73f aea8 	bgt.w	800bb76 <_dtoa_r+0x91e>
 800be26:	e7a9      	b.n	800bd7c <_dtoa_r+0xb24>
 800be28:	0800e220 	.word	0x0800e220
 800be2c:	0800e020 	.word	0x0800e020
 800be30:	0800e1a1 	.word	0x0800e1a1

0800be34 <rshift>:
 800be34:	6903      	ldr	r3, [r0, #16]
 800be36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be42:	f100 0414 	add.w	r4, r0, #20
 800be46:	dd45      	ble.n	800bed4 <rshift+0xa0>
 800be48:	f011 011f 	ands.w	r1, r1, #31
 800be4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800be54:	d10c      	bne.n	800be70 <rshift+0x3c>
 800be56:	f100 0710 	add.w	r7, r0, #16
 800be5a:	4629      	mov	r1, r5
 800be5c:	42b1      	cmp	r1, r6
 800be5e:	d334      	bcc.n	800beca <rshift+0x96>
 800be60:	1a9b      	subs	r3, r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	1eea      	subs	r2, r5, #3
 800be66:	4296      	cmp	r6, r2
 800be68:	bf38      	it	cc
 800be6a:	2300      	movcc	r3, #0
 800be6c:	4423      	add	r3, r4
 800be6e:	e015      	b.n	800be9c <rshift+0x68>
 800be70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800be74:	f1c1 0820 	rsb	r8, r1, #32
 800be78:	40cf      	lsrs	r7, r1
 800be7a:	f105 0e04 	add.w	lr, r5, #4
 800be7e:	46a1      	mov	r9, r4
 800be80:	4576      	cmp	r6, lr
 800be82:	46f4      	mov	ip, lr
 800be84:	d815      	bhi.n	800beb2 <rshift+0x7e>
 800be86:	1a9a      	subs	r2, r3, r2
 800be88:	0092      	lsls	r2, r2, #2
 800be8a:	3a04      	subs	r2, #4
 800be8c:	3501      	adds	r5, #1
 800be8e:	42ae      	cmp	r6, r5
 800be90:	bf38      	it	cc
 800be92:	2200      	movcc	r2, #0
 800be94:	18a3      	adds	r3, r4, r2
 800be96:	50a7      	str	r7, [r4, r2]
 800be98:	b107      	cbz	r7, 800be9c <rshift+0x68>
 800be9a:	3304      	adds	r3, #4
 800be9c:	1b1a      	subs	r2, r3, r4
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bea4:	bf08      	it	eq
 800bea6:	2300      	moveq	r3, #0
 800bea8:	6102      	str	r2, [r0, #16]
 800beaa:	bf08      	it	eq
 800beac:	6143      	streq	r3, [r0, #20]
 800beae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beb2:	f8dc c000 	ldr.w	ip, [ip]
 800beb6:	fa0c fc08 	lsl.w	ip, ip, r8
 800beba:	ea4c 0707 	orr.w	r7, ip, r7
 800bebe:	f849 7b04 	str.w	r7, [r9], #4
 800bec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bec6:	40cf      	lsrs	r7, r1
 800bec8:	e7da      	b.n	800be80 <rshift+0x4c>
 800beca:	f851 cb04 	ldr.w	ip, [r1], #4
 800bece:	f847 cf04 	str.w	ip, [r7, #4]!
 800bed2:	e7c3      	b.n	800be5c <rshift+0x28>
 800bed4:	4623      	mov	r3, r4
 800bed6:	e7e1      	b.n	800be9c <rshift+0x68>

0800bed8 <__hexdig_fun>:
 800bed8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bedc:	2b09      	cmp	r3, #9
 800bede:	d802      	bhi.n	800bee6 <__hexdig_fun+0xe>
 800bee0:	3820      	subs	r0, #32
 800bee2:	b2c0      	uxtb	r0, r0
 800bee4:	4770      	bx	lr
 800bee6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800beea:	2b05      	cmp	r3, #5
 800beec:	d801      	bhi.n	800bef2 <__hexdig_fun+0x1a>
 800beee:	3847      	subs	r0, #71	; 0x47
 800bef0:	e7f7      	b.n	800bee2 <__hexdig_fun+0xa>
 800bef2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bef6:	2b05      	cmp	r3, #5
 800bef8:	d801      	bhi.n	800befe <__hexdig_fun+0x26>
 800befa:	3827      	subs	r0, #39	; 0x27
 800befc:	e7f1      	b.n	800bee2 <__hexdig_fun+0xa>
 800befe:	2000      	movs	r0, #0
 800bf00:	4770      	bx	lr
	...

0800bf04 <__gethex>:
 800bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf08:	ed2d 8b02 	vpush	{d8}
 800bf0c:	b089      	sub	sp, #36	; 0x24
 800bf0e:	ee08 0a10 	vmov	s16, r0
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	4bb4      	ldr	r3, [pc, #720]	; (800c1e8 <__gethex+0x2e4>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	468b      	mov	fp, r1
 800bf1e:	4690      	mov	r8, r2
 800bf20:	f7f4 f956 	bl	80001d0 <strlen>
 800bf24:	9b01      	ldr	r3, [sp, #4]
 800bf26:	f8db 2000 	ldr.w	r2, [fp]
 800bf2a:	4403      	add	r3, r0
 800bf2c:	4682      	mov	sl, r0
 800bf2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bf32:	9305      	str	r3, [sp, #20]
 800bf34:	1c93      	adds	r3, r2, #2
 800bf36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf3e:	32fe      	adds	r2, #254	; 0xfe
 800bf40:	18d1      	adds	r1, r2, r3
 800bf42:	461f      	mov	r7, r3
 800bf44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf48:	9100      	str	r1, [sp, #0]
 800bf4a:	2830      	cmp	r0, #48	; 0x30
 800bf4c:	d0f8      	beq.n	800bf40 <__gethex+0x3c>
 800bf4e:	f7ff ffc3 	bl	800bed8 <__hexdig_fun>
 800bf52:	4604      	mov	r4, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d13a      	bne.n	800bfce <__gethex+0xca>
 800bf58:	9901      	ldr	r1, [sp, #4]
 800bf5a:	4652      	mov	r2, sl
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f001 fa33 	bl	800d3c8 <strncmp>
 800bf62:	4605      	mov	r5, r0
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d168      	bne.n	800c03a <__gethex+0x136>
 800bf68:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bf6c:	eb07 060a 	add.w	r6, r7, sl
 800bf70:	f7ff ffb2 	bl	800bed8 <__hexdig_fun>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d062      	beq.n	800c03e <__gethex+0x13a>
 800bf78:	4633      	mov	r3, r6
 800bf7a:	7818      	ldrb	r0, [r3, #0]
 800bf7c:	2830      	cmp	r0, #48	; 0x30
 800bf7e:	461f      	mov	r7, r3
 800bf80:	f103 0301 	add.w	r3, r3, #1
 800bf84:	d0f9      	beq.n	800bf7a <__gethex+0x76>
 800bf86:	f7ff ffa7 	bl	800bed8 <__hexdig_fun>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	fab0 f480 	clz	r4, r0
 800bf90:	0964      	lsrs	r4, r4, #5
 800bf92:	4635      	mov	r5, r6
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	463a      	mov	r2, r7
 800bf98:	4616      	mov	r6, r2
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	7830      	ldrb	r0, [r6, #0]
 800bf9e:	f7ff ff9b 	bl	800bed8 <__hexdig_fun>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d1f8      	bne.n	800bf98 <__gethex+0x94>
 800bfa6:	9901      	ldr	r1, [sp, #4]
 800bfa8:	4652      	mov	r2, sl
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f001 fa0c 	bl	800d3c8 <strncmp>
 800bfb0:	b980      	cbnz	r0, 800bfd4 <__gethex+0xd0>
 800bfb2:	b94d      	cbnz	r5, 800bfc8 <__gethex+0xc4>
 800bfb4:	eb06 050a 	add.w	r5, r6, sl
 800bfb8:	462a      	mov	r2, r5
 800bfba:	4616      	mov	r6, r2
 800bfbc:	3201      	adds	r2, #1
 800bfbe:	7830      	ldrb	r0, [r6, #0]
 800bfc0:	f7ff ff8a 	bl	800bed8 <__hexdig_fun>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d1f8      	bne.n	800bfba <__gethex+0xb6>
 800bfc8:	1bad      	subs	r5, r5, r6
 800bfca:	00ad      	lsls	r5, r5, #2
 800bfcc:	e004      	b.n	800bfd8 <__gethex+0xd4>
 800bfce:	2400      	movs	r4, #0
 800bfd0:	4625      	mov	r5, r4
 800bfd2:	e7e0      	b.n	800bf96 <__gethex+0x92>
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	d1f7      	bne.n	800bfc8 <__gethex+0xc4>
 800bfd8:	7833      	ldrb	r3, [r6, #0]
 800bfda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bfde:	2b50      	cmp	r3, #80	; 0x50
 800bfe0:	d13b      	bne.n	800c05a <__gethex+0x156>
 800bfe2:	7873      	ldrb	r3, [r6, #1]
 800bfe4:	2b2b      	cmp	r3, #43	; 0x2b
 800bfe6:	d02c      	beq.n	800c042 <__gethex+0x13e>
 800bfe8:	2b2d      	cmp	r3, #45	; 0x2d
 800bfea:	d02e      	beq.n	800c04a <__gethex+0x146>
 800bfec:	1c71      	adds	r1, r6, #1
 800bfee:	f04f 0900 	mov.w	r9, #0
 800bff2:	7808      	ldrb	r0, [r1, #0]
 800bff4:	f7ff ff70 	bl	800bed8 <__hexdig_fun>
 800bff8:	1e43      	subs	r3, r0, #1
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b18      	cmp	r3, #24
 800bffe:	d82c      	bhi.n	800c05a <__gethex+0x156>
 800c000:	f1a0 0210 	sub.w	r2, r0, #16
 800c004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c008:	f7ff ff66 	bl	800bed8 <__hexdig_fun>
 800c00c:	1e43      	subs	r3, r0, #1
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b18      	cmp	r3, #24
 800c012:	d91d      	bls.n	800c050 <__gethex+0x14c>
 800c014:	f1b9 0f00 	cmp.w	r9, #0
 800c018:	d000      	beq.n	800c01c <__gethex+0x118>
 800c01a:	4252      	negs	r2, r2
 800c01c:	4415      	add	r5, r2
 800c01e:	f8cb 1000 	str.w	r1, [fp]
 800c022:	b1e4      	cbz	r4, 800c05e <__gethex+0x15a>
 800c024:	9b00      	ldr	r3, [sp, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	bf14      	ite	ne
 800c02a:	2700      	movne	r7, #0
 800c02c:	2706      	moveq	r7, #6
 800c02e:	4638      	mov	r0, r7
 800c030:	b009      	add	sp, #36	; 0x24
 800c032:	ecbd 8b02 	vpop	{d8}
 800c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03a:	463e      	mov	r6, r7
 800c03c:	4625      	mov	r5, r4
 800c03e:	2401      	movs	r4, #1
 800c040:	e7ca      	b.n	800bfd8 <__gethex+0xd4>
 800c042:	f04f 0900 	mov.w	r9, #0
 800c046:	1cb1      	adds	r1, r6, #2
 800c048:	e7d3      	b.n	800bff2 <__gethex+0xee>
 800c04a:	f04f 0901 	mov.w	r9, #1
 800c04e:	e7fa      	b.n	800c046 <__gethex+0x142>
 800c050:	230a      	movs	r3, #10
 800c052:	fb03 0202 	mla	r2, r3, r2, r0
 800c056:	3a10      	subs	r2, #16
 800c058:	e7d4      	b.n	800c004 <__gethex+0x100>
 800c05a:	4631      	mov	r1, r6
 800c05c:	e7df      	b.n	800c01e <__gethex+0x11a>
 800c05e:	1bf3      	subs	r3, r6, r7
 800c060:	3b01      	subs	r3, #1
 800c062:	4621      	mov	r1, r4
 800c064:	2b07      	cmp	r3, #7
 800c066:	dc0b      	bgt.n	800c080 <__gethex+0x17c>
 800c068:	ee18 0a10 	vmov	r0, s16
 800c06c:	f000 fa7e 	bl	800c56c <_Balloc>
 800c070:	4604      	mov	r4, r0
 800c072:	b940      	cbnz	r0, 800c086 <__gethex+0x182>
 800c074:	4b5d      	ldr	r3, [pc, #372]	; (800c1ec <__gethex+0x2e8>)
 800c076:	4602      	mov	r2, r0
 800c078:	21de      	movs	r1, #222	; 0xde
 800c07a:	485d      	ldr	r0, [pc, #372]	; (800c1f0 <__gethex+0x2ec>)
 800c07c:	f001 f9c6 	bl	800d40c <__assert_func>
 800c080:	3101      	adds	r1, #1
 800c082:	105b      	asrs	r3, r3, #1
 800c084:	e7ee      	b.n	800c064 <__gethex+0x160>
 800c086:	f100 0914 	add.w	r9, r0, #20
 800c08a:	f04f 0b00 	mov.w	fp, #0
 800c08e:	f1ca 0301 	rsb	r3, sl, #1
 800c092:	f8cd 9008 	str.w	r9, [sp, #8]
 800c096:	f8cd b000 	str.w	fp, [sp]
 800c09a:	9306      	str	r3, [sp, #24]
 800c09c:	42b7      	cmp	r7, r6
 800c09e:	d340      	bcc.n	800c122 <__gethex+0x21e>
 800c0a0:	9802      	ldr	r0, [sp, #8]
 800c0a2:	9b00      	ldr	r3, [sp, #0]
 800c0a4:	f840 3b04 	str.w	r3, [r0], #4
 800c0a8:	eba0 0009 	sub.w	r0, r0, r9
 800c0ac:	1080      	asrs	r0, r0, #2
 800c0ae:	0146      	lsls	r6, r0, #5
 800c0b0:	6120      	str	r0, [r4, #16]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fb4c 	bl	800c750 <__hi0bits>
 800c0b8:	1a30      	subs	r0, r6, r0
 800c0ba:	f8d8 6000 	ldr.w	r6, [r8]
 800c0be:	42b0      	cmp	r0, r6
 800c0c0:	dd63      	ble.n	800c18a <__gethex+0x286>
 800c0c2:	1b87      	subs	r7, r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 fef0 	bl	800ceac <__any_on>
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	b1a8      	cbz	r0, 800c0fc <__gethex+0x1f8>
 800c0d0:	1e7b      	subs	r3, r7, #1
 800c0d2:	1159      	asrs	r1, r3, #5
 800c0d4:	f003 021f 	and.w	r2, r3, #31
 800c0d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c0dc:	f04f 0a01 	mov.w	sl, #1
 800c0e0:	fa0a f202 	lsl.w	r2, sl, r2
 800c0e4:	420a      	tst	r2, r1
 800c0e6:	d009      	beq.n	800c0fc <__gethex+0x1f8>
 800c0e8:	4553      	cmp	r3, sl
 800c0ea:	dd05      	ble.n	800c0f8 <__gethex+0x1f4>
 800c0ec:	1eb9      	subs	r1, r7, #2
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 fedc 	bl	800ceac <__any_on>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d145      	bne.n	800c184 <__gethex+0x280>
 800c0f8:	f04f 0a02 	mov.w	sl, #2
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	4620      	mov	r0, r4
 800c100:	f7ff fe98 	bl	800be34 <rshift>
 800c104:	443d      	add	r5, r7
 800c106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c10a:	42ab      	cmp	r3, r5
 800c10c:	da4c      	bge.n	800c1a8 <__gethex+0x2a4>
 800c10e:	ee18 0a10 	vmov	r0, s16
 800c112:	4621      	mov	r1, r4
 800c114:	f000 fa6a 	bl	800c5ec <_Bfree>
 800c118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c11a:	2300      	movs	r3, #0
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	27a3      	movs	r7, #163	; 0xa3
 800c120:	e785      	b.n	800c02e <__gethex+0x12a>
 800c122:	1e73      	subs	r3, r6, #1
 800c124:	9a05      	ldr	r2, [sp, #20]
 800c126:	9303      	str	r3, [sp, #12]
 800c128:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d019      	beq.n	800c164 <__gethex+0x260>
 800c130:	f1bb 0f20 	cmp.w	fp, #32
 800c134:	d107      	bne.n	800c146 <__gethex+0x242>
 800c136:	9b02      	ldr	r3, [sp, #8]
 800c138:	9a00      	ldr	r2, [sp, #0]
 800c13a:	f843 2b04 	str.w	r2, [r3], #4
 800c13e:	9302      	str	r3, [sp, #8]
 800c140:	2300      	movs	r3, #0
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	469b      	mov	fp, r3
 800c146:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c14a:	f7ff fec5 	bl	800bed8 <__hexdig_fun>
 800c14e:	9b00      	ldr	r3, [sp, #0]
 800c150:	f000 000f 	and.w	r0, r0, #15
 800c154:	fa00 f00b 	lsl.w	r0, r0, fp
 800c158:	4303      	orrs	r3, r0
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	f10b 0b04 	add.w	fp, fp, #4
 800c160:	9b03      	ldr	r3, [sp, #12]
 800c162:	e00d      	b.n	800c180 <__gethex+0x27c>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	9a06      	ldr	r2, [sp, #24]
 800c168:	4413      	add	r3, r2
 800c16a:	42bb      	cmp	r3, r7
 800c16c:	d3e0      	bcc.n	800c130 <__gethex+0x22c>
 800c16e:	4618      	mov	r0, r3
 800c170:	9901      	ldr	r1, [sp, #4]
 800c172:	9307      	str	r3, [sp, #28]
 800c174:	4652      	mov	r2, sl
 800c176:	f001 f927 	bl	800d3c8 <strncmp>
 800c17a:	9b07      	ldr	r3, [sp, #28]
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d1d7      	bne.n	800c130 <__gethex+0x22c>
 800c180:	461e      	mov	r6, r3
 800c182:	e78b      	b.n	800c09c <__gethex+0x198>
 800c184:	f04f 0a03 	mov.w	sl, #3
 800c188:	e7b8      	b.n	800c0fc <__gethex+0x1f8>
 800c18a:	da0a      	bge.n	800c1a2 <__gethex+0x29e>
 800c18c:	1a37      	subs	r7, r6, r0
 800c18e:	4621      	mov	r1, r4
 800c190:	ee18 0a10 	vmov	r0, s16
 800c194:	463a      	mov	r2, r7
 800c196:	f000 fc45 	bl	800ca24 <__lshift>
 800c19a:	1bed      	subs	r5, r5, r7
 800c19c:	4604      	mov	r4, r0
 800c19e:	f100 0914 	add.w	r9, r0, #20
 800c1a2:	f04f 0a00 	mov.w	sl, #0
 800c1a6:	e7ae      	b.n	800c106 <__gethex+0x202>
 800c1a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c1ac:	42a8      	cmp	r0, r5
 800c1ae:	dd72      	ble.n	800c296 <__gethex+0x392>
 800c1b0:	1b45      	subs	r5, r0, r5
 800c1b2:	42ae      	cmp	r6, r5
 800c1b4:	dc36      	bgt.n	800c224 <__gethex+0x320>
 800c1b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d02a      	beq.n	800c214 <__gethex+0x310>
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d02c      	beq.n	800c21c <__gethex+0x318>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d11c      	bne.n	800c200 <__gethex+0x2fc>
 800c1c6:	42ae      	cmp	r6, r5
 800c1c8:	d11a      	bne.n	800c200 <__gethex+0x2fc>
 800c1ca:	2e01      	cmp	r6, #1
 800c1cc:	d112      	bne.n	800c1f4 <__gethex+0x2f0>
 800c1ce:	9a04      	ldr	r2, [sp, #16]
 800c1d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	f8c9 3000 	str.w	r3, [r9]
 800c1de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1e0:	2762      	movs	r7, #98	; 0x62
 800c1e2:	601c      	str	r4, [r3, #0]
 800c1e4:	e723      	b.n	800c02e <__gethex+0x12a>
 800c1e6:	bf00      	nop
 800c1e8:	0800e298 	.word	0x0800e298
 800c1ec:	0800e220 	.word	0x0800e220
 800c1f0:	0800e231 	.word	0x0800e231
 800c1f4:	1e71      	subs	r1, r6, #1
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	f000 fe58 	bl	800ceac <__any_on>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d1e6      	bne.n	800c1ce <__gethex+0x2ca>
 800c200:	ee18 0a10 	vmov	r0, s16
 800c204:	4621      	mov	r1, r4
 800c206:	f000 f9f1 	bl	800c5ec <_Bfree>
 800c20a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c20c:	2300      	movs	r3, #0
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	2750      	movs	r7, #80	; 0x50
 800c212:	e70c      	b.n	800c02e <__gethex+0x12a>
 800c214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f2      	bne.n	800c200 <__gethex+0x2fc>
 800c21a:	e7d8      	b.n	800c1ce <__gethex+0x2ca>
 800c21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1d5      	bne.n	800c1ce <__gethex+0x2ca>
 800c222:	e7ed      	b.n	800c200 <__gethex+0x2fc>
 800c224:	1e6f      	subs	r7, r5, #1
 800c226:	f1ba 0f00 	cmp.w	sl, #0
 800c22a:	d131      	bne.n	800c290 <__gethex+0x38c>
 800c22c:	b127      	cbz	r7, 800c238 <__gethex+0x334>
 800c22e:	4639      	mov	r1, r7
 800c230:	4620      	mov	r0, r4
 800c232:	f000 fe3b 	bl	800ceac <__any_on>
 800c236:	4682      	mov	sl, r0
 800c238:	117b      	asrs	r3, r7, #5
 800c23a:	2101      	movs	r1, #1
 800c23c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c240:	f007 071f 	and.w	r7, r7, #31
 800c244:	fa01 f707 	lsl.w	r7, r1, r7
 800c248:	421f      	tst	r7, r3
 800c24a:	4629      	mov	r1, r5
 800c24c:	4620      	mov	r0, r4
 800c24e:	bf18      	it	ne
 800c250:	f04a 0a02 	orrne.w	sl, sl, #2
 800c254:	1b76      	subs	r6, r6, r5
 800c256:	f7ff fded 	bl	800be34 <rshift>
 800c25a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c25e:	2702      	movs	r7, #2
 800c260:	f1ba 0f00 	cmp.w	sl, #0
 800c264:	d048      	beq.n	800c2f8 <__gethex+0x3f4>
 800c266:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d015      	beq.n	800c29a <__gethex+0x396>
 800c26e:	2b03      	cmp	r3, #3
 800c270:	d017      	beq.n	800c2a2 <__gethex+0x39e>
 800c272:	2b01      	cmp	r3, #1
 800c274:	d109      	bne.n	800c28a <__gethex+0x386>
 800c276:	f01a 0f02 	tst.w	sl, #2
 800c27a:	d006      	beq.n	800c28a <__gethex+0x386>
 800c27c:	f8d9 0000 	ldr.w	r0, [r9]
 800c280:	ea4a 0a00 	orr.w	sl, sl, r0
 800c284:	f01a 0f01 	tst.w	sl, #1
 800c288:	d10e      	bne.n	800c2a8 <__gethex+0x3a4>
 800c28a:	f047 0710 	orr.w	r7, r7, #16
 800c28e:	e033      	b.n	800c2f8 <__gethex+0x3f4>
 800c290:	f04f 0a01 	mov.w	sl, #1
 800c294:	e7d0      	b.n	800c238 <__gethex+0x334>
 800c296:	2701      	movs	r7, #1
 800c298:	e7e2      	b.n	800c260 <__gethex+0x35c>
 800c29a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c29c:	f1c3 0301 	rsb	r3, r3, #1
 800c2a0:	9315      	str	r3, [sp, #84]	; 0x54
 800c2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d0f0      	beq.n	800c28a <__gethex+0x386>
 800c2a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2ac:	f104 0314 	add.w	r3, r4, #20
 800c2b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c2b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c2b8:	f04f 0c00 	mov.w	ip, #0
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c2c6:	d01c      	beq.n	800c302 <__gethex+0x3fe>
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	6002      	str	r2, [r0, #0]
 800c2cc:	2f02      	cmp	r7, #2
 800c2ce:	f104 0314 	add.w	r3, r4, #20
 800c2d2:	d13f      	bne.n	800c354 <__gethex+0x450>
 800c2d4:	f8d8 2000 	ldr.w	r2, [r8]
 800c2d8:	3a01      	subs	r2, #1
 800c2da:	42b2      	cmp	r2, r6
 800c2dc:	d10a      	bne.n	800c2f4 <__gethex+0x3f0>
 800c2de:	1171      	asrs	r1, r6, #5
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2e6:	f006 061f 	and.w	r6, r6, #31
 800c2ea:	fa02 f606 	lsl.w	r6, r2, r6
 800c2ee:	421e      	tst	r6, r3
 800c2f0:	bf18      	it	ne
 800c2f2:	4617      	movne	r7, r2
 800c2f4:	f047 0720 	orr.w	r7, r7, #32
 800c2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2fa:	601c      	str	r4, [r3, #0]
 800c2fc:	9b04      	ldr	r3, [sp, #16]
 800c2fe:	601d      	str	r5, [r3, #0]
 800c300:	e695      	b.n	800c02e <__gethex+0x12a>
 800c302:	4299      	cmp	r1, r3
 800c304:	f843 cc04 	str.w	ip, [r3, #-4]
 800c308:	d8d8      	bhi.n	800c2bc <__gethex+0x3b8>
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	459b      	cmp	fp, r3
 800c30e:	db19      	blt.n	800c344 <__gethex+0x440>
 800c310:	6861      	ldr	r1, [r4, #4]
 800c312:	ee18 0a10 	vmov	r0, s16
 800c316:	3101      	adds	r1, #1
 800c318:	f000 f928 	bl	800c56c <_Balloc>
 800c31c:	4681      	mov	r9, r0
 800c31e:	b918      	cbnz	r0, 800c328 <__gethex+0x424>
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <__gethex+0x488>)
 800c322:	4602      	mov	r2, r0
 800c324:	2184      	movs	r1, #132	; 0x84
 800c326:	e6a8      	b.n	800c07a <__gethex+0x176>
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	3202      	adds	r2, #2
 800c32c:	f104 010c 	add.w	r1, r4, #12
 800c330:	0092      	lsls	r2, r2, #2
 800c332:	300c      	adds	r0, #12
 800c334:	f000 f90c 	bl	800c550 <memcpy>
 800c338:	4621      	mov	r1, r4
 800c33a:	ee18 0a10 	vmov	r0, s16
 800c33e:	f000 f955 	bl	800c5ec <_Bfree>
 800c342:	464c      	mov	r4, r9
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c34c:	6122      	str	r2, [r4, #16]
 800c34e:	2201      	movs	r2, #1
 800c350:	615a      	str	r2, [r3, #20]
 800c352:	e7bb      	b.n	800c2cc <__gethex+0x3c8>
 800c354:	6922      	ldr	r2, [r4, #16]
 800c356:	455a      	cmp	r2, fp
 800c358:	dd0b      	ble.n	800c372 <__gethex+0x46e>
 800c35a:	2101      	movs	r1, #1
 800c35c:	4620      	mov	r0, r4
 800c35e:	f7ff fd69 	bl	800be34 <rshift>
 800c362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c366:	3501      	adds	r5, #1
 800c368:	42ab      	cmp	r3, r5
 800c36a:	f6ff aed0 	blt.w	800c10e <__gethex+0x20a>
 800c36e:	2701      	movs	r7, #1
 800c370:	e7c0      	b.n	800c2f4 <__gethex+0x3f0>
 800c372:	f016 061f 	ands.w	r6, r6, #31
 800c376:	d0fa      	beq.n	800c36e <__gethex+0x46a>
 800c378:	4453      	add	r3, sl
 800c37a:	f1c6 0620 	rsb	r6, r6, #32
 800c37e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c382:	f000 f9e5 	bl	800c750 <__hi0bits>
 800c386:	42b0      	cmp	r0, r6
 800c388:	dbe7      	blt.n	800c35a <__gethex+0x456>
 800c38a:	e7f0      	b.n	800c36e <__gethex+0x46a>
 800c38c:	0800e220 	.word	0x0800e220

0800c390 <L_shift>:
 800c390:	f1c2 0208 	rsb	r2, r2, #8
 800c394:	0092      	lsls	r2, r2, #2
 800c396:	b570      	push	{r4, r5, r6, lr}
 800c398:	f1c2 0620 	rsb	r6, r2, #32
 800c39c:	6843      	ldr	r3, [r0, #4]
 800c39e:	6804      	ldr	r4, [r0, #0]
 800c3a0:	fa03 f506 	lsl.w	r5, r3, r6
 800c3a4:	432c      	orrs	r4, r5
 800c3a6:	40d3      	lsrs	r3, r2
 800c3a8:	6004      	str	r4, [r0, #0]
 800c3aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3ae:	4288      	cmp	r0, r1
 800c3b0:	d3f4      	bcc.n	800c39c <L_shift+0xc>
 800c3b2:	bd70      	pop	{r4, r5, r6, pc}

0800c3b4 <__match>:
 800c3b4:	b530      	push	{r4, r5, lr}
 800c3b6:	6803      	ldr	r3, [r0, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3be:	b914      	cbnz	r4, 800c3c6 <__match+0x12>
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	bd30      	pop	{r4, r5, pc}
 800c3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c3ce:	2d19      	cmp	r5, #25
 800c3d0:	bf98      	it	ls
 800c3d2:	3220      	addls	r2, #32
 800c3d4:	42a2      	cmp	r2, r4
 800c3d6:	d0f0      	beq.n	800c3ba <__match+0x6>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e7f3      	b.n	800c3c4 <__match+0x10>

0800c3dc <__hexnan>:
 800c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	680b      	ldr	r3, [r1, #0]
 800c3e2:	115e      	asrs	r6, r3, #5
 800c3e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3e8:	f013 031f 	ands.w	r3, r3, #31
 800c3ec:	b087      	sub	sp, #28
 800c3ee:	bf18      	it	ne
 800c3f0:	3604      	addne	r6, #4
 800c3f2:	2500      	movs	r5, #0
 800c3f4:	1f37      	subs	r7, r6, #4
 800c3f6:	4690      	mov	r8, r2
 800c3f8:	6802      	ldr	r2, [r0, #0]
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800c402:	46b9      	mov	r9, r7
 800c404:	463c      	mov	r4, r7
 800c406:	9502      	str	r5, [sp, #8]
 800c408:	46ab      	mov	fp, r5
 800c40a:	7851      	ldrb	r1, [r2, #1]
 800c40c:	1c53      	adds	r3, r2, #1
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	b341      	cbz	r1, 800c464 <__hexnan+0x88>
 800c412:	4608      	mov	r0, r1
 800c414:	9205      	str	r2, [sp, #20]
 800c416:	9104      	str	r1, [sp, #16]
 800c418:	f7ff fd5e 	bl	800bed8 <__hexdig_fun>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d14f      	bne.n	800c4c0 <__hexnan+0xe4>
 800c420:	9904      	ldr	r1, [sp, #16]
 800c422:	9a05      	ldr	r2, [sp, #20]
 800c424:	2920      	cmp	r1, #32
 800c426:	d818      	bhi.n	800c45a <__hexnan+0x7e>
 800c428:	9b02      	ldr	r3, [sp, #8]
 800c42a:	459b      	cmp	fp, r3
 800c42c:	dd13      	ble.n	800c456 <__hexnan+0x7a>
 800c42e:	454c      	cmp	r4, r9
 800c430:	d206      	bcs.n	800c440 <__hexnan+0x64>
 800c432:	2d07      	cmp	r5, #7
 800c434:	dc04      	bgt.n	800c440 <__hexnan+0x64>
 800c436:	462a      	mov	r2, r5
 800c438:	4649      	mov	r1, r9
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7ff ffa8 	bl	800c390 <L_shift>
 800c440:	4544      	cmp	r4, r8
 800c442:	d950      	bls.n	800c4e6 <__hexnan+0x10a>
 800c444:	2300      	movs	r3, #0
 800c446:	f1a4 0904 	sub.w	r9, r4, #4
 800c44a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c44e:	f8cd b008 	str.w	fp, [sp, #8]
 800c452:	464c      	mov	r4, r9
 800c454:	461d      	mov	r5, r3
 800c456:	9a03      	ldr	r2, [sp, #12]
 800c458:	e7d7      	b.n	800c40a <__hexnan+0x2e>
 800c45a:	2929      	cmp	r1, #41	; 0x29
 800c45c:	d156      	bne.n	800c50c <__hexnan+0x130>
 800c45e:	3202      	adds	r2, #2
 800c460:	f8ca 2000 	str.w	r2, [sl]
 800c464:	f1bb 0f00 	cmp.w	fp, #0
 800c468:	d050      	beq.n	800c50c <__hexnan+0x130>
 800c46a:	454c      	cmp	r4, r9
 800c46c:	d206      	bcs.n	800c47c <__hexnan+0xa0>
 800c46e:	2d07      	cmp	r5, #7
 800c470:	dc04      	bgt.n	800c47c <__hexnan+0xa0>
 800c472:	462a      	mov	r2, r5
 800c474:	4649      	mov	r1, r9
 800c476:	4620      	mov	r0, r4
 800c478:	f7ff ff8a 	bl	800c390 <L_shift>
 800c47c:	4544      	cmp	r4, r8
 800c47e:	d934      	bls.n	800c4ea <__hexnan+0x10e>
 800c480:	f1a8 0204 	sub.w	r2, r8, #4
 800c484:	4623      	mov	r3, r4
 800c486:	f853 1b04 	ldr.w	r1, [r3], #4
 800c48a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c48e:	429f      	cmp	r7, r3
 800c490:	d2f9      	bcs.n	800c486 <__hexnan+0xaa>
 800c492:	1b3b      	subs	r3, r7, r4
 800c494:	f023 0303 	bic.w	r3, r3, #3
 800c498:	3304      	adds	r3, #4
 800c49a:	3401      	adds	r4, #1
 800c49c:	3e03      	subs	r6, #3
 800c49e:	42b4      	cmp	r4, r6
 800c4a0:	bf88      	it	hi
 800c4a2:	2304      	movhi	r3, #4
 800c4a4:	4443      	add	r3, r8
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f843 2b04 	str.w	r2, [r3], #4
 800c4ac:	429f      	cmp	r7, r3
 800c4ae:	d2fb      	bcs.n	800c4a8 <__hexnan+0xcc>
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	b91b      	cbnz	r3, 800c4bc <__hexnan+0xe0>
 800c4b4:	4547      	cmp	r7, r8
 800c4b6:	d127      	bne.n	800c508 <__hexnan+0x12c>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	603b      	str	r3, [r7, #0]
 800c4bc:	2005      	movs	r0, #5
 800c4be:	e026      	b.n	800c50e <__hexnan+0x132>
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	2d08      	cmp	r5, #8
 800c4c4:	f10b 0b01 	add.w	fp, fp, #1
 800c4c8:	dd06      	ble.n	800c4d8 <__hexnan+0xfc>
 800c4ca:	4544      	cmp	r4, r8
 800c4cc:	d9c3      	bls.n	800c456 <__hexnan+0x7a>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4d4:	2501      	movs	r5, #1
 800c4d6:	3c04      	subs	r4, #4
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	f000 000f 	and.w	r0, r0, #15
 800c4de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c4e2:	6022      	str	r2, [r4, #0]
 800c4e4:	e7b7      	b.n	800c456 <__hexnan+0x7a>
 800c4e6:	2508      	movs	r5, #8
 800c4e8:	e7b5      	b.n	800c456 <__hexnan+0x7a>
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d0df      	beq.n	800c4b0 <__hexnan+0xd4>
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4f4:	f1c3 0320 	rsb	r3, r3, #32
 800c4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c500:	401a      	ands	r2, r3
 800c502:	f846 2c04 	str.w	r2, [r6, #-4]
 800c506:	e7d3      	b.n	800c4b0 <__hexnan+0xd4>
 800c508:	3f04      	subs	r7, #4
 800c50a:	e7d1      	b.n	800c4b0 <__hexnan+0xd4>
 800c50c:	2004      	movs	r0, #4
 800c50e:	b007      	add	sp, #28
 800c510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c514 <_localeconv_r>:
 800c514:	4800      	ldr	r0, [pc, #0]	; (800c518 <_localeconv_r+0x4>)
 800c516:	4770      	bx	lr
 800c518:	20000254 	.word	0x20000254

0800c51c <malloc>:
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <malloc+0xc>)
 800c51e:	4601      	mov	r1, r0
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f000 bd67 	b.w	800cff4 <_malloc_r>
 800c526:	bf00      	nop
 800c528:	200000fc 	.word	0x200000fc

0800c52c <__ascii_mbtowc>:
 800c52c:	b082      	sub	sp, #8
 800c52e:	b901      	cbnz	r1, 800c532 <__ascii_mbtowc+0x6>
 800c530:	a901      	add	r1, sp, #4
 800c532:	b142      	cbz	r2, 800c546 <__ascii_mbtowc+0x1a>
 800c534:	b14b      	cbz	r3, 800c54a <__ascii_mbtowc+0x1e>
 800c536:	7813      	ldrb	r3, [r2, #0]
 800c538:	600b      	str	r3, [r1, #0]
 800c53a:	7812      	ldrb	r2, [r2, #0]
 800c53c:	1e10      	subs	r0, r2, #0
 800c53e:	bf18      	it	ne
 800c540:	2001      	movne	r0, #1
 800c542:	b002      	add	sp, #8
 800c544:	4770      	bx	lr
 800c546:	4610      	mov	r0, r2
 800c548:	e7fb      	b.n	800c542 <__ascii_mbtowc+0x16>
 800c54a:	f06f 0001 	mvn.w	r0, #1
 800c54e:	e7f8      	b.n	800c542 <__ascii_mbtowc+0x16>

0800c550 <memcpy>:
 800c550:	440a      	add	r2, r1
 800c552:	4291      	cmp	r1, r2
 800c554:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c558:	d100      	bne.n	800c55c <memcpy+0xc>
 800c55a:	4770      	bx	lr
 800c55c:	b510      	push	{r4, lr}
 800c55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c562:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c566:	4291      	cmp	r1, r2
 800c568:	d1f9      	bne.n	800c55e <memcpy+0xe>
 800c56a:	bd10      	pop	{r4, pc}

0800c56c <_Balloc>:
 800c56c:	b570      	push	{r4, r5, r6, lr}
 800c56e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	b976      	cbnz	r6, 800c594 <_Balloc+0x28>
 800c576:	2010      	movs	r0, #16
 800c578:	f7ff ffd0 	bl	800c51c <malloc>
 800c57c:	4602      	mov	r2, r0
 800c57e:	6260      	str	r0, [r4, #36]	; 0x24
 800c580:	b920      	cbnz	r0, 800c58c <_Balloc+0x20>
 800c582:	4b18      	ldr	r3, [pc, #96]	; (800c5e4 <_Balloc+0x78>)
 800c584:	4818      	ldr	r0, [pc, #96]	; (800c5e8 <_Balloc+0x7c>)
 800c586:	2166      	movs	r1, #102	; 0x66
 800c588:	f000 ff40 	bl	800d40c <__assert_func>
 800c58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c590:	6006      	str	r6, [r0, #0]
 800c592:	60c6      	str	r6, [r0, #12]
 800c594:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c596:	68f3      	ldr	r3, [r6, #12]
 800c598:	b183      	cbz	r3, 800c5bc <_Balloc+0x50>
 800c59a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5a2:	b9b8      	cbnz	r0, 800c5d4 <_Balloc+0x68>
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	fa01 f605 	lsl.w	r6, r1, r5
 800c5aa:	1d72      	adds	r2, r6, #5
 800c5ac:	0092      	lsls	r2, r2, #2
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f000 fc9d 	bl	800ceee <_calloc_r>
 800c5b4:	b160      	cbz	r0, 800c5d0 <_Balloc+0x64>
 800c5b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5ba:	e00e      	b.n	800c5da <_Balloc+0x6e>
 800c5bc:	2221      	movs	r2, #33	; 0x21
 800c5be:	2104      	movs	r1, #4
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fc94 	bl	800ceee <_calloc_r>
 800c5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5c8:	60f0      	str	r0, [r6, #12]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1e4      	bne.n	800c59a <_Balloc+0x2e>
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	6802      	ldr	r2, [r0, #0]
 800c5d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5e0:	e7f7      	b.n	800c5d2 <_Balloc+0x66>
 800c5e2:	bf00      	nop
 800c5e4:	0800e1ae 	.word	0x0800e1ae
 800c5e8:	0800e2ac 	.word	0x0800e2ac

0800c5ec <_Bfree>:
 800c5ec:	b570      	push	{r4, r5, r6, lr}
 800c5ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	b976      	cbnz	r6, 800c614 <_Bfree+0x28>
 800c5f6:	2010      	movs	r0, #16
 800c5f8:	f7ff ff90 	bl	800c51c <malloc>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	6268      	str	r0, [r5, #36]	; 0x24
 800c600:	b920      	cbnz	r0, 800c60c <_Bfree+0x20>
 800c602:	4b09      	ldr	r3, [pc, #36]	; (800c628 <_Bfree+0x3c>)
 800c604:	4809      	ldr	r0, [pc, #36]	; (800c62c <_Bfree+0x40>)
 800c606:	218a      	movs	r1, #138	; 0x8a
 800c608:	f000 ff00 	bl	800d40c <__assert_func>
 800c60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c610:	6006      	str	r6, [r0, #0]
 800c612:	60c6      	str	r6, [r0, #12]
 800c614:	b13c      	cbz	r4, 800c626 <_Bfree+0x3a>
 800c616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c618:	6862      	ldr	r2, [r4, #4]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c620:	6021      	str	r1, [r4, #0]
 800c622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c626:	bd70      	pop	{r4, r5, r6, pc}
 800c628:	0800e1ae 	.word	0x0800e1ae
 800c62c:	0800e2ac 	.word	0x0800e2ac

0800c630 <__multadd>:
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	690d      	ldr	r5, [r1, #16]
 800c636:	4607      	mov	r7, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	461e      	mov	r6, r3
 800c63c:	f101 0c14 	add.w	ip, r1, #20
 800c640:	2000      	movs	r0, #0
 800c642:	f8dc 3000 	ldr.w	r3, [ip]
 800c646:	b299      	uxth	r1, r3
 800c648:	fb02 6101 	mla	r1, r2, r1, r6
 800c64c:	0c1e      	lsrs	r6, r3, #16
 800c64e:	0c0b      	lsrs	r3, r1, #16
 800c650:	fb02 3306 	mla	r3, r2, r6, r3
 800c654:	b289      	uxth	r1, r1
 800c656:	3001      	adds	r0, #1
 800c658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c65c:	4285      	cmp	r5, r0
 800c65e:	f84c 1b04 	str.w	r1, [ip], #4
 800c662:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c666:	dcec      	bgt.n	800c642 <__multadd+0x12>
 800c668:	b30e      	cbz	r6, 800c6ae <__multadd+0x7e>
 800c66a:	68a3      	ldr	r3, [r4, #8]
 800c66c:	42ab      	cmp	r3, r5
 800c66e:	dc19      	bgt.n	800c6a4 <__multadd+0x74>
 800c670:	6861      	ldr	r1, [r4, #4]
 800c672:	4638      	mov	r0, r7
 800c674:	3101      	adds	r1, #1
 800c676:	f7ff ff79 	bl	800c56c <_Balloc>
 800c67a:	4680      	mov	r8, r0
 800c67c:	b928      	cbnz	r0, 800c68a <__multadd+0x5a>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <__multadd+0x84>)
 800c682:	480d      	ldr	r0, [pc, #52]	; (800c6b8 <__multadd+0x88>)
 800c684:	21b5      	movs	r1, #181	; 0xb5
 800c686:	f000 fec1 	bl	800d40c <__assert_func>
 800c68a:	6922      	ldr	r2, [r4, #16]
 800c68c:	3202      	adds	r2, #2
 800c68e:	f104 010c 	add.w	r1, r4, #12
 800c692:	0092      	lsls	r2, r2, #2
 800c694:	300c      	adds	r0, #12
 800c696:	f7ff ff5b 	bl	800c550 <memcpy>
 800c69a:	4621      	mov	r1, r4
 800c69c:	4638      	mov	r0, r7
 800c69e:	f7ff ffa5 	bl	800c5ec <_Bfree>
 800c6a2:	4644      	mov	r4, r8
 800c6a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6a8:	3501      	adds	r5, #1
 800c6aa:	615e      	str	r6, [r3, #20]
 800c6ac:	6125      	str	r5, [r4, #16]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b4:	0800e220 	.word	0x0800e220
 800c6b8:	0800e2ac 	.word	0x0800e2ac

0800c6bc <__s2b>:
 800c6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	4615      	mov	r5, r2
 800c6c4:	461f      	mov	r7, r3
 800c6c6:	2209      	movs	r2, #9
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	4606      	mov	r6, r0
 800c6cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	db09      	blt.n	800c6ec <__s2b+0x30>
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f7ff ff47 	bl	800c56c <_Balloc>
 800c6de:	b940      	cbnz	r0, 800c6f2 <__s2b+0x36>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	4b19      	ldr	r3, [pc, #100]	; (800c748 <__s2b+0x8c>)
 800c6e4:	4819      	ldr	r0, [pc, #100]	; (800c74c <__s2b+0x90>)
 800c6e6:	21ce      	movs	r1, #206	; 0xce
 800c6e8:	f000 fe90 	bl	800d40c <__assert_func>
 800c6ec:	0052      	lsls	r2, r2, #1
 800c6ee:	3101      	adds	r1, #1
 800c6f0:	e7f0      	b.n	800c6d4 <__s2b+0x18>
 800c6f2:	9b08      	ldr	r3, [sp, #32]
 800c6f4:	6143      	str	r3, [r0, #20]
 800c6f6:	2d09      	cmp	r5, #9
 800c6f8:	f04f 0301 	mov.w	r3, #1
 800c6fc:	6103      	str	r3, [r0, #16]
 800c6fe:	dd16      	ble.n	800c72e <__s2b+0x72>
 800c700:	f104 0909 	add.w	r9, r4, #9
 800c704:	46c8      	mov	r8, r9
 800c706:	442c      	add	r4, r5
 800c708:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c70c:	4601      	mov	r1, r0
 800c70e:	3b30      	subs	r3, #48	; 0x30
 800c710:	220a      	movs	r2, #10
 800c712:	4630      	mov	r0, r6
 800c714:	f7ff ff8c 	bl	800c630 <__multadd>
 800c718:	45a0      	cmp	r8, r4
 800c71a:	d1f5      	bne.n	800c708 <__s2b+0x4c>
 800c71c:	f1a5 0408 	sub.w	r4, r5, #8
 800c720:	444c      	add	r4, r9
 800c722:	1b2d      	subs	r5, r5, r4
 800c724:	1963      	adds	r3, r4, r5
 800c726:	42bb      	cmp	r3, r7
 800c728:	db04      	blt.n	800c734 <__s2b+0x78>
 800c72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72e:	340a      	adds	r4, #10
 800c730:	2509      	movs	r5, #9
 800c732:	e7f6      	b.n	800c722 <__s2b+0x66>
 800c734:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c738:	4601      	mov	r1, r0
 800c73a:	3b30      	subs	r3, #48	; 0x30
 800c73c:	220a      	movs	r2, #10
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ff76 	bl	800c630 <__multadd>
 800c744:	e7ee      	b.n	800c724 <__s2b+0x68>
 800c746:	bf00      	nop
 800c748:	0800e220 	.word	0x0800e220
 800c74c:	0800e2ac 	.word	0x0800e2ac

0800c750 <__hi0bits>:
 800c750:	0c03      	lsrs	r3, r0, #16
 800c752:	041b      	lsls	r3, r3, #16
 800c754:	b9d3      	cbnz	r3, 800c78c <__hi0bits+0x3c>
 800c756:	0400      	lsls	r0, r0, #16
 800c758:	2310      	movs	r3, #16
 800c75a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c75e:	bf04      	itt	eq
 800c760:	0200      	lsleq	r0, r0, #8
 800c762:	3308      	addeq	r3, #8
 800c764:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c768:	bf04      	itt	eq
 800c76a:	0100      	lsleq	r0, r0, #4
 800c76c:	3304      	addeq	r3, #4
 800c76e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c772:	bf04      	itt	eq
 800c774:	0080      	lsleq	r0, r0, #2
 800c776:	3302      	addeq	r3, #2
 800c778:	2800      	cmp	r0, #0
 800c77a:	db05      	blt.n	800c788 <__hi0bits+0x38>
 800c77c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c780:	f103 0301 	add.w	r3, r3, #1
 800c784:	bf08      	it	eq
 800c786:	2320      	moveq	r3, #32
 800c788:	4618      	mov	r0, r3
 800c78a:	4770      	bx	lr
 800c78c:	2300      	movs	r3, #0
 800c78e:	e7e4      	b.n	800c75a <__hi0bits+0xa>

0800c790 <__lo0bits>:
 800c790:	6803      	ldr	r3, [r0, #0]
 800c792:	f013 0207 	ands.w	r2, r3, #7
 800c796:	4601      	mov	r1, r0
 800c798:	d00b      	beq.n	800c7b2 <__lo0bits+0x22>
 800c79a:	07da      	lsls	r2, r3, #31
 800c79c:	d423      	bmi.n	800c7e6 <__lo0bits+0x56>
 800c79e:	0798      	lsls	r0, r3, #30
 800c7a0:	bf49      	itett	mi
 800c7a2:	085b      	lsrmi	r3, r3, #1
 800c7a4:	089b      	lsrpl	r3, r3, #2
 800c7a6:	2001      	movmi	r0, #1
 800c7a8:	600b      	strmi	r3, [r1, #0]
 800c7aa:	bf5c      	itt	pl
 800c7ac:	600b      	strpl	r3, [r1, #0]
 800c7ae:	2002      	movpl	r0, #2
 800c7b0:	4770      	bx	lr
 800c7b2:	b298      	uxth	r0, r3
 800c7b4:	b9a8      	cbnz	r0, 800c7e2 <__lo0bits+0x52>
 800c7b6:	0c1b      	lsrs	r3, r3, #16
 800c7b8:	2010      	movs	r0, #16
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	b90a      	cbnz	r2, 800c7c2 <__lo0bits+0x32>
 800c7be:	3008      	adds	r0, #8
 800c7c0:	0a1b      	lsrs	r3, r3, #8
 800c7c2:	071a      	lsls	r2, r3, #28
 800c7c4:	bf04      	itt	eq
 800c7c6:	091b      	lsreq	r3, r3, #4
 800c7c8:	3004      	addeq	r0, #4
 800c7ca:	079a      	lsls	r2, r3, #30
 800c7cc:	bf04      	itt	eq
 800c7ce:	089b      	lsreq	r3, r3, #2
 800c7d0:	3002      	addeq	r0, #2
 800c7d2:	07da      	lsls	r2, r3, #31
 800c7d4:	d403      	bmi.n	800c7de <__lo0bits+0x4e>
 800c7d6:	085b      	lsrs	r3, r3, #1
 800c7d8:	f100 0001 	add.w	r0, r0, #1
 800c7dc:	d005      	beq.n	800c7ea <__lo0bits+0x5a>
 800c7de:	600b      	str	r3, [r1, #0]
 800c7e0:	4770      	bx	lr
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	e7e9      	b.n	800c7ba <__lo0bits+0x2a>
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	4770      	bx	lr
 800c7ea:	2020      	movs	r0, #32
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <__i2b>:
 800c7f0:	b510      	push	{r4, lr}
 800c7f2:	460c      	mov	r4, r1
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	f7ff feb9 	bl	800c56c <_Balloc>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	b928      	cbnz	r0, 800c80a <__i2b+0x1a>
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <__i2b+0x24>)
 800c800:	4805      	ldr	r0, [pc, #20]	; (800c818 <__i2b+0x28>)
 800c802:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c806:	f000 fe01 	bl	800d40c <__assert_func>
 800c80a:	2301      	movs	r3, #1
 800c80c:	6144      	str	r4, [r0, #20]
 800c80e:	6103      	str	r3, [r0, #16]
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop
 800c814:	0800e220 	.word	0x0800e220
 800c818:	0800e2ac 	.word	0x0800e2ac

0800c81c <__multiply>:
 800c81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	4691      	mov	r9, r2
 800c822:	690a      	ldr	r2, [r1, #16]
 800c824:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c828:	429a      	cmp	r2, r3
 800c82a:	bfb8      	it	lt
 800c82c:	460b      	movlt	r3, r1
 800c82e:	460c      	mov	r4, r1
 800c830:	bfbc      	itt	lt
 800c832:	464c      	movlt	r4, r9
 800c834:	4699      	movlt	r9, r3
 800c836:	6927      	ldr	r7, [r4, #16]
 800c838:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	6861      	ldr	r1, [r4, #4]
 800c840:	eb07 060a 	add.w	r6, r7, sl
 800c844:	42b3      	cmp	r3, r6
 800c846:	b085      	sub	sp, #20
 800c848:	bfb8      	it	lt
 800c84a:	3101      	addlt	r1, #1
 800c84c:	f7ff fe8e 	bl	800c56c <_Balloc>
 800c850:	b930      	cbnz	r0, 800c860 <__multiply+0x44>
 800c852:	4602      	mov	r2, r0
 800c854:	4b44      	ldr	r3, [pc, #272]	; (800c968 <__multiply+0x14c>)
 800c856:	4845      	ldr	r0, [pc, #276]	; (800c96c <__multiply+0x150>)
 800c858:	f240 115d 	movw	r1, #349	; 0x15d
 800c85c:	f000 fdd6 	bl	800d40c <__assert_func>
 800c860:	f100 0514 	add.w	r5, r0, #20
 800c864:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c868:	462b      	mov	r3, r5
 800c86a:	2200      	movs	r2, #0
 800c86c:	4543      	cmp	r3, r8
 800c86e:	d321      	bcc.n	800c8b4 <__multiply+0x98>
 800c870:	f104 0314 	add.w	r3, r4, #20
 800c874:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c878:	f109 0314 	add.w	r3, r9, #20
 800c87c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c880:	9202      	str	r2, [sp, #8]
 800c882:	1b3a      	subs	r2, r7, r4
 800c884:	3a15      	subs	r2, #21
 800c886:	f022 0203 	bic.w	r2, r2, #3
 800c88a:	3204      	adds	r2, #4
 800c88c:	f104 0115 	add.w	r1, r4, #21
 800c890:	428f      	cmp	r7, r1
 800c892:	bf38      	it	cc
 800c894:	2204      	movcc	r2, #4
 800c896:	9201      	str	r2, [sp, #4]
 800c898:	9a02      	ldr	r2, [sp, #8]
 800c89a:	9303      	str	r3, [sp, #12]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d80c      	bhi.n	800c8ba <__multiply+0x9e>
 800c8a0:	2e00      	cmp	r6, #0
 800c8a2:	dd03      	ble.n	800c8ac <__multiply+0x90>
 800c8a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d05a      	beq.n	800c962 <__multiply+0x146>
 800c8ac:	6106      	str	r6, [r0, #16]
 800c8ae:	b005      	add	sp, #20
 800c8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b4:	f843 2b04 	str.w	r2, [r3], #4
 800c8b8:	e7d8      	b.n	800c86c <__multiply+0x50>
 800c8ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8be:	f1ba 0f00 	cmp.w	sl, #0
 800c8c2:	d024      	beq.n	800c90e <__multiply+0xf2>
 800c8c4:	f104 0e14 	add.w	lr, r4, #20
 800c8c8:	46a9      	mov	r9, r5
 800c8ca:	f04f 0c00 	mov.w	ip, #0
 800c8ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8d2:	f8d9 1000 	ldr.w	r1, [r9]
 800c8d6:	fa1f fb82 	uxth.w	fp, r2
 800c8da:	b289      	uxth	r1, r1
 800c8dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c8e8:	4461      	add	r1, ip
 800c8ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800c8f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8f6:	b289      	uxth	r1, r1
 800c8f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8fc:	4577      	cmp	r7, lr
 800c8fe:	f849 1b04 	str.w	r1, [r9], #4
 800c902:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c906:	d8e2      	bhi.n	800c8ce <__multiply+0xb2>
 800c908:	9a01      	ldr	r2, [sp, #4]
 800c90a:	f845 c002 	str.w	ip, [r5, r2]
 800c90e:	9a03      	ldr	r2, [sp, #12]
 800c910:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c914:	3304      	adds	r3, #4
 800c916:	f1b9 0f00 	cmp.w	r9, #0
 800c91a:	d020      	beq.n	800c95e <__multiply+0x142>
 800c91c:	6829      	ldr	r1, [r5, #0]
 800c91e:	f104 0c14 	add.w	ip, r4, #20
 800c922:	46ae      	mov	lr, r5
 800c924:	f04f 0a00 	mov.w	sl, #0
 800c928:	f8bc b000 	ldrh.w	fp, [ip]
 800c92c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c930:	fb09 220b 	mla	r2, r9, fp, r2
 800c934:	4492      	add	sl, r2
 800c936:	b289      	uxth	r1, r1
 800c938:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c93c:	f84e 1b04 	str.w	r1, [lr], #4
 800c940:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c944:	f8be 1000 	ldrh.w	r1, [lr]
 800c948:	0c12      	lsrs	r2, r2, #16
 800c94a:	fb09 1102 	mla	r1, r9, r2, r1
 800c94e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c952:	4567      	cmp	r7, ip
 800c954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c958:	d8e6      	bhi.n	800c928 <__multiply+0x10c>
 800c95a:	9a01      	ldr	r2, [sp, #4]
 800c95c:	50a9      	str	r1, [r5, r2]
 800c95e:	3504      	adds	r5, #4
 800c960:	e79a      	b.n	800c898 <__multiply+0x7c>
 800c962:	3e01      	subs	r6, #1
 800c964:	e79c      	b.n	800c8a0 <__multiply+0x84>
 800c966:	bf00      	nop
 800c968:	0800e220 	.word	0x0800e220
 800c96c:	0800e2ac 	.word	0x0800e2ac

0800c970 <__pow5mult>:
 800c970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c974:	4615      	mov	r5, r2
 800c976:	f012 0203 	ands.w	r2, r2, #3
 800c97a:	4606      	mov	r6, r0
 800c97c:	460f      	mov	r7, r1
 800c97e:	d007      	beq.n	800c990 <__pow5mult+0x20>
 800c980:	4c25      	ldr	r4, [pc, #148]	; (800ca18 <__pow5mult+0xa8>)
 800c982:	3a01      	subs	r2, #1
 800c984:	2300      	movs	r3, #0
 800c986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c98a:	f7ff fe51 	bl	800c630 <__multadd>
 800c98e:	4607      	mov	r7, r0
 800c990:	10ad      	asrs	r5, r5, #2
 800c992:	d03d      	beq.n	800ca10 <__pow5mult+0xa0>
 800c994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c996:	b97c      	cbnz	r4, 800c9b8 <__pow5mult+0x48>
 800c998:	2010      	movs	r0, #16
 800c99a:	f7ff fdbf 	bl	800c51c <malloc>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9a2:	b928      	cbnz	r0, 800c9b0 <__pow5mult+0x40>
 800c9a4:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <__pow5mult+0xac>)
 800c9a6:	481e      	ldr	r0, [pc, #120]	; (800ca20 <__pow5mult+0xb0>)
 800c9a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9ac:	f000 fd2e 	bl	800d40c <__assert_func>
 800c9b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9b4:	6004      	str	r4, [r0, #0]
 800c9b6:	60c4      	str	r4, [r0, #12]
 800c9b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9c0:	b94c      	cbnz	r4, 800c9d6 <__pow5mult+0x66>
 800c9c2:	f240 2171 	movw	r1, #625	; 0x271
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7ff ff12 	bl	800c7f0 <__i2b>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	6003      	str	r3, [r0, #0]
 800c9d6:	f04f 0900 	mov.w	r9, #0
 800c9da:	07eb      	lsls	r3, r5, #31
 800c9dc:	d50a      	bpl.n	800c9f4 <__pow5mult+0x84>
 800c9de:	4639      	mov	r1, r7
 800c9e0:	4622      	mov	r2, r4
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7ff ff1a 	bl	800c81c <__multiply>
 800c9e8:	4639      	mov	r1, r7
 800c9ea:	4680      	mov	r8, r0
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7ff fdfd 	bl	800c5ec <_Bfree>
 800c9f2:	4647      	mov	r7, r8
 800c9f4:	106d      	asrs	r5, r5, #1
 800c9f6:	d00b      	beq.n	800ca10 <__pow5mult+0xa0>
 800c9f8:	6820      	ldr	r0, [r4, #0]
 800c9fa:	b938      	cbnz	r0, 800ca0c <__pow5mult+0x9c>
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7ff ff0b 	bl	800c81c <__multiply>
 800ca06:	6020      	str	r0, [r4, #0]
 800ca08:	f8c0 9000 	str.w	r9, [r0]
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	e7e4      	b.n	800c9da <__pow5mult+0x6a>
 800ca10:	4638      	mov	r0, r7
 800ca12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca16:	bf00      	nop
 800ca18:	0800e3f8 	.word	0x0800e3f8
 800ca1c:	0800e1ae 	.word	0x0800e1ae
 800ca20:	0800e2ac 	.word	0x0800e2ac

0800ca24 <__lshift>:
 800ca24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca28:	460c      	mov	r4, r1
 800ca2a:	6849      	ldr	r1, [r1, #4]
 800ca2c:	6923      	ldr	r3, [r4, #16]
 800ca2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	4607      	mov	r7, r0
 800ca36:	4691      	mov	r9, r2
 800ca38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca3c:	f108 0601 	add.w	r6, r8, #1
 800ca40:	42b3      	cmp	r3, r6
 800ca42:	db0b      	blt.n	800ca5c <__lshift+0x38>
 800ca44:	4638      	mov	r0, r7
 800ca46:	f7ff fd91 	bl	800c56c <_Balloc>
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	b948      	cbnz	r0, 800ca62 <__lshift+0x3e>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	4b2a      	ldr	r3, [pc, #168]	; (800cafc <__lshift+0xd8>)
 800ca52:	482b      	ldr	r0, [pc, #172]	; (800cb00 <__lshift+0xdc>)
 800ca54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca58:	f000 fcd8 	bl	800d40c <__assert_func>
 800ca5c:	3101      	adds	r1, #1
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	e7ee      	b.n	800ca40 <__lshift+0x1c>
 800ca62:	2300      	movs	r3, #0
 800ca64:	f100 0114 	add.w	r1, r0, #20
 800ca68:	f100 0210 	add.w	r2, r0, #16
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	4553      	cmp	r3, sl
 800ca70:	db37      	blt.n	800cae2 <__lshift+0xbe>
 800ca72:	6920      	ldr	r0, [r4, #16]
 800ca74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca78:	f104 0314 	add.w	r3, r4, #20
 800ca7c:	f019 091f 	ands.w	r9, r9, #31
 800ca80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ca88:	d02f      	beq.n	800caea <__lshift+0xc6>
 800ca8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca8e:	468a      	mov	sl, r1
 800ca90:	f04f 0c00 	mov.w	ip, #0
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	fa02 f209 	lsl.w	r2, r2, r9
 800ca9a:	ea42 020c 	orr.w	r2, r2, ip
 800ca9e:	f84a 2b04 	str.w	r2, [sl], #4
 800caa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa6:	4298      	cmp	r0, r3
 800caa8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800caac:	d8f2      	bhi.n	800ca94 <__lshift+0x70>
 800caae:	1b03      	subs	r3, r0, r4
 800cab0:	3b15      	subs	r3, #21
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	3304      	adds	r3, #4
 800cab8:	f104 0215 	add.w	r2, r4, #21
 800cabc:	4290      	cmp	r0, r2
 800cabe:	bf38      	it	cc
 800cac0:	2304      	movcc	r3, #4
 800cac2:	f841 c003 	str.w	ip, [r1, r3]
 800cac6:	f1bc 0f00 	cmp.w	ip, #0
 800caca:	d001      	beq.n	800cad0 <__lshift+0xac>
 800cacc:	f108 0602 	add.w	r6, r8, #2
 800cad0:	3e01      	subs	r6, #1
 800cad2:	4638      	mov	r0, r7
 800cad4:	612e      	str	r6, [r5, #16]
 800cad6:	4621      	mov	r1, r4
 800cad8:	f7ff fd88 	bl	800c5ec <_Bfree>
 800cadc:	4628      	mov	r0, r5
 800cade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cae2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cae6:	3301      	adds	r3, #1
 800cae8:	e7c1      	b.n	800ca6e <__lshift+0x4a>
 800caea:	3904      	subs	r1, #4
 800caec:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800caf4:	4298      	cmp	r0, r3
 800caf6:	d8f9      	bhi.n	800caec <__lshift+0xc8>
 800caf8:	e7ea      	b.n	800cad0 <__lshift+0xac>
 800cafa:	bf00      	nop
 800cafc:	0800e220 	.word	0x0800e220
 800cb00:	0800e2ac 	.word	0x0800e2ac

0800cb04 <__mcmp>:
 800cb04:	b530      	push	{r4, r5, lr}
 800cb06:	6902      	ldr	r2, [r0, #16]
 800cb08:	690c      	ldr	r4, [r1, #16]
 800cb0a:	1b12      	subs	r2, r2, r4
 800cb0c:	d10e      	bne.n	800cb2c <__mcmp+0x28>
 800cb0e:	f100 0314 	add.w	r3, r0, #20
 800cb12:	3114      	adds	r1, #20
 800cb14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb24:	42a5      	cmp	r5, r4
 800cb26:	d003      	beq.n	800cb30 <__mcmp+0x2c>
 800cb28:	d305      	bcc.n	800cb36 <__mcmp+0x32>
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	4610      	mov	r0, r2
 800cb2e:	bd30      	pop	{r4, r5, pc}
 800cb30:	4283      	cmp	r3, r0
 800cb32:	d3f3      	bcc.n	800cb1c <__mcmp+0x18>
 800cb34:	e7fa      	b.n	800cb2c <__mcmp+0x28>
 800cb36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb3a:	e7f7      	b.n	800cb2c <__mcmp+0x28>

0800cb3c <__mdiff>:
 800cb3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	460c      	mov	r4, r1
 800cb42:	4606      	mov	r6, r0
 800cb44:	4611      	mov	r1, r2
 800cb46:	4620      	mov	r0, r4
 800cb48:	4690      	mov	r8, r2
 800cb4a:	f7ff ffdb 	bl	800cb04 <__mcmp>
 800cb4e:	1e05      	subs	r5, r0, #0
 800cb50:	d110      	bne.n	800cb74 <__mdiff+0x38>
 800cb52:	4629      	mov	r1, r5
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7ff fd09 	bl	800c56c <_Balloc>
 800cb5a:	b930      	cbnz	r0, 800cb6a <__mdiff+0x2e>
 800cb5c:	4b3a      	ldr	r3, [pc, #232]	; (800cc48 <__mdiff+0x10c>)
 800cb5e:	4602      	mov	r2, r0
 800cb60:	f240 2132 	movw	r1, #562	; 0x232
 800cb64:	4839      	ldr	r0, [pc, #228]	; (800cc4c <__mdiff+0x110>)
 800cb66:	f000 fc51 	bl	800d40c <__assert_func>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb74:	bfa4      	itt	ge
 800cb76:	4643      	movge	r3, r8
 800cb78:	46a0      	movge	r8, r4
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb80:	bfa6      	itte	ge
 800cb82:	461c      	movge	r4, r3
 800cb84:	2500      	movge	r5, #0
 800cb86:	2501      	movlt	r5, #1
 800cb88:	f7ff fcf0 	bl	800c56c <_Balloc>
 800cb8c:	b920      	cbnz	r0, 800cb98 <__mdiff+0x5c>
 800cb8e:	4b2e      	ldr	r3, [pc, #184]	; (800cc48 <__mdiff+0x10c>)
 800cb90:	4602      	mov	r2, r0
 800cb92:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cb96:	e7e5      	b.n	800cb64 <__mdiff+0x28>
 800cb98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb9c:	6926      	ldr	r6, [r4, #16]
 800cb9e:	60c5      	str	r5, [r0, #12]
 800cba0:	f104 0914 	add.w	r9, r4, #20
 800cba4:	f108 0514 	add.w	r5, r8, #20
 800cba8:	f100 0e14 	add.w	lr, r0, #20
 800cbac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cbb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbb4:	f108 0210 	add.w	r2, r8, #16
 800cbb8:	46f2      	mov	sl, lr
 800cbba:	2100      	movs	r1, #0
 800cbbc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbc4:	fa1f f883 	uxth.w	r8, r3
 800cbc8:	fa11 f18b 	uxtah	r1, r1, fp
 800cbcc:	0c1b      	lsrs	r3, r3, #16
 800cbce:	eba1 0808 	sub.w	r8, r1, r8
 800cbd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbda:	fa1f f888 	uxth.w	r8, r8
 800cbde:	1419      	asrs	r1, r3, #16
 800cbe0:	454e      	cmp	r6, r9
 800cbe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cbe6:	f84a 3b04 	str.w	r3, [sl], #4
 800cbea:	d8e7      	bhi.n	800cbbc <__mdiff+0x80>
 800cbec:	1b33      	subs	r3, r6, r4
 800cbee:	3b15      	subs	r3, #21
 800cbf0:	f023 0303 	bic.w	r3, r3, #3
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	3415      	adds	r4, #21
 800cbf8:	42a6      	cmp	r6, r4
 800cbfa:	bf38      	it	cc
 800cbfc:	2304      	movcc	r3, #4
 800cbfe:	441d      	add	r5, r3
 800cc00:	4473      	add	r3, lr
 800cc02:	469e      	mov	lr, r3
 800cc04:	462e      	mov	r6, r5
 800cc06:	4566      	cmp	r6, ip
 800cc08:	d30e      	bcc.n	800cc28 <__mdiff+0xec>
 800cc0a:	f10c 0203 	add.w	r2, ip, #3
 800cc0e:	1b52      	subs	r2, r2, r5
 800cc10:	f022 0203 	bic.w	r2, r2, #3
 800cc14:	3d03      	subs	r5, #3
 800cc16:	45ac      	cmp	ip, r5
 800cc18:	bf38      	it	cc
 800cc1a:	2200      	movcc	r2, #0
 800cc1c:	441a      	add	r2, r3
 800cc1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc22:	b17b      	cbz	r3, 800cc44 <__mdiff+0x108>
 800cc24:	6107      	str	r7, [r0, #16]
 800cc26:	e7a3      	b.n	800cb70 <__mdiff+0x34>
 800cc28:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc2c:	fa11 f288 	uxtah	r2, r1, r8
 800cc30:	1414      	asrs	r4, r2, #16
 800cc32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc36:	b292      	uxth	r2, r2
 800cc38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc3c:	f84e 2b04 	str.w	r2, [lr], #4
 800cc40:	1421      	asrs	r1, r4, #16
 800cc42:	e7e0      	b.n	800cc06 <__mdiff+0xca>
 800cc44:	3f01      	subs	r7, #1
 800cc46:	e7ea      	b.n	800cc1e <__mdiff+0xe2>
 800cc48:	0800e220 	.word	0x0800e220
 800cc4c:	0800e2ac 	.word	0x0800e2ac

0800cc50 <__ulp>:
 800cc50:	b082      	sub	sp, #8
 800cc52:	ed8d 0b00 	vstr	d0, [sp]
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	4912      	ldr	r1, [pc, #72]	; (800cca4 <__ulp+0x54>)
 800cc5a:	4019      	ands	r1, r3
 800cc5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cc60:	2900      	cmp	r1, #0
 800cc62:	dd05      	ble.n	800cc70 <__ulp+0x20>
 800cc64:	2200      	movs	r2, #0
 800cc66:	460b      	mov	r3, r1
 800cc68:	ec43 2b10 	vmov	d0, r2, r3
 800cc6c:	b002      	add	sp, #8
 800cc6e:	4770      	bx	lr
 800cc70:	4249      	negs	r1, r1
 800cc72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cc76:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cc7a:	f04f 0200 	mov.w	r2, #0
 800cc7e:	f04f 0300 	mov.w	r3, #0
 800cc82:	da04      	bge.n	800cc8e <__ulp+0x3e>
 800cc84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cc88:	fa41 f300 	asr.w	r3, r1, r0
 800cc8c:	e7ec      	b.n	800cc68 <__ulp+0x18>
 800cc8e:	f1a0 0114 	sub.w	r1, r0, #20
 800cc92:	291e      	cmp	r1, #30
 800cc94:	bfda      	itte	le
 800cc96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cc9a:	fa20 f101 	lsrle.w	r1, r0, r1
 800cc9e:	2101      	movgt	r1, #1
 800cca0:	460a      	mov	r2, r1
 800cca2:	e7e1      	b.n	800cc68 <__ulp+0x18>
 800cca4:	7ff00000 	.word	0x7ff00000

0800cca8 <__b2d>:
 800cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccaa:	6905      	ldr	r5, [r0, #16]
 800ccac:	f100 0714 	add.w	r7, r0, #20
 800ccb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ccb4:	1f2e      	subs	r6, r5, #4
 800ccb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f7ff fd48 	bl	800c750 <__hi0bits>
 800ccc0:	f1c0 0320 	rsb	r3, r0, #32
 800ccc4:	280a      	cmp	r0, #10
 800ccc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cd44 <__b2d+0x9c>
 800ccca:	600b      	str	r3, [r1, #0]
 800cccc:	dc14      	bgt.n	800ccf8 <__b2d+0x50>
 800ccce:	f1c0 0e0b 	rsb	lr, r0, #11
 800ccd2:	fa24 f10e 	lsr.w	r1, r4, lr
 800ccd6:	42b7      	cmp	r7, r6
 800ccd8:	ea41 030c 	orr.w	r3, r1, ip
 800ccdc:	bf34      	ite	cc
 800ccde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cce2:	2100      	movcs	r1, #0
 800cce4:	3015      	adds	r0, #21
 800cce6:	fa04 f000 	lsl.w	r0, r4, r0
 800ccea:	fa21 f10e 	lsr.w	r1, r1, lr
 800ccee:	ea40 0201 	orr.w	r2, r0, r1
 800ccf2:	ec43 2b10 	vmov	d0, r2, r3
 800ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccf8:	42b7      	cmp	r7, r6
 800ccfa:	bf3a      	itte	cc
 800ccfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd00:	f1a5 0608 	subcc.w	r6, r5, #8
 800cd04:	2100      	movcs	r1, #0
 800cd06:	380b      	subs	r0, #11
 800cd08:	d017      	beq.n	800cd3a <__b2d+0x92>
 800cd0a:	f1c0 0c20 	rsb	ip, r0, #32
 800cd0e:	fa04 f500 	lsl.w	r5, r4, r0
 800cd12:	42be      	cmp	r6, r7
 800cd14:	fa21 f40c 	lsr.w	r4, r1, ip
 800cd18:	ea45 0504 	orr.w	r5, r5, r4
 800cd1c:	bf8c      	ite	hi
 800cd1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cd22:	2400      	movls	r4, #0
 800cd24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cd28:	fa01 f000 	lsl.w	r0, r1, r0
 800cd2c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cd30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd34:	ea40 0204 	orr.w	r2, r0, r4
 800cd38:	e7db      	b.n	800ccf2 <__b2d+0x4a>
 800cd3a:	ea44 030c 	orr.w	r3, r4, ip
 800cd3e:	460a      	mov	r2, r1
 800cd40:	e7d7      	b.n	800ccf2 <__b2d+0x4a>
 800cd42:	bf00      	nop
 800cd44:	3ff00000 	.word	0x3ff00000

0800cd48 <__d2b>:
 800cd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd4c:	4689      	mov	r9, r1
 800cd4e:	2101      	movs	r1, #1
 800cd50:	ec57 6b10 	vmov	r6, r7, d0
 800cd54:	4690      	mov	r8, r2
 800cd56:	f7ff fc09 	bl	800c56c <_Balloc>
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	b930      	cbnz	r0, 800cd6c <__d2b+0x24>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	4b25      	ldr	r3, [pc, #148]	; (800cdf8 <__d2b+0xb0>)
 800cd62:	4826      	ldr	r0, [pc, #152]	; (800cdfc <__d2b+0xb4>)
 800cd64:	f240 310a 	movw	r1, #778	; 0x30a
 800cd68:	f000 fb50 	bl	800d40c <__assert_func>
 800cd6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cd70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cd74:	bb35      	cbnz	r5, 800cdc4 <__d2b+0x7c>
 800cd76:	2e00      	cmp	r6, #0
 800cd78:	9301      	str	r3, [sp, #4]
 800cd7a:	d028      	beq.n	800cdce <__d2b+0x86>
 800cd7c:	4668      	mov	r0, sp
 800cd7e:	9600      	str	r6, [sp, #0]
 800cd80:	f7ff fd06 	bl	800c790 <__lo0bits>
 800cd84:	9900      	ldr	r1, [sp, #0]
 800cd86:	b300      	cbz	r0, 800cdca <__d2b+0x82>
 800cd88:	9a01      	ldr	r2, [sp, #4]
 800cd8a:	f1c0 0320 	rsb	r3, r0, #32
 800cd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd92:	430b      	orrs	r3, r1
 800cd94:	40c2      	lsrs	r2, r0
 800cd96:	6163      	str	r3, [r4, #20]
 800cd98:	9201      	str	r2, [sp, #4]
 800cd9a:	9b01      	ldr	r3, [sp, #4]
 800cd9c:	61a3      	str	r3, [r4, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bf14      	ite	ne
 800cda2:	2202      	movne	r2, #2
 800cda4:	2201      	moveq	r2, #1
 800cda6:	6122      	str	r2, [r4, #16]
 800cda8:	b1d5      	cbz	r5, 800cde0 <__d2b+0x98>
 800cdaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cdae:	4405      	add	r5, r0
 800cdb0:	f8c9 5000 	str.w	r5, [r9]
 800cdb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cdb8:	f8c8 0000 	str.w	r0, [r8]
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	b003      	add	sp, #12
 800cdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc8:	e7d5      	b.n	800cd76 <__d2b+0x2e>
 800cdca:	6161      	str	r1, [r4, #20]
 800cdcc:	e7e5      	b.n	800cd9a <__d2b+0x52>
 800cdce:	a801      	add	r0, sp, #4
 800cdd0:	f7ff fcde 	bl	800c790 <__lo0bits>
 800cdd4:	9b01      	ldr	r3, [sp, #4]
 800cdd6:	6163      	str	r3, [r4, #20]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	6122      	str	r2, [r4, #16]
 800cddc:	3020      	adds	r0, #32
 800cdde:	e7e3      	b.n	800cda8 <__d2b+0x60>
 800cde0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cde4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cde8:	f8c9 0000 	str.w	r0, [r9]
 800cdec:	6918      	ldr	r0, [r3, #16]
 800cdee:	f7ff fcaf 	bl	800c750 <__hi0bits>
 800cdf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdf6:	e7df      	b.n	800cdb8 <__d2b+0x70>
 800cdf8:	0800e220 	.word	0x0800e220
 800cdfc:	0800e2ac 	.word	0x0800e2ac

0800ce00 <__ratio>:
 800ce00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	4688      	mov	r8, r1
 800ce06:	4669      	mov	r1, sp
 800ce08:	4681      	mov	r9, r0
 800ce0a:	f7ff ff4d 	bl	800cca8 <__b2d>
 800ce0e:	a901      	add	r1, sp, #4
 800ce10:	4640      	mov	r0, r8
 800ce12:	ec55 4b10 	vmov	r4, r5, d0
 800ce16:	f7ff ff47 	bl	800cca8 <__b2d>
 800ce1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce22:	eba3 0c02 	sub.w	ip, r3, r2
 800ce26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce2a:	1a9b      	subs	r3, r3, r2
 800ce2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ce30:	ec51 0b10 	vmov	r0, r1, d0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bfd6      	itet	le
 800ce38:	460a      	movle	r2, r1
 800ce3a:	462a      	movgt	r2, r5
 800ce3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce40:	468b      	mov	fp, r1
 800ce42:	462f      	mov	r7, r5
 800ce44:	bfd4      	ite	le
 800ce46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ce4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce4e:	4620      	mov	r0, r4
 800ce50:	ee10 2a10 	vmov	r2, s0
 800ce54:	465b      	mov	r3, fp
 800ce56:	4639      	mov	r1, r7
 800ce58:	f7f3 fcf8 	bl	800084c <__aeabi_ddiv>
 800ce5c:	ec41 0b10 	vmov	d0, r0, r1
 800ce60:	b003      	add	sp, #12
 800ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce66 <__copybits>:
 800ce66:	3901      	subs	r1, #1
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	1149      	asrs	r1, r1, #5
 800ce6c:	6914      	ldr	r4, [r2, #16]
 800ce6e:	3101      	adds	r1, #1
 800ce70:	f102 0314 	add.w	r3, r2, #20
 800ce74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce7c:	1f05      	subs	r5, r0, #4
 800ce7e:	42a3      	cmp	r3, r4
 800ce80:	d30c      	bcc.n	800ce9c <__copybits+0x36>
 800ce82:	1aa3      	subs	r3, r4, r2
 800ce84:	3b11      	subs	r3, #17
 800ce86:	f023 0303 	bic.w	r3, r3, #3
 800ce8a:	3211      	adds	r2, #17
 800ce8c:	42a2      	cmp	r2, r4
 800ce8e:	bf88      	it	hi
 800ce90:	2300      	movhi	r3, #0
 800ce92:	4418      	add	r0, r3
 800ce94:	2300      	movs	r3, #0
 800ce96:	4288      	cmp	r0, r1
 800ce98:	d305      	bcc.n	800cea6 <__copybits+0x40>
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cea0:	f845 6f04 	str.w	r6, [r5, #4]!
 800cea4:	e7eb      	b.n	800ce7e <__copybits+0x18>
 800cea6:	f840 3b04 	str.w	r3, [r0], #4
 800ceaa:	e7f4      	b.n	800ce96 <__copybits+0x30>

0800ceac <__any_on>:
 800ceac:	f100 0214 	add.w	r2, r0, #20
 800ceb0:	6900      	ldr	r0, [r0, #16]
 800ceb2:	114b      	asrs	r3, r1, #5
 800ceb4:	4298      	cmp	r0, r3
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	db11      	blt.n	800cede <__any_on+0x32>
 800ceba:	dd0a      	ble.n	800ced2 <__any_on+0x26>
 800cebc:	f011 011f 	ands.w	r1, r1, #31
 800cec0:	d007      	beq.n	800ced2 <__any_on+0x26>
 800cec2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cec6:	fa24 f001 	lsr.w	r0, r4, r1
 800ceca:	fa00 f101 	lsl.w	r1, r0, r1
 800cece:	428c      	cmp	r4, r1
 800ced0:	d10b      	bne.n	800ceea <__any_on+0x3e>
 800ced2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d803      	bhi.n	800cee2 <__any_on+0x36>
 800ceda:	2000      	movs	r0, #0
 800cedc:	bd10      	pop	{r4, pc}
 800cede:	4603      	mov	r3, r0
 800cee0:	e7f7      	b.n	800ced2 <__any_on+0x26>
 800cee2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cee6:	2900      	cmp	r1, #0
 800cee8:	d0f5      	beq.n	800ced6 <__any_on+0x2a>
 800ceea:	2001      	movs	r0, #1
 800ceec:	e7f6      	b.n	800cedc <__any_on+0x30>

0800ceee <_calloc_r>:
 800ceee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef0:	fba1 2402 	umull	r2, r4, r1, r2
 800cef4:	b94c      	cbnz	r4, 800cf0a <_calloc_r+0x1c>
 800cef6:	4611      	mov	r1, r2
 800cef8:	9201      	str	r2, [sp, #4]
 800cefa:	f000 f87b 	bl	800cff4 <_malloc_r>
 800cefe:	9a01      	ldr	r2, [sp, #4]
 800cf00:	4605      	mov	r5, r0
 800cf02:	b930      	cbnz	r0, 800cf12 <_calloc_r+0x24>
 800cf04:	4628      	mov	r0, r5
 800cf06:	b003      	add	sp, #12
 800cf08:	bd30      	pop	{r4, r5, pc}
 800cf0a:	220c      	movs	r2, #12
 800cf0c:	6002      	str	r2, [r0, #0]
 800cf0e:	2500      	movs	r5, #0
 800cf10:	e7f8      	b.n	800cf04 <_calloc_r+0x16>
 800cf12:	4621      	mov	r1, r4
 800cf14:	f7fc fbc0 	bl	8009698 <memset>
 800cf18:	e7f4      	b.n	800cf04 <_calloc_r+0x16>
	...

0800cf1c <_free_r>:
 800cf1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf1e:	2900      	cmp	r1, #0
 800cf20:	d044      	beq.n	800cfac <_free_r+0x90>
 800cf22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf26:	9001      	str	r0, [sp, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf2e:	bfb8      	it	lt
 800cf30:	18e4      	addlt	r4, r4, r3
 800cf32:	f000 fab5 	bl	800d4a0 <__malloc_lock>
 800cf36:	4a1e      	ldr	r2, [pc, #120]	; (800cfb0 <_free_r+0x94>)
 800cf38:	9801      	ldr	r0, [sp, #4]
 800cf3a:	6813      	ldr	r3, [r2, #0]
 800cf3c:	b933      	cbnz	r3, 800cf4c <_free_r+0x30>
 800cf3e:	6063      	str	r3, [r4, #4]
 800cf40:	6014      	str	r4, [r2, #0]
 800cf42:	b003      	add	sp, #12
 800cf44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf48:	f000 bab0 	b.w	800d4ac <__malloc_unlock>
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d908      	bls.n	800cf62 <_free_r+0x46>
 800cf50:	6825      	ldr	r5, [r4, #0]
 800cf52:	1961      	adds	r1, r4, r5
 800cf54:	428b      	cmp	r3, r1
 800cf56:	bf01      	itttt	eq
 800cf58:	6819      	ldreq	r1, [r3, #0]
 800cf5a:	685b      	ldreq	r3, [r3, #4]
 800cf5c:	1949      	addeq	r1, r1, r5
 800cf5e:	6021      	streq	r1, [r4, #0]
 800cf60:	e7ed      	b.n	800cf3e <_free_r+0x22>
 800cf62:	461a      	mov	r2, r3
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	b10b      	cbz	r3, 800cf6c <_free_r+0x50>
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	d9fa      	bls.n	800cf62 <_free_r+0x46>
 800cf6c:	6811      	ldr	r1, [r2, #0]
 800cf6e:	1855      	adds	r5, r2, r1
 800cf70:	42a5      	cmp	r5, r4
 800cf72:	d10b      	bne.n	800cf8c <_free_r+0x70>
 800cf74:	6824      	ldr	r4, [r4, #0]
 800cf76:	4421      	add	r1, r4
 800cf78:	1854      	adds	r4, r2, r1
 800cf7a:	42a3      	cmp	r3, r4
 800cf7c:	6011      	str	r1, [r2, #0]
 800cf7e:	d1e0      	bne.n	800cf42 <_free_r+0x26>
 800cf80:	681c      	ldr	r4, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	6053      	str	r3, [r2, #4]
 800cf86:	4421      	add	r1, r4
 800cf88:	6011      	str	r1, [r2, #0]
 800cf8a:	e7da      	b.n	800cf42 <_free_r+0x26>
 800cf8c:	d902      	bls.n	800cf94 <_free_r+0x78>
 800cf8e:	230c      	movs	r3, #12
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	e7d6      	b.n	800cf42 <_free_r+0x26>
 800cf94:	6825      	ldr	r5, [r4, #0]
 800cf96:	1961      	adds	r1, r4, r5
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	bf04      	itt	eq
 800cf9c:	6819      	ldreq	r1, [r3, #0]
 800cf9e:	685b      	ldreq	r3, [r3, #4]
 800cfa0:	6063      	str	r3, [r4, #4]
 800cfa2:	bf04      	itt	eq
 800cfa4:	1949      	addeq	r1, r1, r5
 800cfa6:	6021      	streq	r1, [r4, #0]
 800cfa8:	6054      	str	r4, [r2, #4]
 800cfaa:	e7ca      	b.n	800cf42 <_free_r+0x26>
 800cfac:	b003      	add	sp, #12
 800cfae:	bd30      	pop	{r4, r5, pc}
 800cfb0:	20002018 	.word	0x20002018

0800cfb4 <sbrk_aligned>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	4e0e      	ldr	r6, [pc, #56]	; (800cff0 <sbrk_aligned+0x3c>)
 800cfb8:	460c      	mov	r4, r1
 800cfba:	6831      	ldr	r1, [r6, #0]
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	b911      	cbnz	r1, 800cfc6 <sbrk_aligned+0x12>
 800cfc0:	f000 f9f2 	bl	800d3a8 <_sbrk_r>
 800cfc4:	6030      	str	r0, [r6, #0]
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4628      	mov	r0, r5
 800cfca:	f000 f9ed 	bl	800d3a8 <_sbrk_r>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	d00a      	beq.n	800cfe8 <sbrk_aligned+0x34>
 800cfd2:	1cc4      	adds	r4, r0, #3
 800cfd4:	f024 0403 	bic.w	r4, r4, #3
 800cfd8:	42a0      	cmp	r0, r4
 800cfda:	d007      	beq.n	800cfec <sbrk_aligned+0x38>
 800cfdc:	1a21      	subs	r1, r4, r0
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f000 f9e2 	bl	800d3a8 <_sbrk_r>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d101      	bne.n	800cfec <sbrk_aligned+0x38>
 800cfe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cfec:	4620      	mov	r0, r4
 800cfee:	bd70      	pop	{r4, r5, r6, pc}
 800cff0:	2000201c 	.word	0x2000201c

0800cff4 <_malloc_r>:
 800cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff8:	1ccd      	adds	r5, r1, #3
 800cffa:	f025 0503 	bic.w	r5, r5, #3
 800cffe:	3508      	adds	r5, #8
 800d000:	2d0c      	cmp	r5, #12
 800d002:	bf38      	it	cc
 800d004:	250c      	movcc	r5, #12
 800d006:	2d00      	cmp	r5, #0
 800d008:	4607      	mov	r7, r0
 800d00a:	db01      	blt.n	800d010 <_malloc_r+0x1c>
 800d00c:	42a9      	cmp	r1, r5
 800d00e:	d905      	bls.n	800d01c <_malloc_r+0x28>
 800d010:	230c      	movs	r3, #12
 800d012:	603b      	str	r3, [r7, #0]
 800d014:	2600      	movs	r6, #0
 800d016:	4630      	mov	r0, r6
 800d018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01c:	4e2e      	ldr	r6, [pc, #184]	; (800d0d8 <_malloc_r+0xe4>)
 800d01e:	f000 fa3f 	bl	800d4a0 <__malloc_lock>
 800d022:	6833      	ldr	r3, [r6, #0]
 800d024:	461c      	mov	r4, r3
 800d026:	bb34      	cbnz	r4, 800d076 <_malloc_r+0x82>
 800d028:	4629      	mov	r1, r5
 800d02a:	4638      	mov	r0, r7
 800d02c:	f7ff ffc2 	bl	800cfb4 <sbrk_aligned>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	4604      	mov	r4, r0
 800d034:	d14d      	bne.n	800d0d2 <_malloc_r+0xde>
 800d036:	6834      	ldr	r4, [r6, #0]
 800d038:	4626      	mov	r6, r4
 800d03a:	2e00      	cmp	r6, #0
 800d03c:	d140      	bne.n	800d0c0 <_malloc_r+0xcc>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	4631      	mov	r1, r6
 800d042:	4638      	mov	r0, r7
 800d044:	eb04 0803 	add.w	r8, r4, r3
 800d048:	f000 f9ae 	bl	800d3a8 <_sbrk_r>
 800d04c:	4580      	cmp	r8, r0
 800d04e:	d13a      	bne.n	800d0c6 <_malloc_r+0xd2>
 800d050:	6821      	ldr	r1, [r4, #0]
 800d052:	3503      	adds	r5, #3
 800d054:	1a6d      	subs	r5, r5, r1
 800d056:	f025 0503 	bic.w	r5, r5, #3
 800d05a:	3508      	adds	r5, #8
 800d05c:	2d0c      	cmp	r5, #12
 800d05e:	bf38      	it	cc
 800d060:	250c      	movcc	r5, #12
 800d062:	4629      	mov	r1, r5
 800d064:	4638      	mov	r0, r7
 800d066:	f7ff ffa5 	bl	800cfb4 <sbrk_aligned>
 800d06a:	3001      	adds	r0, #1
 800d06c:	d02b      	beq.n	800d0c6 <_malloc_r+0xd2>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	442b      	add	r3, r5
 800d072:	6023      	str	r3, [r4, #0]
 800d074:	e00e      	b.n	800d094 <_malloc_r+0xa0>
 800d076:	6822      	ldr	r2, [r4, #0]
 800d078:	1b52      	subs	r2, r2, r5
 800d07a:	d41e      	bmi.n	800d0ba <_malloc_r+0xc6>
 800d07c:	2a0b      	cmp	r2, #11
 800d07e:	d916      	bls.n	800d0ae <_malloc_r+0xba>
 800d080:	1961      	adds	r1, r4, r5
 800d082:	42a3      	cmp	r3, r4
 800d084:	6025      	str	r5, [r4, #0]
 800d086:	bf18      	it	ne
 800d088:	6059      	strne	r1, [r3, #4]
 800d08a:	6863      	ldr	r3, [r4, #4]
 800d08c:	bf08      	it	eq
 800d08e:	6031      	streq	r1, [r6, #0]
 800d090:	5162      	str	r2, [r4, r5]
 800d092:	604b      	str	r3, [r1, #4]
 800d094:	4638      	mov	r0, r7
 800d096:	f104 060b 	add.w	r6, r4, #11
 800d09a:	f000 fa07 	bl	800d4ac <__malloc_unlock>
 800d09e:	f026 0607 	bic.w	r6, r6, #7
 800d0a2:	1d23      	adds	r3, r4, #4
 800d0a4:	1af2      	subs	r2, r6, r3
 800d0a6:	d0b6      	beq.n	800d016 <_malloc_r+0x22>
 800d0a8:	1b9b      	subs	r3, r3, r6
 800d0aa:	50a3      	str	r3, [r4, r2]
 800d0ac:	e7b3      	b.n	800d016 <_malloc_r+0x22>
 800d0ae:	6862      	ldr	r2, [r4, #4]
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	bf0c      	ite	eq
 800d0b4:	6032      	streq	r2, [r6, #0]
 800d0b6:	605a      	strne	r2, [r3, #4]
 800d0b8:	e7ec      	b.n	800d094 <_malloc_r+0xa0>
 800d0ba:	4623      	mov	r3, r4
 800d0bc:	6864      	ldr	r4, [r4, #4]
 800d0be:	e7b2      	b.n	800d026 <_malloc_r+0x32>
 800d0c0:	4634      	mov	r4, r6
 800d0c2:	6876      	ldr	r6, [r6, #4]
 800d0c4:	e7b9      	b.n	800d03a <_malloc_r+0x46>
 800d0c6:	230c      	movs	r3, #12
 800d0c8:	603b      	str	r3, [r7, #0]
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f000 f9ee 	bl	800d4ac <__malloc_unlock>
 800d0d0:	e7a1      	b.n	800d016 <_malloc_r+0x22>
 800d0d2:	6025      	str	r5, [r4, #0]
 800d0d4:	e7de      	b.n	800d094 <_malloc_r+0xa0>
 800d0d6:	bf00      	nop
 800d0d8:	20002018 	.word	0x20002018

0800d0dc <__ssputs_r>:
 800d0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e0:	688e      	ldr	r6, [r1, #8]
 800d0e2:	429e      	cmp	r6, r3
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	4690      	mov	r8, r2
 800d0ea:	461f      	mov	r7, r3
 800d0ec:	d838      	bhi.n	800d160 <__ssputs_r+0x84>
 800d0ee:	898a      	ldrh	r2, [r1, #12]
 800d0f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0f4:	d032      	beq.n	800d15c <__ssputs_r+0x80>
 800d0f6:	6825      	ldr	r5, [r4, #0]
 800d0f8:	6909      	ldr	r1, [r1, #16]
 800d0fa:	eba5 0901 	sub.w	r9, r5, r1
 800d0fe:	6965      	ldr	r5, [r4, #20]
 800d100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d108:	3301      	adds	r3, #1
 800d10a:	444b      	add	r3, r9
 800d10c:	106d      	asrs	r5, r5, #1
 800d10e:	429d      	cmp	r5, r3
 800d110:	bf38      	it	cc
 800d112:	461d      	movcc	r5, r3
 800d114:	0553      	lsls	r3, r2, #21
 800d116:	d531      	bpl.n	800d17c <__ssputs_r+0xa0>
 800d118:	4629      	mov	r1, r5
 800d11a:	f7ff ff6b 	bl	800cff4 <_malloc_r>
 800d11e:	4606      	mov	r6, r0
 800d120:	b950      	cbnz	r0, 800d138 <__ssputs_r+0x5c>
 800d122:	230c      	movs	r3, #12
 800d124:	f8ca 3000 	str.w	r3, [sl]
 800d128:	89a3      	ldrh	r3, [r4, #12]
 800d12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d12e:	81a3      	strh	r3, [r4, #12]
 800d130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d138:	6921      	ldr	r1, [r4, #16]
 800d13a:	464a      	mov	r2, r9
 800d13c:	f7ff fa08 	bl	800c550 <memcpy>
 800d140:	89a3      	ldrh	r3, [r4, #12]
 800d142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d14a:	81a3      	strh	r3, [r4, #12]
 800d14c:	6126      	str	r6, [r4, #16]
 800d14e:	6165      	str	r5, [r4, #20]
 800d150:	444e      	add	r6, r9
 800d152:	eba5 0509 	sub.w	r5, r5, r9
 800d156:	6026      	str	r6, [r4, #0]
 800d158:	60a5      	str	r5, [r4, #8]
 800d15a:	463e      	mov	r6, r7
 800d15c:	42be      	cmp	r6, r7
 800d15e:	d900      	bls.n	800d162 <__ssputs_r+0x86>
 800d160:	463e      	mov	r6, r7
 800d162:	6820      	ldr	r0, [r4, #0]
 800d164:	4632      	mov	r2, r6
 800d166:	4641      	mov	r1, r8
 800d168:	f000 f980 	bl	800d46c <memmove>
 800d16c:	68a3      	ldr	r3, [r4, #8]
 800d16e:	1b9b      	subs	r3, r3, r6
 800d170:	60a3      	str	r3, [r4, #8]
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	4433      	add	r3, r6
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	2000      	movs	r0, #0
 800d17a:	e7db      	b.n	800d134 <__ssputs_r+0x58>
 800d17c:	462a      	mov	r2, r5
 800d17e:	f000 f99b 	bl	800d4b8 <_realloc_r>
 800d182:	4606      	mov	r6, r0
 800d184:	2800      	cmp	r0, #0
 800d186:	d1e1      	bne.n	800d14c <__ssputs_r+0x70>
 800d188:	6921      	ldr	r1, [r4, #16]
 800d18a:	4650      	mov	r0, sl
 800d18c:	f7ff fec6 	bl	800cf1c <_free_r>
 800d190:	e7c7      	b.n	800d122 <__ssputs_r+0x46>
	...

0800d194 <_svfiprintf_r>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4698      	mov	r8, r3
 800d19a:	898b      	ldrh	r3, [r1, #12]
 800d19c:	061b      	lsls	r3, r3, #24
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	d50e      	bpl.n	800d1c6 <_svfiprintf_r+0x32>
 800d1a8:	690b      	ldr	r3, [r1, #16]
 800d1aa:	b963      	cbnz	r3, 800d1c6 <_svfiprintf_r+0x32>
 800d1ac:	2140      	movs	r1, #64	; 0x40
 800d1ae:	f7ff ff21 	bl	800cff4 <_malloc_r>
 800d1b2:	6028      	str	r0, [r5, #0]
 800d1b4:	6128      	str	r0, [r5, #16]
 800d1b6:	b920      	cbnz	r0, 800d1c2 <_svfiprintf_r+0x2e>
 800d1b8:	230c      	movs	r3, #12
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c0:	e0d1      	b.n	800d366 <_svfiprintf_r+0x1d2>
 800d1c2:	2340      	movs	r3, #64	; 0x40
 800d1c4:	616b      	str	r3, [r5, #20]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ca:	2320      	movs	r3, #32
 800d1cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d4:	2330      	movs	r3, #48	; 0x30
 800d1d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d380 <_svfiprintf_r+0x1ec>
 800d1da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1de:	f04f 0901 	mov.w	r9, #1
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	469a      	mov	sl, r3
 800d1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ea:	b10a      	cbz	r2, 800d1f0 <_svfiprintf_r+0x5c>
 800d1ec:	2a25      	cmp	r2, #37	; 0x25
 800d1ee:	d1f9      	bne.n	800d1e4 <_svfiprintf_r+0x50>
 800d1f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f4:	d00b      	beq.n	800d20e <_svfiprintf_r+0x7a>
 800d1f6:	465b      	mov	r3, fp
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7ff ff6d 	bl	800d0dc <__ssputs_r>
 800d202:	3001      	adds	r0, #1
 800d204:	f000 80aa 	beq.w	800d35c <_svfiprintf_r+0x1c8>
 800d208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20a:	445a      	add	r2, fp
 800d20c:	9209      	str	r2, [sp, #36]	; 0x24
 800d20e:	f89a 3000 	ldrb.w	r3, [sl]
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 80a2 	beq.w	800d35c <_svfiprintf_r+0x1c8>
 800d218:	2300      	movs	r3, #0
 800d21a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d21e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d222:	f10a 0a01 	add.w	sl, sl, #1
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	9307      	str	r3, [sp, #28]
 800d22a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d22e:	931a      	str	r3, [sp, #104]	; 0x68
 800d230:	4654      	mov	r4, sl
 800d232:	2205      	movs	r2, #5
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	4851      	ldr	r0, [pc, #324]	; (800d380 <_svfiprintf_r+0x1ec>)
 800d23a:	f7f2 ffd1 	bl	80001e0 <memchr>
 800d23e:	9a04      	ldr	r2, [sp, #16]
 800d240:	b9d8      	cbnz	r0, 800d27a <_svfiprintf_r+0xe6>
 800d242:	06d0      	lsls	r0, r2, #27
 800d244:	bf44      	itt	mi
 800d246:	2320      	movmi	r3, #32
 800d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24c:	0711      	lsls	r1, r2, #28
 800d24e:	bf44      	itt	mi
 800d250:	232b      	movmi	r3, #43	; 0x2b
 800d252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d256:	f89a 3000 	ldrb.w	r3, [sl]
 800d25a:	2b2a      	cmp	r3, #42	; 0x2a
 800d25c:	d015      	beq.n	800d28a <_svfiprintf_r+0xf6>
 800d25e:	9a07      	ldr	r2, [sp, #28]
 800d260:	4654      	mov	r4, sl
 800d262:	2000      	movs	r0, #0
 800d264:	f04f 0c0a 	mov.w	ip, #10
 800d268:	4621      	mov	r1, r4
 800d26a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d26e:	3b30      	subs	r3, #48	; 0x30
 800d270:	2b09      	cmp	r3, #9
 800d272:	d94e      	bls.n	800d312 <_svfiprintf_r+0x17e>
 800d274:	b1b0      	cbz	r0, 800d2a4 <_svfiprintf_r+0x110>
 800d276:	9207      	str	r2, [sp, #28]
 800d278:	e014      	b.n	800d2a4 <_svfiprintf_r+0x110>
 800d27a:	eba0 0308 	sub.w	r3, r0, r8
 800d27e:	fa09 f303 	lsl.w	r3, r9, r3
 800d282:	4313      	orrs	r3, r2
 800d284:	9304      	str	r3, [sp, #16]
 800d286:	46a2      	mov	sl, r4
 800d288:	e7d2      	b.n	800d230 <_svfiprintf_r+0x9c>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9103      	str	r1, [sp, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	bfbb      	ittet	lt
 800d296:	425b      	neglt	r3, r3
 800d298:	f042 0202 	orrlt.w	r2, r2, #2
 800d29c:	9307      	strge	r3, [sp, #28]
 800d29e:	9307      	strlt	r3, [sp, #28]
 800d2a0:	bfb8      	it	lt
 800d2a2:	9204      	strlt	r2, [sp, #16]
 800d2a4:	7823      	ldrb	r3, [r4, #0]
 800d2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a8:	d10c      	bne.n	800d2c4 <_svfiprintf_r+0x130>
 800d2aa:	7863      	ldrb	r3, [r4, #1]
 800d2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ae:	d135      	bne.n	800d31c <_svfiprintf_r+0x188>
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	1d1a      	adds	r2, r3, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	9203      	str	r2, [sp, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bfb8      	it	lt
 800d2bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d2c0:	3402      	adds	r4, #2
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d390 <_svfiprintf_r+0x1fc>
 800d2c8:	7821      	ldrb	r1, [r4, #0]
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	4650      	mov	r0, sl
 800d2ce:	f7f2 ff87 	bl	80001e0 <memchr>
 800d2d2:	b140      	cbz	r0, 800d2e6 <_svfiprintf_r+0x152>
 800d2d4:	2340      	movs	r3, #64	; 0x40
 800d2d6:	eba0 000a 	sub.w	r0, r0, sl
 800d2da:	fa03 f000 	lsl.w	r0, r3, r0
 800d2de:	9b04      	ldr	r3, [sp, #16]
 800d2e0:	4303      	orrs	r3, r0
 800d2e2:	3401      	adds	r4, #1
 800d2e4:	9304      	str	r3, [sp, #16]
 800d2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ea:	4826      	ldr	r0, [pc, #152]	; (800d384 <_svfiprintf_r+0x1f0>)
 800d2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2f0:	2206      	movs	r2, #6
 800d2f2:	f7f2 ff75 	bl	80001e0 <memchr>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d038      	beq.n	800d36c <_svfiprintf_r+0x1d8>
 800d2fa:	4b23      	ldr	r3, [pc, #140]	; (800d388 <_svfiprintf_r+0x1f4>)
 800d2fc:	bb1b      	cbnz	r3, 800d346 <_svfiprintf_r+0x1b2>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	3307      	adds	r3, #7
 800d302:	f023 0307 	bic.w	r3, r3, #7
 800d306:	3308      	adds	r3, #8
 800d308:	9303      	str	r3, [sp, #12]
 800d30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30c:	4433      	add	r3, r6
 800d30e:	9309      	str	r3, [sp, #36]	; 0x24
 800d310:	e767      	b.n	800d1e2 <_svfiprintf_r+0x4e>
 800d312:	fb0c 3202 	mla	r2, ip, r2, r3
 800d316:	460c      	mov	r4, r1
 800d318:	2001      	movs	r0, #1
 800d31a:	e7a5      	b.n	800d268 <_svfiprintf_r+0xd4>
 800d31c:	2300      	movs	r3, #0
 800d31e:	3401      	adds	r4, #1
 800d320:	9305      	str	r3, [sp, #20]
 800d322:	4619      	mov	r1, r3
 800d324:	f04f 0c0a 	mov.w	ip, #10
 800d328:	4620      	mov	r0, r4
 800d32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32e:	3a30      	subs	r2, #48	; 0x30
 800d330:	2a09      	cmp	r2, #9
 800d332:	d903      	bls.n	800d33c <_svfiprintf_r+0x1a8>
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0c5      	beq.n	800d2c4 <_svfiprintf_r+0x130>
 800d338:	9105      	str	r1, [sp, #20]
 800d33a:	e7c3      	b.n	800d2c4 <_svfiprintf_r+0x130>
 800d33c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d340:	4604      	mov	r4, r0
 800d342:	2301      	movs	r3, #1
 800d344:	e7f0      	b.n	800d328 <_svfiprintf_r+0x194>
 800d346:	ab03      	add	r3, sp, #12
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	462a      	mov	r2, r5
 800d34c:	4b0f      	ldr	r3, [pc, #60]	; (800d38c <_svfiprintf_r+0x1f8>)
 800d34e:	a904      	add	r1, sp, #16
 800d350:	4638      	mov	r0, r7
 800d352:	f7fc fa49 	bl	80097e8 <_printf_float>
 800d356:	1c42      	adds	r2, r0, #1
 800d358:	4606      	mov	r6, r0
 800d35a:	d1d6      	bne.n	800d30a <_svfiprintf_r+0x176>
 800d35c:	89ab      	ldrh	r3, [r5, #12]
 800d35e:	065b      	lsls	r3, r3, #25
 800d360:	f53f af2c 	bmi.w	800d1bc <_svfiprintf_r+0x28>
 800d364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d366:	b01d      	add	sp, #116	; 0x74
 800d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36c:	ab03      	add	r3, sp, #12
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	462a      	mov	r2, r5
 800d372:	4b06      	ldr	r3, [pc, #24]	; (800d38c <_svfiprintf_r+0x1f8>)
 800d374:	a904      	add	r1, sp, #16
 800d376:	4638      	mov	r0, r7
 800d378:	f7fc fcda 	bl	8009d30 <_printf_i>
 800d37c:	e7eb      	b.n	800d356 <_svfiprintf_r+0x1c2>
 800d37e:	bf00      	nop
 800d380:	0800e404 	.word	0x0800e404
 800d384:	0800e40e 	.word	0x0800e40e
 800d388:	080097e9 	.word	0x080097e9
 800d38c:	0800d0dd 	.word	0x0800d0dd
 800d390:	0800e40a 	.word	0x0800e40a
 800d394:	00000000 	.word	0x00000000

0800d398 <nan>:
 800d398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3a0 <nan+0x8>
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	00000000 	.word	0x00000000
 800d3a4:	7ff80000 	.word	0x7ff80000

0800d3a8 <_sbrk_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d06      	ldr	r5, [pc, #24]	; (800d3c4 <_sbrk_r+0x1c>)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	f7f4 f9ba 	bl	800172c <_sbrk>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d102      	bne.n	800d3c2 <_sbrk_r+0x1a>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	b103      	cbz	r3, 800d3c2 <_sbrk_r+0x1a>
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	20002020 	.word	0x20002020

0800d3c8 <strncmp>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	b17a      	cbz	r2, 800d3ec <strncmp+0x24>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	3901      	subs	r1, #1
 800d3d0:	1884      	adds	r4, r0, r2
 800d3d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d3da:	4290      	cmp	r0, r2
 800d3dc:	d101      	bne.n	800d3e2 <strncmp+0x1a>
 800d3de:	42a3      	cmp	r3, r4
 800d3e0:	d101      	bne.n	800d3e6 <strncmp+0x1e>
 800d3e2:	1a80      	subs	r0, r0, r2
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d1f3      	bne.n	800d3d2 <strncmp+0xa>
 800d3ea:	e7fa      	b.n	800d3e2 <strncmp+0x1a>
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	e7f9      	b.n	800d3e4 <strncmp+0x1c>

0800d3f0 <__ascii_wctomb>:
 800d3f0:	b149      	cbz	r1, 800d406 <__ascii_wctomb+0x16>
 800d3f2:	2aff      	cmp	r2, #255	; 0xff
 800d3f4:	bf85      	ittet	hi
 800d3f6:	238a      	movhi	r3, #138	; 0x8a
 800d3f8:	6003      	strhi	r3, [r0, #0]
 800d3fa:	700a      	strbls	r2, [r1, #0]
 800d3fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d400:	bf98      	it	ls
 800d402:	2001      	movls	r0, #1
 800d404:	4770      	bx	lr
 800d406:	4608      	mov	r0, r1
 800d408:	4770      	bx	lr
	...

0800d40c <__assert_func>:
 800d40c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d40e:	4614      	mov	r4, r2
 800d410:	461a      	mov	r2, r3
 800d412:	4b09      	ldr	r3, [pc, #36]	; (800d438 <__assert_func+0x2c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4605      	mov	r5, r0
 800d418:	68d8      	ldr	r0, [r3, #12]
 800d41a:	b14c      	cbz	r4, 800d430 <__assert_func+0x24>
 800d41c:	4b07      	ldr	r3, [pc, #28]	; (800d43c <__assert_func+0x30>)
 800d41e:	9100      	str	r1, [sp, #0]
 800d420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d424:	4906      	ldr	r1, [pc, #24]	; (800d440 <__assert_func+0x34>)
 800d426:	462b      	mov	r3, r5
 800d428:	f000 f80e 	bl	800d448 <fiprintf>
 800d42c:	f000 fa8c 	bl	800d948 <abort>
 800d430:	4b04      	ldr	r3, [pc, #16]	; (800d444 <__assert_func+0x38>)
 800d432:	461c      	mov	r4, r3
 800d434:	e7f3      	b.n	800d41e <__assert_func+0x12>
 800d436:	bf00      	nop
 800d438:	200000fc 	.word	0x200000fc
 800d43c:	0800e415 	.word	0x0800e415
 800d440:	0800e422 	.word	0x0800e422
 800d444:	0800e450 	.word	0x0800e450

0800d448 <fiprintf>:
 800d448:	b40e      	push	{r1, r2, r3}
 800d44a:	b503      	push	{r0, r1, lr}
 800d44c:	4601      	mov	r1, r0
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	4805      	ldr	r0, [pc, #20]	; (800d468 <fiprintf+0x20>)
 800d452:	f853 2b04 	ldr.w	r2, [r3], #4
 800d456:	6800      	ldr	r0, [r0, #0]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	f000 f885 	bl	800d568 <_vfiprintf_r>
 800d45e:	b002      	add	sp, #8
 800d460:	f85d eb04 	ldr.w	lr, [sp], #4
 800d464:	b003      	add	sp, #12
 800d466:	4770      	bx	lr
 800d468:	200000fc 	.word	0x200000fc

0800d46c <memmove>:
 800d46c:	4288      	cmp	r0, r1
 800d46e:	b510      	push	{r4, lr}
 800d470:	eb01 0402 	add.w	r4, r1, r2
 800d474:	d902      	bls.n	800d47c <memmove+0x10>
 800d476:	4284      	cmp	r4, r0
 800d478:	4623      	mov	r3, r4
 800d47a:	d807      	bhi.n	800d48c <memmove+0x20>
 800d47c:	1e43      	subs	r3, r0, #1
 800d47e:	42a1      	cmp	r1, r4
 800d480:	d008      	beq.n	800d494 <memmove+0x28>
 800d482:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d48a:	e7f8      	b.n	800d47e <memmove+0x12>
 800d48c:	4402      	add	r2, r0
 800d48e:	4601      	mov	r1, r0
 800d490:	428a      	cmp	r2, r1
 800d492:	d100      	bne.n	800d496 <memmove+0x2a>
 800d494:	bd10      	pop	{r4, pc}
 800d496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d49a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d49e:	e7f7      	b.n	800d490 <memmove+0x24>

0800d4a0 <__malloc_lock>:
 800d4a0:	4801      	ldr	r0, [pc, #4]	; (800d4a8 <__malloc_lock+0x8>)
 800d4a2:	f000 bc11 	b.w	800dcc8 <__retarget_lock_acquire_recursive>
 800d4a6:	bf00      	nop
 800d4a8:	20002024 	.word	0x20002024

0800d4ac <__malloc_unlock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	; (800d4b4 <__malloc_unlock+0x8>)
 800d4ae:	f000 bc0c 	b.w	800dcca <__retarget_lock_release_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20002024 	.word	0x20002024

0800d4b8 <_realloc_r>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	4680      	mov	r8, r0
 800d4be:	4614      	mov	r4, r2
 800d4c0:	460e      	mov	r6, r1
 800d4c2:	b921      	cbnz	r1, 800d4ce <_realloc_r+0x16>
 800d4c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	f7ff bd93 	b.w	800cff4 <_malloc_r>
 800d4ce:	b92a      	cbnz	r2, 800d4dc <_realloc_r+0x24>
 800d4d0:	f7ff fd24 	bl	800cf1c <_free_r>
 800d4d4:	4625      	mov	r5, r4
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	f000 fc5c 	bl	800dd98 <_malloc_usable_size_r>
 800d4e0:	4284      	cmp	r4, r0
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	d802      	bhi.n	800d4ec <_realloc_r+0x34>
 800d4e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4ea:	d812      	bhi.n	800d512 <_realloc_r+0x5a>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	f7ff fd80 	bl	800cff4 <_malloc_r>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0ed      	beq.n	800d4d6 <_realloc_r+0x1e>
 800d4fa:	42bc      	cmp	r4, r7
 800d4fc:	4622      	mov	r2, r4
 800d4fe:	4631      	mov	r1, r6
 800d500:	bf28      	it	cs
 800d502:	463a      	movcs	r2, r7
 800d504:	f7ff f824 	bl	800c550 <memcpy>
 800d508:	4631      	mov	r1, r6
 800d50a:	4640      	mov	r0, r8
 800d50c:	f7ff fd06 	bl	800cf1c <_free_r>
 800d510:	e7e1      	b.n	800d4d6 <_realloc_r+0x1e>
 800d512:	4635      	mov	r5, r6
 800d514:	e7df      	b.n	800d4d6 <_realloc_r+0x1e>

0800d516 <__sfputc_r>:
 800d516:	6893      	ldr	r3, [r2, #8]
 800d518:	3b01      	subs	r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	b410      	push	{r4}
 800d51e:	6093      	str	r3, [r2, #8]
 800d520:	da08      	bge.n	800d534 <__sfputc_r+0x1e>
 800d522:	6994      	ldr	r4, [r2, #24]
 800d524:	42a3      	cmp	r3, r4
 800d526:	db01      	blt.n	800d52c <__sfputc_r+0x16>
 800d528:	290a      	cmp	r1, #10
 800d52a:	d103      	bne.n	800d534 <__sfputc_r+0x1e>
 800d52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d530:	f000 b94a 	b.w	800d7c8 <__swbuf_r>
 800d534:	6813      	ldr	r3, [r2, #0]
 800d536:	1c58      	adds	r0, r3, #1
 800d538:	6010      	str	r0, [r2, #0]
 800d53a:	7019      	strb	r1, [r3, #0]
 800d53c:	4608      	mov	r0, r1
 800d53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <__sfputs_r>:
 800d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	4614      	mov	r4, r2
 800d54c:	18d5      	adds	r5, r2, r3
 800d54e:	42ac      	cmp	r4, r5
 800d550:	d101      	bne.n	800d556 <__sfputs_r+0x12>
 800d552:	2000      	movs	r0, #0
 800d554:	e007      	b.n	800d566 <__sfputs_r+0x22>
 800d556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55a:	463a      	mov	r2, r7
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff ffda 	bl	800d516 <__sfputc_r>
 800d562:	1c43      	adds	r3, r0, #1
 800d564:	d1f3      	bne.n	800d54e <__sfputs_r+0xa>
 800d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d568 <_vfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	460d      	mov	r5, r1
 800d56e:	b09d      	sub	sp, #116	; 0x74
 800d570:	4614      	mov	r4, r2
 800d572:	4698      	mov	r8, r3
 800d574:	4606      	mov	r6, r0
 800d576:	b118      	cbz	r0, 800d580 <_vfiprintf_r+0x18>
 800d578:	6983      	ldr	r3, [r0, #24]
 800d57a:	b90b      	cbnz	r3, 800d580 <_vfiprintf_r+0x18>
 800d57c:	f000 fb06 	bl	800db8c <__sinit>
 800d580:	4b89      	ldr	r3, [pc, #548]	; (800d7a8 <_vfiprintf_r+0x240>)
 800d582:	429d      	cmp	r5, r3
 800d584:	d11b      	bne.n	800d5be <_vfiprintf_r+0x56>
 800d586:	6875      	ldr	r5, [r6, #4]
 800d588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d58a:	07d9      	lsls	r1, r3, #31
 800d58c:	d405      	bmi.n	800d59a <_vfiprintf_r+0x32>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	059a      	lsls	r2, r3, #22
 800d592:	d402      	bmi.n	800d59a <_vfiprintf_r+0x32>
 800d594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d596:	f000 fb97 	bl	800dcc8 <__retarget_lock_acquire_recursive>
 800d59a:	89ab      	ldrh	r3, [r5, #12]
 800d59c:	071b      	lsls	r3, r3, #28
 800d59e:	d501      	bpl.n	800d5a4 <_vfiprintf_r+0x3c>
 800d5a0:	692b      	ldr	r3, [r5, #16]
 800d5a2:	b9eb      	cbnz	r3, 800d5e0 <_vfiprintf_r+0x78>
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f000 f960 	bl	800d86c <__swsetup_r>
 800d5ac:	b1c0      	cbz	r0, 800d5e0 <_vfiprintf_r+0x78>
 800d5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5b0:	07dc      	lsls	r4, r3, #31
 800d5b2:	d50e      	bpl.n	800d5d2 <_vfiprintf_r+0x6a>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5b8:	b01d      	add	sp, #116	; 0x74
 800d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5be:	4b7b      	ldr	r3, [pc, #492]	; (800d7ac <_vfiprintf_r+0x244>)
 800d5c0:	429d      	cmp	r5, r3
 800d5c2:	d101      	bne.n	800d5c8 <_vfiprintf_r+0x60>
 800d5c4:	68b5      	ldr	r5, [r6, #8]
 800d5c6:	e7df      	b.n	800d588 <_vfiprintf_r+0x20>
 800d5c8:	4b79      	ldr	r3, [pc, #484]	; (800d7b0 <_vfiprintf_r+0x248>)
 800d5ca:	429d      	cmp	r5, r3
 800d5cc:	bf08      	it	eq
 800d5ce:	68f5      	ldreq	r5, [r6, #12]
 800d5d0:	e7da      	b.n	800d588 <_vfiprintf_r+0x20>
 800d5d2:	89ab      	ldrh	r3, [r5, #12]
 800d5d4:	0598      	lsls	r0, r3, #22
 800d5d6:	d4ed      	bmi.n	800d5b4 <_vfiprintf_r+0x4c>
 800d5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5da:	f000 fb76 	bl	800dcca <__retarget_lock_release_recursive>
 800d5de:	e7e9      	b.n	800d5b4 <_vfiprintf_r+0x4c>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5e4:	2320      	movs	r3, #32
 800d5e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ee:	2330      	movs	r3, #48	; 0x30
 800d5f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7b4 <_vfiprintf_r+0x24c>
 800d5f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5f8:	f04f 0901 	mov.w	r9, #1
 800d5fc:	4623      	mov	r3, r4
 800d5fe:	469a      	mov	sl, r3
 800d600:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d604:	b10a      	cbz	r2, 800d60a <_vfiprintf_r+0xa2>
 800d606:	2a25      	cmp	r2, #37	; 0x25
 800d608:	d1f9      	bne.n	800d5fe <_vfiprintf_r+0x96>
 800d60a:	ebba 0b04 	subs.w	fp, sl, r4
 800d60e:	d00b      	beq.n	800d628 <_vfiprintf_r+0xc0>
 800d610:	465b      	mov	r3, fp
 800d612:	4622      	mov	r2, r4
 800d614:	4629      	mov	r1, r5
 800d616:	4630      	mov	r0, r6
 800d618:	f7ff ff94 	bl	800d544 <__sfputs_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	f000 80aa 	beq.w	800d776 <_vfiprintf_r+0x20e>
 800d622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d624:	445a      	add	r2, fp
 800d626:	9209      	str	r2, [sp, #36]	; 0x24
 800d628:	f89a 3000 	ldrb.w	r3, [sl]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 80a2 	beq.w	800d776 <_vfiprintf_r+0x20e>
 800d632:	2300      	movs	r3, #0
 800d634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d638:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d63c:	f10a 0a01 	add.w	sl, sl, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	9307      	str	r3, [sp, #28]
 800d644:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d648:	931a      	str	r3, [sp, #104]	; 0x68
 800d64a:	4654      	mov	r4, sl
 800d64c:	2205      	movs	r2, #5
 800d64e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d652:	4858      	ldr	r0, [pc, #352]	; (800d7b4 <_vfiprintf_r+0x24c>)
 800d654:	f7f2 fdc4 	bl	80001e0 <memchr>
 800d658:	9a04      	ldr	r2, [sp, #16]
 800d65a:	b9d8      	cbnz	r0, 800d694 <_vfiprintf_r+0x12c>
 800d65c:	06d1      	lsls	r1, r2, #27
 800d65e:	bf44      	itt	mi
 800d660:	2320      	movmi	r3, #32
 800d662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d666:	0713      	lsls	r3, r2, #28
 800d668:	bf44      	itt	mi
 800d66a:	232b      	movmi	r3, #43	; 0x2b
 800d66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d670:	f89a 3000 	ldrb.w	r3, [sl]
 800d674:	2b2a      	cmp	r3, #42	; 0x2a
 800d676:	d015      	beq.n	800d6a4 <_vfiprintf_r+0x13c>
 800d678:	9a07      	ldr	r2, [sp, #28]
 800d67a:	4654      	mov	r4, sl
 800d67c:	2000      	movs	r0, #0
 800d67e:	f04f 0c0a 	mov.w	ip, #10
 800d682:	4621      	mov	r1, r4
 800d684:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d688:	3b30      	subs	r3, #48	; 0x30
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d94e      	bls.n	800d72c <_vfiprintf_r+0x1c4>
 800d68e:	b1b0      	cbz	r0, 800d6be <_vfiprintf_r+0x156>
 800d690:	9207      	str	r2, [sp, #28]
 800d692:	e014      	b.n	800d6be <_vfiprintf_r+0x156>
 800d694:	eba0 0308 	sub.w	r3, r0, r8
 800d698:	fa09 f303 	lsl.w	r3, r9, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	9304      	str	r3, [sp, #16]
 800d6a0:	46a2      	mov	sl, r4
 800d6a2:	e7d2      	b.n	800d64a <_vfiprintf_r+0xe2>
 800d6a4:	9b03      	ldr	r3, [sp, #12]
 800d6a6:	1d19      	adds	r1, r3, #4
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	9103      	str	r1, [sp, #12]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	bfbb      	ittet	lt
 800d6b0:	425b      	neglt	r3, r3
 800d6b2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6b6:	9307      	strge	r3, [sp, #28]
 800d6b8:	9307      	strlt	r3, [sp, #28]
 800d6ba:	bfb8      	it	lt
 800d6bc:	9204      	strlt	r2, [sp, #16]
 800d6be:	7823      	ldrb	r3, [r4, #0]
 800d6c0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6c2:	d10c      	bne.n	800d6de <_vfiprintf_r+0x176>
 800d6c4:	7863      	ldrb	r3, [r4, #1]
 800d6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c8:	d135      	bne.n	800d736 <_vfiprintf_r+0x1ce>
 800d6ca:	9b03      	ldr	r3, [sp, #12]
 800d6cc:	1d1a      	adds	r2, r3, #4
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	9203      	str	r2, [sp, #12]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bfb8      	it	lt
 800d6d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d6da:	3402      	adds	r4, #2
 800d6dc:	9305      	str	r3, [sp, #20]
 800d6de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7c4 <_vfiprintf_r+0x25c>
 800d6e2:	7821      	ldrb	r1, [r4, #0]
 800d6e4:	2203      	movs	r2, #3
 800d6e6:	4650      	mov	r0, sl
 800d6e8:	f7f2 fd7a 	bl	80001e0 <memchr>
 800d6ec:	b140      	cbz	r0, 800d700 <_vfiprintf_r+0x198>
 800d6ee:	2340      	movs	r3, #64	; 0x40
 800d6f0:	eba0 000a 	sub.w	r0, r0, sl
 800d6f4:	fa03 f000 	lsl.w	r0, r3, r0
 800d6f8:	9b04      	ldr	r3, [sp, #16]
 800d6fa:	4303      	orrs	r3, r0
 800d6fc:	3401      	adds	r4, #1
 800d6fe:	9304      	str	r3, [sp, #16]
 800d700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d704:	482c      	ldr	r0, [pc, #176]	; (800d7b8 <_vfiprintf_r+0x250>)
 800d706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d70a:	2206      	movs	r2, #6
 800d70c:	f7f2 fd68 	bl	80001e0 <memchr>
 800d710:	2800      	cmp	r0, #0
 800d712:	d03f      	beq.n	800d794 <_vfiprintf_r+0x22c>
 800d714:	4b29      	ldr	r3, [pc, #164]	; (800d7bc <_vfiprintf_r+0x254>)
 800d716:	bb1b      	cbnz	r3, 800d760 <_vfiprintf_r+0x1f8>
 800d718:	9b03      	ldr	r3, [sp, #12]
 800d71a:	3307      	adds	r3, #7
 800d71c:	f023 0307 	bic.w	r3, r3, #7
 800d720:	3308      	adds	r3, #8
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d726:	443b      	add	r3, r7
 800d728:	9309      	str	r3, [sp, #36]	; 0x24
 800d72a:	e767      	b.n	800d5fc <_vfiprintf_r+0x94>
 800d72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d730:	460c      	mov	r4, r1
 800d732:	2001      	movs	r0, #1
 800d734:	e7a5      	b.n	800d682 <_vfiprintf_r+0x11a>
 800d736:	2300      	movs	r3, #0
 800d738:	3401      	adds	r4, #1
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	4619      	mov	r1, r3
 800d73e:	f04f 0c0a 	mov.w	ip, #10
 800d742:	4620      	mov	r0, r4
 800d744:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d748:	3a30      	subs	r2, #48	; 0x30
 800d74a:	2a09      	cmp	r2, #9
 800d74c:	d903      	bls.n	800d756 <_vfiprintf_r+0x1ee>
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0c5      	beq.n	800d6de <_vfiprintf_r+0x176>
 800d752:	9105      	str	r1, [sp, #20]
 800d754:	e7c3      	b.n	800d6de <_vfiprintf_r+0x176>
 800d756:	fb0c 2101 	mla	r1, ip, r1, r2
 800d75a:	4604      	mov	r4, r0
 800d75c:	2301      	movs	r3, #1
 800d75e:	e7f0      	b.n	800d742 <_vfiprintf_r+0x1da>
 800d760:	ab03      	add	r3, sp, #12
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	462a      	mov	r2, r5
 800d766:	4b16      	ldr	r3, [pc, #88]	; (800d7c0 <_vfiprintf_r+0x258>)
 800d768:	a904      	add	r1, sp, #16
 800d76a:	4630      	mov	r0, r6
 800d76c:	f7fc f83c 	bl	80097e8 <_printf_float>
 800d770:	4607      	mov	r7, r0
 800d772:	1c78      	adds	r0, r7, #1
 800d774:	d1d6      	bne.n	800d724 <_vfiprintf_r+0x1bc>
 800d776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d778:	07d9      	lsls	r1, r3, #31
 800d77a:	d405      	bmi.n	800d788 <_vfiprintf_r+0x220>
 800d77c:	89ab      	ldrh	r3, [r5, #12]
 800d77e:	059a      	lsls	r2, r3, #22
 800d780:	d402      	bmi.n	800d788 <_vfiprintf_r+0x220>
 800d782:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d784:	f000 faa1 	bl	800dcca <__retarget_lock_release_recursive>
 800d788:	89ab      	ldrh	r3, [r5, #12]
 800d78a:	065b      	lsls	r3, r3, #25
 800d78c:	f53f af12 	bmi.w	800d5b4 <_vfiprintf_r+0x4c>
 800d790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d792:	e711      	b.n	800d5b8 <_vfiprintf_r+0x50>
 800d794:	ab03      	add	r3, sp, #12
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	462a      	mov	r2, r5
 800d79a:	4b09      	ldr	r3, [pc, #36]	; (800d7c0 <_vfiprintf_r+0x258>)
 800d79c:	a904      	add	r1, sp, #16
 800d79e:	4630      	mov	r0, r6
 800d7a0:	f7fc fac6 	bl	8009d30 <_printf_i>
 800d7a4:	e7e4      	b.n	800d770 <_vfiprintf_r+0x208>
 800d7a6:	bf00      	nop
 800d7a8:	0800e474 	.word	0x0800e474
 800d7ac:	0800e494 	.word	0x0800e494
 800d7b0:	0800e454 	.word	0x0800e454
 800d7b4:	0800e404 	.word	0x0800e404
 800d7b8:	0800e40e 	.word	0x0800e40e
 800d7bc:	080097e9 	.word	0x080097e9
 800d7c0:	0800d545 	.word	0x0800d545
 800d7c4:	0800e40a 	.word	0x0800e40a

0800d7c8 <__swbuf_r>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	460e      	mov	r6, r1
 800d7cc:	4614      	mov	r4, r2
 800d7ce:	4605      	mov	r5, r0
 800d7d0:	b118      	cbz	r0, 800d7da <__swbuf_r+0x12>
 800d7d2:	6983      	ldr	r3, [r0, #24]
 800d7d4:	b90b      	cbnz	r3, 800d7da <__swbuf_r+0x12>
 800d7d6:	f000 f9d9 	bl	800db8c <__sinit>
 800d7da:	4b21      	ldr	r3, [pc, #132]	; (800d860 <__swbuf_r+0x98>)
 800d7dc:	429c      	cmp	r4, r3
 800d7de:	d12b      	bne.n	800d838 <__swbuf_r+0x70>
 800d7e0:	686c      	ldr	r4, [r5, #4]
 800d7e2:	69a3      	ldr	r3, [r4, #24]
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	071a      	lsls	r2, r3, #28
 800d7ea:	d52f      	bpl.n	800d84c <__swbuf_r+0x84>
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	b36b      	cbz	r3, 800d84c <__swbuf_r+0x84>
 800d7f0:	6923      	ldr	r3, [r4, #16]
 800d7f2:	6820      	ldr	r0, [r4, #0]
 800d7f4:	1ac0      	subs	r0, r0, r3
 800d7f6:	6963      	ldr	r3, [r4, #20]
 800d7f8:	b2f6      	uxtb	r6, r6
 800d7fa:	4283      	cmp	r3, r0
 800d7fc:	4637      	mov	r7, r6
 800d7fe:	dc04      	bgt.n	800d80a <__swbuf_r+0x42>
 800d800:	4621      	mov	r1, r4
 800d802:	4628      	mov	r0, r5
 800d804:	f000 f92e 	bl	800da64 <_fflush_r>
 800d808:	bb30      	cbnz	r0, 800d858 <__swbuf_r+0x90>
 800d80a:	68a3      	ldr	r3, [r4, #8]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	60a3      	str	r3, [r4, #8]
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	701e      	strb	r6, [r3, #0]
 800d818:	6963      	ldr	r3, [r4, #20]
 800d81a:	3001      	adds	r0, #1
 800d81c:	4283      	cmp	r3, r0
 800d81e:	d004      	beq.n	800d82a <__swbuf_r+0x62>
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	07db      	lsls	r3, r3, #31
 800d824:	d506      	bpl.n	800d834 <__swbuf_r+0x6c>
 800d826:	2e0a      	cmp	r6, #10
 800d828:	d104      	bne.n	800d834 <__swbuf_r+0x6c>
 800d82a:	4621      	mov	r1, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f000 f919 	bl	800da64 <_fflush_r>
 800d832:	b988      	cbnz	r0, 800d858 <__swbuf_r+0x90>
 800d834:	4638      	mov	r0, r7
 800d836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d838:	4b0a      	ldr	r3, [pc, #40]	; (800d864 <__swbuf_r+0x9c>)
 800d83a:	429c      	cmp	r4, r3
 800d83c:	d101      	bne.n	800d842 <__swbuf_r+0x7a>
 800d83e:	68ac      	ldr	r4, [r5, #8]
 800d840:	e7cf      	b.n	800d7e2 <__swbuf_r+0x1a>
 800d842:	4b09      	ldr	r3, [pc, #36]	; (800d868 <__swbuf_r+0xa0>)
 800d844:	429c      	cmp	r4, r3
 800d846:	bf08      	it	eq
 800d848:	68ec      	ldreq	r4, [r5, #12]
 800d84a:	e7ca      	b.n	800d7e2 <__swbuf_r+0x1a>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4628      	mov	r0, r5
 800d850:	f000 f80c 	bl	800d86c <__swsetup_r>
 800d854:	2800      	cmp	r0, #0
 800d856:	d0cb      	beq.n	800d7f0 <__swbuf_r+0x28>
 800d858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d85c:	e7ea      	b.n	800d834 <__swbuf_r+0x6c>
 800d85e:	bf00      	nop
 800d860:	0800e474 	.word	0x0800e474
 800d864:	0800e494 	.word	0x0800e494
 800d868:	0800e454 	.word	0x0800e454

0800d86c <__swsetup_r>:
 800d86c:	4b32      	ldr	r3, [pc, #200]	; (800d938 <__swsetup_r+0xcc>)
 800d86e:	b570      	push	{r4, r5, r6, lr}
 800d870:	681d      	ldr	r5, [r3, #0]
 800d872:	4606      	mov	r6, r0
 800d874:	460c      	mov	r4, r1
 800d876:	b125      	cbz	r5, 800d882 <__swsetup_r+0x16>
 800d878:	69ab      	ldr	r3, [r5, #24]
 800d87a:	b913      	cbnz	r3, 800d882 <__swsetup_r+0x16>
 800d87c:	4628      	mov	r0, r5
 800d87e:	f000 f985 	bl	800db8c <__sinit>
 800d882:	4b2e      	ldr	r3, [pc, #184]	; (800d93c <__swsetup_r+0xd0>)
 800d884:	429c      	cmp	r4, r3
 800d886:	d10f      	bne.n	800d8a8 <__swsetup_r+0x3c>
 800d888:	686c      	ldr	r4, [r5, #4]
 800d88a:	89a3      	ldrh	r3, [r4, #12]
 800d88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d890:	0719      	lsls	r1, r3, #28
 800d892:	d42c      	bmi.n	800d8ee <__swsetup_r+0x82>
 800d894:	06dd      	lsls	r5, r3, #27
 800d896:	d411      	bmi.n	800d8bc <__swsetup_r+0x50>
 800d898:	2309      	movs	r3, #9
 800d89a:	6033      	str	r3, [r6, #0]
 800d89c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8a0:	81a3      	strh	r3, [r4, #12]
 800d8a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8a6:	e03e      	b.n	800d926 <__swsetup_r+0xba>
 800d8a8:	4b25      	ldr	r3, [pc, #148]	; (800d940 <__swsetup_r+0xd4>)
 800d8aa:	429c      	cmp	r4, r3
 800d8ac:	d101      	bne.n	800d8b2 <__swsetup_r+0x46>
 800d8ae:	68ac      	ldr	r4, [r5, #8]
 800d8b0:	e7eb      	b.n	800d88a <__swsetup_r+0x1e>
 800d8b2:	4b24      	ldr	r3, [pc, #144]	; (800d944 <__swsetup_r+0xd8>)
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	bf08      	it	eq
 800d8b8:	68ec      	ldreq	r4, [r5, #12]
 800d8ba:	e7e6      	b.n	800d88a <__swsetup_r+0x1e>
 800d8bc:	0758      	lsls	r0, r3, #29
 800d8be:	d512      	bpl.n	800d8e6 <__swsetup_r+0x7a>
 800d8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8c2:	b141      	cbz	r1, 800d8d6 <__swsetup_r+0x6a>
 800d8c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8c8:	4299      	cmp	r1, r3
 800d8ca:	d002      	beq.n	800d8d2 <__swsetup_r+0x66>
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7ff fb25 	bl	800cf1c <_free_r>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	6063      	str	r3, [r4, #4]
 800d8e2:	6923      	ldr	r3, [r4, #16]
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	89a3      	ldrh	r3, [r4, #12]
 800d8e8:	f043 0308 	orr.w	r3, r3, #8
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	b94b      	cbnz	r3, 800d906 <__swsetup_r+0x9a>
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8fc:	d003      	beq.n	800d906 <__swsetup_r+0x9a>
 800d8fe:	4621      	mov	r1, r4
 800d900:	4630      	mov	r0, r6
 800d902:	f000 fa09 	bl	800dd18 <__smakebuf_r>
 800d906:	89a0      	ldrh	r0, [r4, #12]
 800d908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d90c:	f010 0301 	ands.w	r3, r0, #1
 800d910:	d00a      	beq.n	800d928 <__swsetup_r+0xbc>
 800d912:	2300      	movs	r3, #0
 800d914:	60a3      	str	r3, [r4, #8]
 800d916:	6963      	ldr	r3, [r4, #20]
 800d918:	425b      	negs	r3, r3
 800d91a:	61a3      	str	r3, [r4, #24]
 800d91c:	6923      	ldr	r3, [r4, #16]
 800d91e:	b943      	cbnz	r3, 800d932 <__swsetup_r+0xc6>
 800d920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d924:	d1ba      	bne.n	800d89c <__swsetup_r+0x30>
 800d926:	bd70      	pop	{r4, r5, r6, pc}
 800d928:	0781      	lsls	r1, r0, #30
 800d92a:	bf58      	it	pl
 800d92c:	6963      	ldrpl	r3, [r4, #20]
 800d92e:	60a3      	str	r3, [r4, #8]
 800d930:	e7f4      	b.n	800d91c <__swsetup_r+0xb0>
 800d932:	2000      	movs	r0, #0
 800d934:	e7f7      	b.n	800d926 <__swsetup_r+0xba>
 800d936:	bf00      	nop
 800d938:	200000fc 	.word	0x200000fc
 800d93c:	0800e474 	.word	0x0800e474
 800d940:	0800e494 	.word	0x0800e494
 800d944:	0800e454 	.word	0x0800e454

0800d948 <abort>:
 800d948:	b508      	push	{r3, lr}
 800d94a:	2006      	movs	r0, #6
 800d94c:	f000 fa54 	bl	800ddf8 <raise>
 800d950:	2001      	movs	r0, #1
 800d952:	f7f3 fe73 	bl	800163c <_exit>
	...

0800d958 <__sflush_r>:
 800d958:	898a      	ldrh	r2, [r1, #12]
 800d95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95e:	4605      	mov	r5, r0
 800d960:	0710      	lsls	r0, r2, #28
 800d962:	460c      	mov	r4, r1
 800d964:	d458      	bmi.n	800da18 <__sflush_r+0xc0>
 800d966:	684b      	ldr	r3, [r1, #4]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dc05      	bgt.n	800d978 <__sflush_r+0x20>
 800d96c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d96e:	2b00      	cmp	r3, #0
 800d970:	dc02      	bgt.n	800d978 <__sflush_r+0x20>
 800d972:	2000      	movs	r0, #0
 800d974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d97a:	2e00      	cmp	r6, #0
 800d97c:	d0f9      	beq.n	800d972 <__sflush_r+0x1a>
 800d97e:	2300      	movs	r3, #0
 800d980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d984:	682f      	ldr	r7, [r5, #0]
 800d986:	602b      	str	r3, [r5, #0]
 800d988:	d032      	beq.n	800d9f0 <__sflush_r+0x98>
 800d98a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	075a      	lsls	r2, r3, #29
 800d990:	d505      	bpl.n	800d99e <__sflush_r+0x46>
 800d992:	6863      	ldr	r3, [r4, #4]
 800d994:	1ac0      	subs	r0, r0, r3
 800d996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d998:	b10b      	cbz	r3, 800d99e <__sflush_r+0x46>
 800d99a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d99c:	1ac0      	subs	r0, r0, r3
 800d99e:	2300      	movs	r3, #0
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d9a4:	6a21      	ldr	r1, [r4, #32]
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	47b0      	blx	r6
 800d9aa:	1c43      	adds	r3, r0, #1
 800d9ac:	89a3      	ldrh	r3, [r4, #12]
 800d9ae:	d106      	bne.n	800d9be <__sflush_r+0x66>
 800d9b0:	6829      	ldr	r1, [r5, #0]
 800d9b2:	291d      	cmp	r1, #29
 800d9b4:	d82c      	bhi.n	800da10 <__sflush_r+0xb8>
 800d9b6:	4a2a      	ldr	r2, [pc, #168]	; (800da60 <__sflush_r+0x108>)
 800d9b8:	40ca      	lsrs	r2, r1
 800d9ba:	07d6      	lsls	r6, r2, #31
 800d9bc:	d528      	bpl.n	800da10 <__sflush_r+0xb8>
 800d9be:	2200      	movs	r2, #0
 800d9c0:	6062      	str	r2, [r4, #4]
 800d9c2:	04d9      	lsls	r1, r3, #19
 800d9c4:	6922      	ldr	r2, [r4, #16]
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	d504      	bpl.n	800d9d4 <__sflush_r+0x7c>
 800d9ca:	1c42      	adds	r2, r0, #1
 800d9cc:	d101      	bne.n	800d9d2 <__sflush_r+0x7a>
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	b903      	cbnz	r3, 800d9d4 <__sflush_r+0x7c>
 800d9d2:	6560      	str	r0, [r4, #84]	; 0x54
 800d9d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9d6:	602f      	str	r7, [r5, #0]
 800d9d8:	2900      	cmp	r1, #0
 800d9da:	d0ca      	beq.n	800d972 <__sflush_r+0x1a>
 800d9dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	d002      	beq.n	800d9ea <__sflush_r+0x92>
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	f7ff fa99 	bl	800cf1c <_free_r>
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	6360      	str	r0, [r4, #52]	; 0x34
 800d9ee:	e7c1      	b.n	800d974 <__sflush_r+0x1c>
 800d9f0:	6a21      	ldr	r1, [r4, #32]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b0      	blx	r6
 800d9f8:	1c41      	adds	r1, r0, #1
 800d9fa:	d1c7      	bne.n	800d98c <__sflush_r+0x34>
 800d9fc:	682b      	ldr	r3, [r5, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0c4      	beq.n	800d98c <__sflush_r+0x34>
 800da02:	2b1d      	cmp	r3, #29
 800da04:	d001      	beq.n	800da0a <__sflush_r+0xb2>
 800da06:	2b16      	cmp	r3, #22
 800da08:	d101      	bne.n	800da0e <__sflush_r+0xb6>
 800da0a:	602f      	str	r7, [r5, #0]
 800da0c:	e7b1      	b.n	800d972 <__sflush_r+0x1a>
 800da0e:	89a3      	ldrh	r3, [r4, #12]
 800da10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da14:	81a3      	strh	r3, [r4, #12]
 800da16:	e7ad      	b.n	800d974 <__sflush_r+0x1c>
 800da18:	690f      	ldr	r7, [r1, #16]
 800da1a:	2f00      	cmp	r7, #0
 800da1c:	d0a9      	beq.n	800d972 <__sflush_r+0x1a>
 800da1e:	0793      	lsls	r3, r2, #30
 800da20:	680e      	ldr	r6, [r1, #0]
 800da22:	bf08      	it	eq
 800da24:	694b      	ldreq	r3, [r1, #20]
 800da26:	600f      	str	r7, [r1, #0]
 800da28:	bf18      	it	ne
 800da2a:	2300      	movne	r3, #0
 800da2c:	eba6 0807 	sub.w	r8, r6, r7
 800da30:	608b      	str	r3, [r1, #8]
 800da32:	f1b8 0f00 	cmp.w	r8, #0
 800da36:	dd9c      	ble.n	800d972 <__sflush_r+0x1a>
 800da38:	6a21      	ldr	r1, [r4, #32]
 800da3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da3c:	4643      	mov	r3, r8
 800da3e:	463a      	mov	r2, r7
 800da40:	4628      	mov	r0, r5
 800da42:	47b0      	blx	r6
 800da44:	2800      	cmp	r0, #0
 800da46:	dc06      	bgt.n	800da56 <__sflush_r+0xfe>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da4e:	81a3      	strh	r3, [r4, #12]
 800da50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da54:	e78e      	b.n	800d974 <__sflush_r+0x1c>
 800da56:	4407      	add	r7, r0
 800da58:	eba8 0800 	sub.w	r8, r8, r0
 800da5c:	e7e9      	b.n	800da32 <__sflush_r+0xda>
 800da5e:	bf00      	nop
 800da60:	20400001 	.word	0x20400001

0800da64 <_fflush_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	690b      	ldr	r3, [r1, #16]
 800da68:	4605      	mov	r5, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	b913      	cbnz	r3, 800da74 <_fflush_r+0x10>
 800da6e:	2500      	movs	r5, #0
 800da70:	4628      	mov	r0, r5
 800da72:	bd38      	pop	{r3, r4, r5, pc}
 800da74:	b118      	cbz	r0, 800da7e <_fflush_r+0x1a>
 800da76:	6983      	ldr	r3, [r0, #24]
 800da78:	b90b      	cbnz	r3, 800da7e <_fflush_r+0x1a>
 800da7a:	f000 f887 	bl	800db8c <__sinit>
 800da7e:	4b14      	ldr	r3, [pc, #80]	; (800dad0 <_fflush_r+0x6c>)
 800da80:	429c      	cmp	r4, r3
 800da82:	d11b      	bne.n	800dabc <_fflush_r+0x58>
 800da84:	686c      	ldr	r4, [r5, #4]
 800da86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d0ef      	beq.n	800da6e <_fflush_r+0xa>
 800da8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da90:	07d0      	lsls	r0, r2, #31
 800da92:	d404      	bmi.n	800da9e <_fflush_r+0x3a>
 800da94:	0599      	lsls	r1, r3, #22
 800da96:	d402      	bmi.n	800da9e <_fflush_r+0x3a>
 800da98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da9a:	f000 f915 	bl	800dcc8 <__retarget_lock_acquire_recursive>
 800da9e:	4628      	mov	r0, r5
 800daa0:	4621      	mov	r1, r4
 800daa2:	f7ff ff59 	bl	800d958 <__sflush_r>
 800daa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800daa8:	07da      	lsls	r2, r3, #31
 800daaa:	4605      	mov	r5, r0
 800daac:	d4e0      	bmi.n	800da70 <_fflush_r+0xc>
 800daae:	89a3      	ldrh	r3, [r4, #12]
 800dab0:	059b      	lsls	r3, r3, #22
 800dab2:	d4dd      	bmi.n	800da70 <_fflush_r+0xc>
 800dab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dab6:	f000 f908 	bl	800dcca <__retarget_lock_release_recursive>
 800daba:	e7d9      	b.n	800da70 <_fflush_r+0xc>
 800dabc:	4b05      	ldr	r3, [pc, #20]	; (800dad4 <_fflush_r+0x70>)
 800dabe:	429c      	cmp	r4, r3
 800dac0:	d101      	bne.n	800dac6 <_fflush_r+0x62>
 800dac2:	68ac      	ldr	r4, [r5, #8]
 800dac4:	e7df      	b.n	800da86 <_fflush_r+0x22>
 800dac6:	4b04      	ldr	r3, [pc, #16]	; (800dad8 <_fflush_r+0x74>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	bf08      	it	eq
 800dacc:	68ec      	ldreq	r4, [r5, #12]
 800dace:	e7da      	b.n	800da86 <_fflush_r+0x22>
 800dad0:	0800e474 	.word	0x0800e474
 800dad4:	0800e494 	.word	0x0800e494
 800dad8:	0800e454 	.word	0x0800e454

0800dadc <std>:
 800dadc:	2300      	movs	r3, #0
 800dade:	b510      	push	{r4, lr}
 800dae0:	4604      	mov	r4, r0
 800dae2:	e9c0 3300 	strd	r3, r3, [r0]
 800dae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800daea:	6083      	str	r3, [r0, #8]
 800daec:	8181      	strh	r1, [r0, #12]
 800daee:	6643      	str	r3, [r0, #100]	; 0x64
 800daf0:	81c2      	strh	r2, [r0, #14]
 800daf2:	6183      	str	r3, [r0, #24]
 800daf4:	4619      	mov	r1, r3
 800daf6:	2208      	movs	r2, #8
 800daf8:	305c      	adds	r0, #92	; 0x5c
 800dafa:	f7fb fdcd 	bl	8009698 <memset>
 800dafe:	4b05      	ldr	r3, [pc, #20]	; (800db14 <std+0x38>)
 800db00:	6263      	str	r3, [r4, #36]	; 0x24
 800db02:	4b05      	ldr	r3, [pc, #20]	; (800db18 <std+0x3c>)
 800db04:	62a3      	str	r3, [r4, #40]	; 0x28
 800db06:	4b05      	ldr	r3, [pc, #20]	; (800db1c <std+0x40>)
 800db08:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db0a:	4b05      	ldr	r3, [pc, #20]	; (800db20 <std+0x44>)
 800db0c:	6224      	str	r4, [r4, #32]
 800db0e:	6323      	str	r3, [r4, #48]	; 0x30
 800db10:	bd10      	pop	{r4, pc}
 800db12:	bf00      	nop
 800db14:	0800de31 	.word	0x0800de31
 800db18:	0800de53 	.word	0x0800de53
 800db1c:	0800de8b 	.word	0x0800de8b
 800db20:	0800deaf 	.word	0x0800deaf

0800db24 <_cleanup_r>:
 800db24:	4901      	ldr	r1, [pc, #4]	; (800db2c <_cleanup_r+0x8>)
 800db26:	f000 b8af 	b.w	800dc88 <_fwalk_reent>
 800db2a:	bf00      	nop
 800db2c:	0800da65 	.word	0x0800da65

0800db30 <__sfmoreglue>:
 800db30:	b570      	push	{r4, r5, r6, lr}
 800db32:	2268      	movs	r2, #104	; 0x68
 800db34:	1e4d      	subs	r5, r1, #1
 800db36:	4355      	muls	r5, r2
 800db38:	460e      	mov	r6, r1
 800db3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db3e:	f7ff fa59 	bl	800cff4 <_malloc_r>
 800db42:	4604      	mov	r4, r0
 800db44:	b140      	cbz	r0, 800db58 <__sfmoreglue+0x28>
 800db46:	2100      	movs	r1, #0
 800db48:	e9c0 1600 	strd	r1, r6, [r0]
 800db4c:	300c      	adds	r0, #12
 800db4e:	60a0      	str	r0, [r4, #8]
 800db50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db54:	f7fb fda0 	bl	8009698 <memset>
 800db58:	4620      	mov	r0, r4
 800db5a:	bd70      	pop	{r4, r5, r6, pc}

0800db5c <__sfp_lock_acquire>:
 800db5c:	4801      	ldr	r0, [pc, #4]	; (800db64 <__sfp_lock_acquire+0x8>)
 800db5e:	f000 b8b3 	b.w	800dcc8 <__retarget_lock_acquire_recursive>
 800db62:	bf00      	nop
 800db64:	20002025 	.word	0x20002025

0800db68 <__sfp_lock_release>:
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__sfp_lock_release+0x8>)
 800db6a:	f000 b8ae 	b.w	800dcca <__retarget_lock_release_recursive>
 800db6e:	bf00      	nop
 800db70:	20002025 	.word	0x20002025

0800db74 <__sinit_lock_acquire>:
 800db74:	4801      	ldr	r0, [pc, #4]	; (800db7c <__sinit_lock_acquire+0x8>)
 800db76:	f000 b8a7 	b.w	800dcc8 <__retarget_lock_acquire_recursive>
 800db7a:	bf00      	nop
 800db7c:	20002026 	.word	0x20002026

0800db80 <__sinit_lock_release>:
 800db80:	4801      	ldr	r0, [pc, #4]	; (800db88 <__sinit_lock_release+0x8>)
 800db82:	f000 b8a2 	b.w	800dcca <__retarget_lock_release_recursive>
 800db86:	bf00      	nop
 800db88:	20002026 	.word	0x20002026

0800db8c <__sinit>:
 800db8c:	b510      	push	{r4, lr}
 800db8e:	4604      	mov	r4, r0
 800db90:	f7ff fff0 	bl	800db74 <__sinit_lock_acquire>
 800db94:	69a3      	ldr	r3, [r4, #24]
 800db96:	b11b      	cbz	r3, 800dba0 <__sinit+0x14>
 800db98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db9c:	f7ff bff0 	b.w	800db80 <__sinit_lock_release>
 800dba0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dba4:	6523      	str	r3, [r4, #80]	; 0x50
 800dba6:	4b13      	ldr	r3, [pc, #76]	; (800dbf4 <__sinit+0x68>)
 800dba8:	4a13      	ldr	r2, [pc, #76]	; (800dbf8 <__sinit+0x6c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	62a2      	str	r2, [r4, #40]	; 0x28
 800dbae:	42a3      	cmp	r3, r4
 800dbb0:	bf04      	itt	eq
 800dbb2:	2301      	moveq	r3, #1
 800dbb4:	61a3      	streq	r3, [r4, #24]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 f820 	bl	800dbfc <__sfp>
 800dbbc:	6060      	str	r0, [r4, #4]
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f81c 	bl	800dbfc <__sfp>
 800dbc4:	60a0      	str	r0, [r4, #8]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f000 f818 	bl	800dbfc <__sfp>
 800dbcc:	2200      	movs	r2, #0
 800dbce:	60e0      	str	r0, [r4, #12]
 800dbd0:	2104      	movs	r1, #4
 800dbd2:	6860      	ldr	r0, [r4, #4]
 800dbd4:	f7ff ff82 	bl	800dadc <std>
 800dbd8:	68a0      	ldr	r0, [r4, #8]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	2109      	movs	r1, #9
 800dbde:	f7ff ff7d 	bl	800dadc <std>
 800dbe2:	68e0      	ldr	r0, [r4, #12]
 800dbe4:	2202      	movs	r2, #2
 800dbe6:	2112      	movs	r1, #18
 800dbe8:	f7ff ff78 	bl	800dadc <std>
 800dbec:	2301      	movs	r3, #1
 800dbee:	61a3      	str	r3, [r4, #24]
 800dbf0:	e7d2      	b.n	800db98 <__sinit+0xc>
 800dbf2:	bf00      	nop
 800dbf4:	0800e00c 	.word	0x0800e00c
 800dbf8:	0800db25 	.word	0x0800db25

0800dbfc <__sfp>:
 800dbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfe:	4607      	mov	r7, r0
 800dc00:	f7ff ffac 	bl	800db5c <__sfp_lock_acquire>
 800dc04:	4b1e      	ldr	r3, [pc, #120]	; (800dc80 <__sfp+0x84>)
 800dc06:	681e      	ldr	r6, [r3, #0]
 800dc08:	69b3      	ldr	r3, [r6, #24]
 800dc0a:	b913      	cbnz	r3, 800dc12 <__sfp+0x16>
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff ffbd 	bl	800db8c <__sinit>
 800dc12:	3648      	adds	r6, #72	; 0x48
 800dc14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	d503      	bpl.n	800dc24 <__sfp+0x28>
 800dc1c:	6833      	ldr	r3, [r6, #0]
 800dc1e:	b30b      	cbz	r3, 800dc64 <__sfp+0x68>
 800dc20:	6836      	ldr	r6, [r6, #0]
 800dc22:	e7f7      	b.n	800dc14 <__sfp+0x18>
 800dc24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc28:	b9d5      	cbnz	r5, 800dc60 <__sfp+0x64>
 800dc2a:	4b16      	ldr	r3, [pc, #88]	; (800dc84 <__sfp+0x88>)
 800dc2c:	60e3      	str	r3, [r4, #12]
 800dc2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc32:	6665      	str	r5, [r4, #100]	; 0x64
 800dc34:	f000 f847 	bl	800dcc6 <__retarget_lock_init_recursive>
 800dc38:	f7ff ff96 	bl	800db68 <__sfp_lock_release>
 800dc3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc44:	6025      	str	r5, [r4, #0]
 800dc46:	61a5      	str	r5, [r4, #24]
 800dc48:	2208      	movs	r2, #8
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc50:	f7fb fd22 	bl	8009698 <memset>
 800dc54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc60:	3468      	adds	r4, #104	; 0x68
 800dc62:	e7d9      	b.n	800dc18 <__sfp+0x1c>
 800dc64:	2104      	movs	r1, #4
 800dc66:	4638      	mov	r0, r7
 800dc68:	f7ff ff62 	bl	800db30 <__sfmoreglue>
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	6030      	str	r0, [r6, #0]
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1d5      	bne.n	800dc20 <__sfp+0x24>
 800dc74:	f7ff ff78 	bl	800db68 <__sfp_lock_release>
 800dc78:	230c      	movs	r3, #12
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	e7ee      	b.n	800dc5c <__sfp+0x60>
 800dc7e:	bf00      	nop
 800dc80:	0800e00c 	.word	0x0800e00c
 800dc84:	ffff0001 	.word	0xffff0001

0800dc88 <_fwalk_reent>:
 800dc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	4688      	mov	r8, r1
 800dc90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc94:	2700      	movs	r7, #0
 800dc96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc9a:	f1b9 0901 	subs.w	r9, r9, #1
 800dc9e:	d505      	bpl.n	800dcac <_fwalk_reent+0x24>
 800dca0:	6824      	ldr	r4, [r4, #0]
 800dca2:	2c00      	cmp	r4, #0
 800dca4:	d1f7      	bne.n	800dc96 <_fwalk_reent+0xe>
 800dca6:	4638      	mov	r0, r7
 800dca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcac:	89ab      	ldrh	r3, [r5, #12]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d907      	bls.n	800dcc2 <_fwalk_reent+0x3a>
 800dcb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	d003      	beq.n	800dcc2 <_fwalk_reent+0x3a>
 800dcba:	4629      	mov	r1, r5
 800dcbc:	4630      	mov	r0, r6
 800dcbe:	47c0      	blx	r8
 800dcc0:	4307      	orrs	r7, r0
 800dcc2:	3568      	adds	r5, #104	; 0x68
 800dcc4:	e7e9      	b.n	800dc9a <_fwalk_reent+0x12>

0800dcc6 <__retarget_lock_init_recursive>:
 800dcc6:	4770      	bx	lr

0800dcc8 <__retarget_lock_acquire_recursive>:
 800dcc8:	4770      	bx	lr

0800dcca <__retarget_lock_release_recursive>:
 800dcca:	4770      	bx	lr

0800dccc <__swhatbuf_r>:
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	460e      	mov	r6, r1
 800dcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	b096      	sub	sp, #88	; 0x58
 800dcd8:	4614      	mov	r4, r2
 800dcda:	461d      	mov	r5, r3
 800dcdc:	da08      	bge.n	800dcf0 <__swhatbuf_r+0x24>
 800dcde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	602a      	str	r2, [r5, #0]
 800dce6:	061a      	lsls	r2, r3, #24
 800dce8:	d410      	bmi.n	800dd0c <__swhatbuf_r+0x40>
 800dcea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcee:	e00e      	b.n	800dd0e <__swhatbuf_r+0x42>
 800dcf0:	466a      	mov	r2, sp
 800dcf2:	f000 f903 	bl	800defc <_fstat_r>
 800dcf6:	2800      	cmp	r0, #0
 800dcf8:	dbf1      	blt.n	800dcde <__swhatbuf_r+0x12>
 800dcfa:	9a01      	ldr	r2, [sp, #4]
 800dcfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd04:	425a      	negs	r2, r3
 800dd06:	415a      	adcs	r2, r3
 800dd08:	602a      	str	r2, [r5, #0]
 800dd0a:	e7ee      	b.n	800dcea <__swhatbuf_r+0x1e>
 800dd0c:	2340      	movs	r3, #64	; 0x40
 800dd0e:	2000      	movs	r0, #0
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	b016      	add	sp, #88	; 0x58
 800dd14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd18 <__smakebuf_r>:
 800dd18:	898b      	ldrh	r3, [r1, #12]
 800dd1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd1c:	079d      	lsls	r5, r3, #30
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460c      	mov	r4, r1
 800dd22:	d507      	bpl.n	800dd34 <__smakebuf_r+0x1c>
 800dd24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	6123      	str	r3, [r4, #16]
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	6163      	str	r3, [r4, #20]
 800dd30:	b002      	add	sp, #8
 800dd32:	bd70      	pop	{r4, r5, r6, pc}
 800dd34:	ab01      	add	r3, sp, #4
 800dd36:	466a      	mov	r2, sp
 800dd38:	f7ff ffc8 	bl	800dccc <__swhatbuf_r>
 800dd3c:	9900      	ldr	r1, [sp, #0]
 800dd3e:	4605      	mov	r5, r0
 800dd40:	4630      	mov	r0, r6
 800dd42:	f7ff f957 	bl	800cff4 <_malloc_r>
 800dd46:	b948      	cbnz	r0, 800dd5c <__smakebuf_r+0x44>
 800dd48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4c:	059a      	lsls	r2, r3, #22
 800dd4e:	d4ef      	bmi.n	800dd30 <__smakebuf_r+0x18>
 800dd50:	f023 0303 	bic.w	r3, r3, #3
 800dd54:	f043 0302 	orr.w	r3, r3, #2
 800dd58:	81a3      	strh	r3, [r4, #12]
 800dd5a:	e7e3      	b.n	800dd24 <__smakebuf_r+0xc>
 800dd5c:	4b0d      	ldr	r3, [pc, #52]	; (800dd94 <__smakebuf_r+0x7c>)
 800dd5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	6020      	str	r0, [r4, #0]
 800dd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	9b00      	ldr	r3, [sp, #0]
 800dd6c:	6163      	str	r3, [r4, #20]
 800dd6e:	9b01      	ldr	r3, [sp, #4]
 800dd70:	6120      	str	r0, [r4, #16]
 800dd72:	b15b      	cbz	r3, 800dd8c <__smakebuf_r+0x74>
 800dd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd78:	4630      	mov	r0, r6
 800dd7a:	f000 f8d1 	bl	800df20 <_isatty_r>
 800dd7e:	b128      	cbz	r0, 800dd8c <__smakebuf_r+0x74>
 800dd80:	89a3      	ldrh	r3, [r4, #12]
 800dd82:	f023 0303 	bic.w	r3, r3, #3
 800dd86:	f043 0301 	orr.w	r3, r3, #1
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	89a0      	ldrh	r0, [r4, #12]
 800dd8e:	4305      	orrs	r5, r0
 800dd90:	81a5      	strh	r5, [r4, #12]
 800dd92:	e7cd      	b.n	800dd30 <__smakebuf_r+0x18>
 800dd94:	0800db25 	.word	0x0800db25

0800dd98 <_malloc_usable_size_r>:
 800dd98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd9c:	1f18      	subs	r0, r3, #4
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	bfbc      	itt	lt
 800dda2:	580b      	ldrlt	r3, [r1, r0]
 800dda4:	18c0      	addlt	r0, r0, r3
 800dda6:	4770      	bx	lr

0800dda8 <_raise_r>:
 800dda8:	291f      	cmp	r1, #31
 800ddaa:	b538      	push	{r3, r4, r5, lr}
 800ddac:	4604      	mov	r4, r0
 800ddae:	460d      	mov	r5, r1
 800ddb0:	d904      	bls.n	800ddbc <_raise_r+0x14>
 800ddb2:	2316      	movs	r3, #22
 800ddb4:	6003      	str	r3, [r0, #0]
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ddbe:	b112      	cbz	r2, 800ddc6 <_raise_r+0x1e>
 800ddc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddc4:	b94b      	cbnz	r3, 800ddda <_raise_r+0x32>
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f830 	bl	800de2c <_getpid_r>
 800ddcc:	462a      	mov	r2, r5
 800ddce:	4601      	mov	r1, r0
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddd6:	f000 b817 	b.w	800de08 <_kill_r>
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d00a      	beq.n	800ddf4 <_raise_r+0x4c>
 800ddde:	1c59      	adds	r1, r3, #1
 800dde0:	d103      	bne.n	800ddea <_raise_r+0x42>
 800dde2:	2316      	movs	r3, #22
 800dde4:	6003      	str	r3, [r0, #0]
 800dde6:	2001      	movs	r0, #1
 800dde8:	e7e7      	b.n	800ddba <_raise_r+0x12>
 800ddea:	2400      	movs	r4, #0
 800ddec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	4798      	blx	r3
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e7e0      	b.n	800ddba <_raise_r+0x12>

0800ddf8 <raise>:
 800ddf8:	4b02      	ldr	r3, [pc, #8]	; (800de04 <raise+0xc>)
 800ddfa:	4601      	mov	r1, r0
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	f7ff bfd3 	b.w	800dda8 <_raise_r>
 800de02:	bf00      	nop
 800de04:	200000fc 	.word	0x200000fc

0800de08 <_kill_r>:
 800de08:	b538      	push	{r3, r4, r5, lr}
 800de0a:	4d07      	ldr	r5, [pc, #28]	; (800de28 <_kill_r+0x20>)
 800de0c:	2300      	movs	r3, #0
 800de0e:	4604      	mov	r4, r0
 800de10:	4608      	mov	r0, r1
 800de12:	4611      	mov	r1, r2
 800de14:	602b      	str	r3, [r5, #0]
 800de16:	f7f3 fc01 	bl	800161c <_kill>
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	d102      	bne.n	800de24 <_kill_r+0x1c>
 800de1e:	682b      	ldr	r3, [r5, #0]
 800de20:	b103      	cbz	r3, 800de24 <_kill_r+0x1c>
 800de22:	6023      	str	r3, [r4, #0]
 800de24:	bd38      	pop	{r3, r4, r5, pc}
 800de26:	bf00      	nop
 800de28:	20002020 	.word	0x20002020

0800de2c <_getpid_r>:
 800de2c:	f7f3 bbee 	b.w	800160c <_getpid>

0800de30 <__sread>:
 800de30:	b510      	push	{r4, lr}
 800de32:	460c      	mov	r4, r1
 800de34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de38:	f000 f894 	bl	800df64 <_read_r>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	bfab      	itete	ge
 800de40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de42:	89a3      	ldrhlt	r3, [r4, #12]
 800de44:	181b      	addge	r3, r3, r0
 800de46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de4a:	bfac      	ite	ge
 800de4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800de4e:	81a3      	strhlt	r3, [r4, #12]
 800de50:	bd10      	pop	{r4, pc}

0800de52 <__swrite>:
 800de52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de56:	461f      	mov	r7, r3
 800de58:	898b      	ldrh	r3, [r1, #12]
 800de5a:	05db      	lsls	r3, r3, #23
 800de5c:	4605      	mov	r5, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	4616      	mov	r6, r2
 800de62:	d505      	bpl.n	800de70 <__swrite+0x1e>
 800de64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de68:	2302      	movs	r3, #2
 800de6a:	2200      	movs	r2, #0
 800de6c:	f000 f868 	bl	800df40 <_lseek_r>
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	4632      	mov	r2, r6
 800de7e:	463b      	mov	r3, r7
 800de80:	4628      	mov	r0, r5
 800de82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de86:	f000 b817 	b.w	800deb8 <_write_r>

0800de8a <__sseek>:
 800de8a:	b510      	push	{r4, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de92:	f000 f855 	bl	800df40 <_lseek_r>
 800de96:	1c43      	adds	r3, r0, #1
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	bf15      	itete	ne
 800de9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800de9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dea6:	81a3      	strheq	r3, [r4, #12]
 800dea8:	bf18      	it	ne
 800deaa:	81a3      	strhne	r3, [r4, #12]
 800deac:	bd10      	pop	{r4, pc}

0800deae <__sclose>:
 800deae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deb2:	f000 b813 	b.w	800dedc <_close_r>
	...

0800deb8 <_write_r>:
 800deb8:	b538      	push	{r3, r4, r5, lr}
 800deba:	4d07      	ldr	r5, [pc, #28]	; (800ded8 <_write_r+0x20>)
 800debc:	4604      	mov	r4, r0
 800debe:	4608      	mov	r0, r1
 800dec0:	4611      	mov	r1, r2
 800dec2:	2200      	movs	r2, #0
 800dec4:	602a      	str	r2, [r5, #0]
 800dec6:	461a      	mov	r2, r3
 800dec8:	f7f3 fbdf 	bl	800168a <_write>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d102      	bne.n	800ded6 <_write_r+0x1e>
 800ded0:	682b      	ldr	r3, [r5, #0]
 800ded2:	b103      	cbz	r3, 800ded6 <_write_r+0x1e>
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	20002020 	.word	0x20002020

0800dedc <_close_r>:
 800dedc:	b538      	push	{r3, r4, r5, lr}
 800dede:	4d06      	ldr	r5, [pc, #24]	; (800def8 <_close_r+0x1c>)
 800dee0:	2300      	movs	r3, #0
 800dee2:	4604      	mov	r4, r0
 800dee4:	4608      	mov	r0, r1
 800dee6:	602b      	str	r3, [r5, #0]
 800dee8:	f7f3 fbeb 	bl	80016c2 <_close>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_close_r+0x1a>
 800def0:	682b      	ldr	r3, [r5, #0]
 800def2:	b103      	cbz	r3, 800def6 <_close_r+0x1a>
 800def4:	6023      	str	r3, [r4, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	20002020 	.word	0x20002020

0800defc <_fstat_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	; (800df1c <_fstat_r+0x20>)
 800df00:	2300      	movs	r3, #0
 800df02:	4604      	mov	r4, r0
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	f7f3 fbe6 	bl	80016da <_fstat>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	d102      	bne.n	800df18 <_fstat_r+0x1c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b103      	cbz	r3, 800df18 <_fstat_r+0x1c>
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop
 800df1c:	20002020 	.word	0x20002020

0800df20 <_isatty_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d06      	ldr	r5, [pc, #24]	; (800df3c <_isatty_r+0x1c>)
 800df24:	2300      	movs	r3, #0
 800df26:	4604      	mov	r4, r0
 800df28:	4608      	mov	r0, r1
 800df2a:	602b      	str	r3, [r5, #0]
 800df2c:	f7f3 fbe5 	bl	80016fa <_isatty>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_isatty_r+0x1a>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	b103      	cbz	r3, 800df3a <_isatty_r+0x1a>
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	20002020 	.word	0x20002020

0800df40 <_lseek_r>:
 800df40:	b538      	push	{r3, r4, r5, lr}
 800df42:	4d07      	ldr	r5, [pc, #28]	; (800df60 <_lseek_r+0x20>)
 800df44:	4604      	mov	r4, r0
 800df46:	4608      	mov	r0, r1
 800df48:	4611      	mov	r1, r2
 800df4a:	2200      	movs	r2, #0
 800df4c:	602a      	str	r2, [r5, #0]
 800df4e:	461a      	mov	r2, r3
 800df50:	f7f3 fbde 	bl	8001710 <_lseek>
 800df54:	1c43      	adds	r3, r0, #1
 800df56:	d102      	bne.n	800df5e <_lseek_r+0x1e>
 800df58:	682b      	ldr	r3, [r5, #0]
 800df5a:	b103      	cbz	r3, 800df5e <_lseek_r+0x1e>
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	bd38      	pop	{r3, r4, r5, pc}
 800df60:	20002020 	.word	0x20002020

0800df64 <_read_r>:
 800df64:	b538      	push	{r3, r4, r5, lr}
 800df66:	4d07      	ldr	r5, [pc, #28]	; (800df84 <_read_r+0x20>)
 800df68:	4604      	mov	r4, r0
 800df6a:	4608      	mov	r0, r1
 800df6c:	4611      	mov	r1, r2
 800df6e:	2200      	movs	r2, #0
 800df70:	602a      	str	r2, [r5, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	f7f3 fb6c 	bl	8001650 <_read>
 800df78:	1c43      	adds	r3, r0, #1
 800df7a:	d102      	bne.n	800df82 <_read_r+0x1e>
 800df7c:	682b      	ldr	r3, [r5, #0]
 800df7e:	b103      	cbz	r3, 800df82 <_read_r+0x1e>
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	bd38      	pop	{r3, r4, r5, pc}
 800df84:	20002020 	.word	0x20002020

0800df88 <_init>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	bf00      	nop
 800df8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8e:	bc08      	pop	{r3}
 800df90:	469e      	mov	lr, r3
 800df92:	4770      	bx	lr

0800df94 <_fini>:
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df96:	bf00      	nop
 800df98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9a:	bc08      	pop	{r3}
 800df9c:	469e      	mov	lr, r3
 800df9e:	4770      	bx	lr
